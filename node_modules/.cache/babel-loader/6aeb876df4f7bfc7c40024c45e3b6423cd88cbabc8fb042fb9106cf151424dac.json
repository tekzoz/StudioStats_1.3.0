{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.3.0/src/LastMonthView.js\";\nimport React from 'react';\nimport { ArrowLeft, Calendar, Clock, Gauge } from 'lucide-react';\nimport { getLatestMonthData, getPreviousMonthData, getAnnualAverageData } from './data';\nimport PerformanceGauge from './PerformanceGauge';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StatCard = ({\n  icon,\n  label,\n  value,\n  comparison,\n  backgroundColor,\n  component\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    backgroundColor: backgroundColor,\n    borderRadius: '12px',\n    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n    padding: '24px',\n    display: 'flex',\n    flexDirection: 'column',\n    marginBottom: '24px'\n  },\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '16px'\n    },\n    children: [/*#__PURE__*/React.cloneElement(icon, {\n      size: 24,\n      color: '#4B5563'\n    }), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        marginLeft: '12px',\n        fontSize: '18px',\n        fontWeight: '500',\n        color: '#4B5563'\n      },\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this), component ? component : /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontSize: '36px',\n      fontWeight: 'bold',\n      color: '#1F2937',\n      marginBottom: '8px'\n    },\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 7\n  }, this), comparison && /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: '8px',\n      fontSize: '14px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: comparison.prevMonth.value === 'N/A' ? 'gray' : parseFloat(comparison.prevMonth.value) > 0 ? 'green' : 'red'\n      },\n      children: [comparison.prevMonth.value, \" (\", comparison.prevMonth.percentage, \") rispetto a \", comparison.prevMonthName, \" \", comparison.prevMonthYear]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: comparison.annual.value === 'N/A' ? 'gray' : parseFloat(comparison.annual.value) > 0 ? 'green' : 'red'\n      },\n      children: [comparison.annual.value, \" (\", comparison.annual.percentage, \") rispetto alla media annuale \", comparison.year]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 7\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 3\n}, this);\n_c = StatCard;\nconst calculateComparison = (current, previous) => {\n  if (typeof current !== 'number' || typeof previous !== 'number') {\n    return {\n      value: 'N/A',\n      percentage: 'N/A'\n    };\n  }\n  const diff = current - previous;\n  const percentage = (diff / previous * 100).toFixed(1);\n  return {\n    value: diff > 0 ? `+${diff.toFixed(1)}` : diff.toFixed(1),\n    percentage: diff > 0 ? `+${percentage}%` : `${percentage}%`\n  };\n};\nconst roundToHalf = num => {\n  return Math.round(num * 2) / 2;\n};\nconst LastMonthView = ({\n  setView\n}) => {\n  const latestMonthData = getLatestMonthData();\n  const previousMonthData = getPreviousMonthData();\n  const annualAverageData = getAnnualAverageData();\n  const currentDate = new Date();\n  const lastMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\n  const previousMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() - 2, 1);\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  const displayMonth = monthNames[lastMonth.getMonth()];\n  const displayYear = lastMonth.getFullYear();\n  const previousMonthName = monthNames[previousMonth.getMonth()];\n  const previousMonthYear = previousMonth.getFullYear();\n  const comparisonDataTurni = {\n    prevMonth: calculateComparison(latestMonthData.totaleTurni, previousMonthData.totaleTurni),\n    annual: calculateComparison(latestMonthData.totaleTurni, annualAverageData.mediaAnnuale),\n    prevMonthName: previousMonthName,\n    prevMonthYear: previousMonthYear,\n    year: displayYear\n  };\n  const comparisonDataMedia = {\n    prevMonth: calculateComparison(roundToHalf(latestMonthData.mediaGiornaliera), roundToHalf(previousMonthData.mediaGiornaliera)),\n    annual: calculateComparison(roundToHalf(latestMonthData.mediaGiornaliera), roundToHalf(annualAverageData.mediaAnnuale / 30)),\n    // Approssimazione\n    prevMonthName: previousMonthName,\n    prevMonthYear: previousMonthYear,\n    year: displayYear\n  };\n  const stats = [{\n    icon: /*#__PURE__*/_jsxDEV(Calendar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this),\n    label: 'Totale Turni di Doppiaggio',\n    value: latestMonthData.totaleTurni,\n    comparison: comparisonDataTurni,\n    backgroundColor: '#E6F3FF'\n  }, {\n    icon: /*#__PURE__*/_jsxDEV(Clock, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this),\n    label: 'Media Turni di Doppiaggio Giornaliera (Lun-Ven)',\n    value: roundToHalf(latestMonthData.mediaGiornaliera).toFixed(1),\n    comparison: comparisonDataMedia,\n    backgroundColor: '#FFF0E6'\n  }, {\n    icon: /*#__PURE__*/_jsxDEV(Gauge, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this),\n    label: 'Utilizzo delle Sale di Doppiaggio',\n    component: /*#__PURE__*/_jsxDEV(PerformanceGauge, {\n      value: roundToHalf(latestMonthData.mediaGiornaliera)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 18\n    }, this),\n    backgroundColor: '#F0E6FF'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: '#F0F9FF',\n      minHeight: '100vh',\n      padding: '24px',\n      fontFamily: \"'Helvetica Neue', Arial, sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '600px',\n        margin: '0 auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setView('main'),\n        style: {\n          background: '#4B5563',\n          color: 'white',\n          border: 'none',\n          borderRadius: '8px',\n          padding: '10px 20px',\n          cursor: 'pointer',\n          display: 'flex',\n          alignItems: 'center',\n          fontSize: '16px',\n          marginBottom: '24px',\n          transition: 'background-color 0.3s'\n        },\n        onMouseOver: e => e.currentTarget.style.backgroundColor = '#374151',\n        onMouseOut: e => e.currentTarget.style.backgroundColor = '#4B5563',\n        children: [/*#__PURE__*/_jsxDEV(ArrowLeft, {\n          size: 20,\n          style: {\n            marginRight: '8px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), \"Torna alla Dashboard\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: '32px',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          marginBottom: '8px',\n          color: '#1F2937'\n        },\n        children: \"Statistiche Ultimo Mese\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          fontSize: '28px',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          marginBottom: '32px',\n          color: '#4B5563',\n          textTransform: 'uppercase'\n        },\n        children: [displayMonth, \" \", displayYear]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: stats.map((stat, index) => /*#__PURE__*/_jsxDEV(StatCard, {\n          ...stat\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_c2 = LastMonthView;\nexport default LastMonthView;\nvar _c, _c2;\n$RefreshReg$(_c, \"StatCard\");\n$RefreshReg$(_c2, \"LastMonthView\");","map":{"version":3,"names":["React","ArrowLeft","Calendar","Clock","Gauge","getLatestMonthData","getPreviousMonthData","getAnnualAverageData","PerformanceGauge","jsxDEV","_jsxDEV","StatCard","icon","label","value","comparison","backgroundColor","component","style","borderRadius","boxShadow","padding","display","flexDirection","marginBottom","children","alignItems","cloneElement","size","color","marginLeft","fontSize","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","prevMonth","parseFloat","percentage","prevMonthName","prevMonthYear","annual","year","_c","calculateComparison","current","previous","diff","toFixed","roundToHalf","num","Math","round","LastMonthView","setView","latestMonthData","previousMonthData","annualAverageData","currentDate","Date","lastMonth","getFullYear","getMonth","previousMonth","monthNames","displayMonth","displayYear","previousMonthName","previousMonthYear","comparisonDataTurni","totaleTurni","mediaAnnuale","comparisonDataMedia","mediaGiornaliera","stats","minHeight","fontFamily","maxWidth","margin","onClick","background","border","cursor","transition","onMouseOver","e","currentTarget","onMouseOut","marginRight","textAlign","textTransform","map","stat","index","_c2","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.3.0/src/LastMonthView.js"],"sourcesContent":["import React from 'react';\nimport { ArrowLeft, Calendar, Clock, Gauge } from 'lucide-react';\nimport { getLatestMonthData, getPreviousMonthData, getAnnualAverageData } from './data';\nimport PerformanceGauge from './PerformanceGauge';\n\nconst StatCard = ({ icon, label, value, comparison, backgroundColor, component }) => (\n  <div style={{\n    backgroundColor: backgroundColor,\n    borderRadius: '12px',\n    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n    padding: '24px',\n    display: 'flex',\n    flexDirection: 'column',\n    marginBottom: '24px',\n  }}>\n    <div style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}>\n      {React.cloneElement(icon, { size: 24, color: '#4B5563' })}\n      <span style={{ marginLeft: '12px', fontSize: '18px', fontWeight: '500', color: '#4B5563' }}>{label}</span>\n    </div>\n    {component ? (\n      component\n    ) : (\n      <div style={{ fontSize: '36px', fontWeight: 'bold', color: '#1F2937', marginBottom: '8px' }}>{value}</div>\n    )}\n    {comparison && (\n      <div style={{ marginTop: '8px', fontSize: '14px' }}>\n        <div style={{ color: comparison.prevMonth.value === 'N/A' ? 'gray' : (parseFloat(comparison.prevMonth.value) > 0 ? 'green' : 'red') }}>\n          {comparison.prevMonth.value} ({comparison.prevMonth.percentage}) rispetto a {comparison.prevMonthName} {comparison.prevMonthYear}\n        </div>\n        <div style={{ color: comparison.annual.value === 'N/A' ? 'gray' : (parseFloat(comparison.annual.value) > 0 ? 'green' : 'red') }}>\n          {comparison.annual.value} ({comparison.annual.percentage}) rispetto alla media annuale {comparison.year}\n        </div>\n      </div>\n    )}\n  </div>\n);\n\nconst calculateComparison = (current, previous) => {\n  if (typeof current !== 'number' || typeof previous !== 'number') {\n    return { value: 'N/A', percentage: 'N/A' };\n  }\n  const diff = current - previous;\n  const percentage = ((diff / previous) * 100).toFixed(1);\n  return {\n    value: diff > 0 ? `+${diff.toFixed(1)}` : diff.toFixed(1),\n    percentage: diff > 0 ? `+${percentage}%` : `${percentage}%`\n  };\n};\n\nconst roundToHalf = (num) => {\n  return Math.round(num * 2) / 2;\n};\n\nconst LastMonthView = ({ setView }) => {\n  const latestMonthData = getLatestMonthData();\n  const previousMonthData = getPreviousMonthData();\n  const annualAverageData = getAnnualAverageData();\n\n  const currentDate = new Date();\n  const lastMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\n  const previousMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() - 2, 1);\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  const displayMonth = monthNames[lastMonth.getMonth()];\n  const displayYear = lastMonth.getFullYear();\n  const previousMonthName = monthNames[previousMonth.getMonth()];\n  const previousMonthYear = previousMonth.getFullYear();\n\n  const comparisonDataTurni = {\n    prevMonth: calculateComparison(latestMonthData.totaleTurni, previousMonthData.totaleTurni),\n    annual: calculateComparison(latestMonthData.totaleTurni, annualAverageData.mediaAnnuale),\n    prevMonthName: previousMonthName,\n    prevMonthYear: previousMonthYear,\n    year: displayYear\n  };\n\n  const comparisonDataMedia = {\n    prevMonth: calculateComparison(roundToHalf(latestMonthData.mediaGiornaliera), roundToHalf(previousMonthData.mediaGiornaliera)),\n    annual: calculateComparison(roundToHalf(latestMonthData.mediaGiornaliera), roundToHalf(annualAverageData.mediaAnnuale / 30)), // Approssimazione\n    prevMonthName: previousMonthName,\n    prevMonthYear: previousMonthYear,\n    year: displayYear\n  };\n\n  const stats = [\n    { \n      icon: <Calendar />, \n      label: 'Totale Turni di Doppiaggio', \n      value: latestMonthData.totaleTurni,\n      comparison: comparisonDataTurni,\n      backgroundColor: '#E6F3FF'\n    },\n    { \n      icon: <Clock />, \n      label: 'Media Turni di Doppiaggio Giornaliera (Lun-Ven)', \n      value: roundToHalf(latestMonthData.mediaGiornaliera).toFixed(1),\n      comparison: comparisonDataMedia,\n      backgroundColor: '#FFF0E6'\n    },\n    { \n      icon: <Gauge />, \n      label: 'Utilizzo delle Sale di Doppiaggio', \n      component: <PerformanceGauge value={roundToHalf(latestMonthData.mediaGiornaliera)} />,\n      backgroundColor: '#F0E6FF'\n    },\n  ];\n\n  return (\n    <div style={{\n      backgroundColor: '#F0F9FF',\n      minHeight: '100vh',\n      padding: '24px',\n      fontFamily: \"'Helvetica Neue', Arial, sans-serif\",\n    }}>\n      <div style={{ maxWidth: '600px', margin: '0 auto' }}>\n        <button \n          onClick={() => setView('main')} \n          style={{\n            background: '#4B5563',\n            color: 'white',\n            border: 'none',\n            borderRadius: '8px',\n            padding: '10px 20px',\n            cursor: 'pointer',\n            display: 'flex',\n            alignItems: 'center',\n            fontSize: '16px',\n            marginBottom: '24px',\n            transition: 'background-color 0.3s',\n          }}\n          onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#374151'}\n          onMouseOut={(e) => e.currentTarget.style.backgroundColor = '#4B5563'}\n        >\n          <ArrowLeft size={20} style={{ marginRight: '8px' }} />\n          Torna alla Dashboard\n        </button>\n        \n        <h1 style={{\n          fontSize: '32px',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          marginBottom: '8px',\n          color: '#1F2937',\n        }}>\n          Statistiche Ultimo Mese\n        </h1>\n        <h2 style={{\n          fontSize: '28px',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          marginBottom: '32px',\n          color: '#4B5563',\n          textTransform: 'uppercase',\n        }}>\n          {displayMonth} {displayYear}\n        </h2>\n        \n        <div>\n          {stats.map((stat, index) => (\n            <StatCard key={index} {...stat} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LastMonthView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}