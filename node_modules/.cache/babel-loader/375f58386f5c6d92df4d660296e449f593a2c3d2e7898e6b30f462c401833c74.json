{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n_c = ViewContainer;\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c2 = ViewContent;\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n_c3 = ViewTitle;\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c4 = ChartContainer;\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Dati di esempio per il grafico\n_c5 = BackButton;\nconst PerformanceTrendView = ({\n  setView\n}) => {\n  _s();\n  const [yearlyData, setYearlyData] = useState({});\n  const [lastMonthAnalysis, setLastMonthAnalysis] = useState('');\n  const [quadrimesterAnalysis, setQuadrimesterAnalysis] = useState('');\n  const [yearAnalysis, setYearAnalysis] = useState('');\n  const [prediction, setPrediction] = useState('');\n  useEffect(() => {\n    const {\n      currentYear,\n      currentMonth\n    } = getCurrentYearAndMonth();\n    const data = getYearlyData(currentYear);\n    setYearlyData(data);\n    setLastMonthAnalysis(analyzeLastMonth(currentYear, currentMonth));\n    setQuadrimesterAnalysis(analyzeQuadrimester(currentYear, currentMonth));\n    setYearAnalysis(analyzeYear(currentYear, currentMonth));\n    setPrediction(makePrediction(currentYear, currentMonth));\n  }, []);\n  const formatChartData = data => {\n    return Object.entries(data).map(([month, value]) => ({\n      month: getMonthName(parseInt(month) + 1),\n      turni: value.totaleTurni\n    }));\n  };\n  const analyzeLastMonth = (year, month) => {\n    const availableMonths = getAvailableMonths();\n    const lastAvailableMonth = availableMonths[0].value;\n    const [lastYear, lastMonth] = lastAvailableMonth.split('-').map(Number);\n    const lastMonthData = getMonthData(lastAvailableMonth);\n    if (!lastMonthData) return \"Dati non disponibili per l'ultimo mese.\";\n    const {\n      totaleTurni,\n      mediaGiornaliera,\n      massimoTurni,\n      minimoTurni\n    } = lastMonthData;\n    const monthName = getMonthName(lastMonth);\n    return `Nel mese di ${monthName} ${lastYear}, sono stati effettuati un totale di ${totaleTurni} turni, \n    con una media giornaliera di ${mediaGiornaliera.toFixed(2)} turni. \n    Il giorno più impegnativo è stato il ${massimoTurni.day} con ${massimoTurni.shifts} turni, \n    mentre il giorno con meno attività è stato il ${minimoTurni.day} con ${minimoTurni.shifts} turni.`;\n  };\n  const analyzeQuadrimester = (year, month) => {\n    const availableMonths = getAvailableMonths();\n    const lastFourMonths = availableMonths.slice(0, 4);\n    let totalTurni = 0;\n    let totalDays = 0;\n    const monthsAnalysis = lastFourMonths.map(monthObj => {\n      const monthData = getMonthData(monthObj.value);\n      if (monthData) {\n        totalTurni += monthData.totaleTurni;\n        totalDays += Object.keys(monthData.days).length;\n        return `${monthObj.label}: ${monthData.totaleTurni} turni`;\n      }\n      return `${monthObj.label}: Dati non disponibili`;\n    });\n    const averageTurni = totalTurni / totalDays;\n    return `Analisi degli ultimi 4 mesi:\\n${monthsAnalysis.join('\\n')}\\n\n    In totale, negli ultimi 4 mesi sono stati effettuati ${totalTurni} turni,\n    con una media giornaliera di ${averageTurni.toFixed(2)} turni.`;\n  };\n  const analyzeYear = (year, month) => {\n    const yearData = getYearlyData(year);\n    const totalTurni = Object.values(yearData).reduce((sum, month) => sum + month.totaleTurni, 0);\n    const monthsWithData = Object.values(yearData).filter(month => month.totaleTurni > 0).length;\n    const averageMonthlyTurni = totalTurni / monthsWithData;\n    const monthsComparison = Object.entries(yearData).map(([monthIndex, data]) => {\n      const monthName = getMonthName(parseInt(monthIndex) + 1);\n      const difference = data.totaleTurni - averageMonthlyTurni;\n      return `${monthName}: ${difference > 0 ? '+' : ''}${difference.toFixed(0)} rispetto alla media`;\n    }).filter((_, index) => index < month);\n    return `Nell'anno ${year}, fino ad ora, sono stati effettuati un totale di ${totalTurni} turni,\n    con una media mensile di ${averageMonthlyTurni.toFixed(2)} turni.\n    Ecco come si sono comportati i mesi rispetto alla media:\\n${monthsComparison.join('\\n')}`;\n  };\n  const makePrediction = (year, month) => {\n    const availableYears = getAvailableMonths().map(m => m.value.split('-')[0]).filter((v, i, arr) => arr.indexOf(v) === i);\n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = getYearlyData(parseInt(y));\n        if (yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`${getMonthName(i)}: ${averageTurni.toFixed(0)} turni`);\n      }\n    }\n    return `Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n    \\n${futurePredictions.join('\\n')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(ViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(ViewContent, {\n      children: [/*#__PURE__*/_jsxDEV(ViewTitle, {\n        children: \"Performance Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: formatChartData(yearlyData),\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"turni\",\n              stroke: \"#3B82F6\",\n              activeDot: {\n                r: 8\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Analisi dell'ultimo mese\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: lastMonthAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Considerazioni sugli ultimi 4 mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: quadrimesterAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Conclusioni sull'anno in corso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: yearAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Previsione per i prossimi mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: prediction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BackButton, {\n        onClick: () => setView('main'),\n        children: \"Torna alla Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceTrendView, \"jm9Ng60FHM17asRn9lUZeKJlwDs=\");\n_c6 = PerformanceTrendView;\nexport default PerformanceTrendView;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"ViewContainer\");\n$RefreshReg$(_c2, \"ViewContent\");\n$RefreshReg$(_c3, \"ViewTitle\");\n$RefreshReg$(_c4, \"ChartContainer\");\n$RefreshReg$(_c5, \"BackButton\");\n$RefreshReg$(_c6, \"PerformanceTrendView\");","map":{"version":3,"names":["React","useState","useEffect","styled","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","ViewContainer","div","_c","ViewContent","_c2","ViewTitle","h1","_c3","ChartContainer","_c4","BackButton","button","_c5","PerformanceTrendView","setView","_s","yearlyData","setYearlyData","lastMonthAnalysis","setLastMonthAnalysis","quadrimesterAnalysis","setQuadrimesterAnalysis","yearAnalysis","setYearAnalysis","prediction","setPrediction","currentYear","currentMonth","getCurrentYearAndMonth","data","getYearlyData","analyzeLastMonth","analyzeQuadrimester","analyzeYear","makePrediction","formatChartData","Object","entries","map","month","value","getMonthName","parseInt","turni","totaleTurni","year","availableMonths","getAvailableMonths","lastAvailableMonth","lastYear","lastMonth","split","Number","lastMonthData","getMonthData","mediaGiornaliera","massimoTurni","minimoTurni","monthName","toFixed","day","shifts","lastFourMonths","slice","totalTurni","totalDays","monthsAnalysis","monthObj","monthData","keys","days","length","label","averageTurni","join","yearData","values","reduce","sum","monthsWithData","filter","averageMonthlyTurni","monthsComparison","monthIndex","difference","_","index","availableYears","m","v","i","arr","indexOf","futurePredictions","yearsCount","forEach","y","push","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","type","stroke","activeDot","r","AnalysisSection","AnalysisTitle","AnalysisText","onClick","_c6","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Dati di esempio per il grafico\nconst PerformanceTrendView = ({ setView }) => {\n  const [yearlyData, setYearlyData] = useState({});\n  const [lastMonthAnalysis, setLastMonthAnalysis] = useState('');\n  const [quadrimesterAnalysis, setQuadrimesterAnalysis] = useState('');\n  const [yearAnalysis, setYearAnalysis] = useState('');\n  const [prediction, setPrediction] = useState('');\n\n  useEffect(() => {\n    const { currentYear, currentMonth } = getCurrentYearAndMonth();\n    const data = getYearlyData(currentYear);\n    setYearlyData(data);\n\n    setLastMonthAnalysis(analyzeLastMonth(currentYear, currentMonth));\n    setQuadrimesterAnalysis(analyzeQuadrimester(currentYear, currentMonth));\n    setYearAnalysis(analyzeYear(currentYear, currentMonth));\n    setPrediction(makePrediction(currentYear, currentMonth));\n  }, []);\n\n  const formatChartData = (data) => {\n    return Object.entries(data).map(([month, value]) => ({\n      month: getMonthName(parseInt(month) + 1),\n      turni: value.totaleTurni\n    }));\n  };\n\n  const analyzeLastMonth = (year, month) => {\n    const availableMonths = getAvailableMonths();\n    const lastAvailableMonth = availableMonths[0].value;\n    const [lastYear, lastMonth] = lastAvailableMonth.split('-').map(Number);\n    const lastMonthData = getMonthData(lastAvailableMonth);\n\n    if (!lastMonthData) return \"Dati non disponibili per l'ultimo mese.\";\n\n    const { totaleTurni, mediaGiornaliera, massimoTurni, minimoTurni } = lastMonthData;\n    const monthName = getMonthName(lastMonth);\n\n    return `Nel mese di ${monthName} ${lastYear}, sono stati effettuati un totale di ${totaleTurni} turni, \n    con una media giornaliera di ${mediaGiornaliera.toFixed(2)} turni. \n    Il giorno più impegnativo è stato il ${massimoTurni.day} con ${massimoTurni.shifts} turni, \n    mentre il giorno con meno attività è stato il ${minimoTurni.day} con ${minimoTurni.shifts} turni.`;\n  };\n\n  const analyzeQuadrimester = (year, month) => {\n    const availableMonths = getAvailableMonths();\n    const lastFourMonths = availableMonths.slice(0, 4);\n    let totalTurni = 0;\n    let totalDays = 0;\n\n    const monthsAnalysis = lastFourMonths.map(monthObj => {\n      const monthData = getMonthData(monthObj.value);\n      if (monthData) {\n        totalTurni += monthData.totaleTurni;\n        totalDays += Object.keys(monthData.days).length;\n        return `${monthObj.label}: ${monthData.totaleTurni} turni`;\n      }\n      return `${monthObj.label}: Dati non disponibili`;\n    });\n\n    const averageTurni = totalTurni / totalDays;\n\n    return `Analisi degli ultimi 4 mesi:\\n${monthsAnalysis.join('\\n')}\\n\n    In totale, negli ultimi 4 mesi sono stati effettuati ${totalTurni} turni,\n    con una media giornaliera di ${averageTurni.toFixed(2)} turni.`;\n  };\n\n  const analyzeYear = (year, month) => {\n    const yearData = getYearlyData(year);\n    const totalTurni = Object.values(yearData).reduce((sum, month) => sum + month.totaleTurni, 0);\n    const monthsWithData = Object.values(yearData).filter(month => month.totaleTurni > 0).length;\n    const averageMonthlyTurni = totalTurni / monthsWithData;\n\n    const monthsComparison = Object.entries(yearData)\n      .map(([monthIndex, data]) => {\n        const monthName = getMonthName(parseInt(monthIndex) + 1);\n        const difference = data.totaleTurni - averageMonthlyTurni;\n        return `${monthName}: ${difference > 0 ? '+' : ''}${difference.toFixed(0)} rispetto alla media`;\n      })\n      .filter((_, index) => index < month);\n\n    return `Nell'anno ${year}, fino ad ora, sono stati effettuati un totale di ${totalTurni} turni,\n    con una media mensile di ${averageMonthlyTurni.toFixed(2)} turni.\n    Ecco come si sono comportati i mesi rispetto alla media:\\n${monthsComparison.join('\\n')}`;\n  };\n\n  const makePrediction = (year, month) => {\n    const availableYears = getAvailableMonths().map(m => m.value.split('-')[0])\n      .filter((v, i, arr) => arr.indexOf(v) === i);\n    \n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = getYearlyData(parseInt(y));\n        if (yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`${getMonthName(i)}: ${averageTurni.toFixed(0)} turni`);\n      }\n    }\n\n    return `Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n    \\n${futurePredictions.join('\\n')}`;\n  };\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <ViewTitle>Performance Trend</ViewTitle>\n        <ChartContainer>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={formatChartData(yearlyData)}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"turni\" stroke=\"#3B82F6\" activeDot={{ r: 8 }} />\n            </LineChart>\n          </ResponsiveContainer>\n        </ChartContainer>\n        <AnalysisSection>\n          <AnalysisTitle>Analisi dell'ultimo mese</AnalysisTitle>\n          <AnalysisText>{lastMonthAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Considerazioni sugli ultimi 4 mesi</AnalysisTitle>\n          <AnalysisText>{quadrimesterAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Conclusioni sull'anno in corso</AnalysisTitle>\n          <AnalysisText>{yearAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Previsione per i prossimi mesi</AnalysisTitle>\n          <AnalysisText>{prediction}</AnalysisText>\n        </AnalysisSection>\n        <BackButton onClick={() => setView('main')}>Torna alla Dashboard</BackButton>\n      </ViewContent>\n    </ViewContainer>\n  );\n};\n\nexport default PerformanceTrendView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}