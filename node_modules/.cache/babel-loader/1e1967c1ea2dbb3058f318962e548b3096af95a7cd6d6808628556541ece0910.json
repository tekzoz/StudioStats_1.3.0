{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { getYearlyData, getCurrentYearAndMonth, getAvailableYears } from './data';\n\n// Styled components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n_c = ViewContainer;\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c2 = ViewContent;\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n_c3 = ViewTitle;\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c4 = ChartContainer;\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c5 = AnalysisSection;\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n_c6 = AnalysisTitle;\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n_c7 = AnalysisText;\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n_c8 = LegendContainer;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n_c9 = LegendItem;\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n_c10 = LegendColor;\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\n_c11 = BackButton;\nconst getMonthName = monthNumber => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber - 1];\n};\nconst formatNumber = num => new Intl.NumberFormat('it-IT').format(num);\n\n// Funzione per generare una palette di colori\nconst generateColorPalette = numColors => {\n  const hueStep = 360 / numColors;\n  return Array.from({\n    length: numColors\n  }, (_, i) => `hsl(${i * hueStep}, 70%, 50%)`);\n};\nconst PerformanceTrendView = ({\n  setView\n}) => {\n  _s();\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearAnalysis, setYearAnalysis] = useState('');\n  const [prediction, setPrediction] = useState('');\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const {\n    currentYear,\n    currentMonth\n  } = getCurrentYearAndMonth();\n  useEffect(() => {\n    const yearsData = {};\n    availableYears.forEach(year => {\n      yearsData[year] = getYearlyData(year);\n    });\n    setAllYearsData(yearsData);\n    setYearAnalysis(analyzeYear(currentYear, currentMonth));\n    setPrediction(makePrediction(currentYear, currentMonth));\n  }, [currentYear, currentMonth, availableYears]);\n  const analyzeYear = (year, month) => {\n    const yearData = allYearsData[year] || {};\n    const totalTurni = Object.values(yearData).reduce((sum, month) => sum + (month.totaleTurni || 0), 0);\n    const monthsWithData = Object.values(yearData).filter(month => month && month.totaleTurni > 0).length;\n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n    const monthsComparison = Object.entries(yearData).map(([monthIndex, data]) => {\n      const monthName = getMonthName(parseInt(monthIndex) + 1);\n      const difference = (data.totaleTurni || 0) - averageMonthlyTurni;\n      return `• ${monthName}: ${difference > 0 ? '+' : ''}${formatNumber(difference.toFixed(0))} rispetto alla media`;\n    }).filter((_, index) => index < month);\n    return `\n      Nell'anno ${year}, fino ad ora:\n      • Totale turni: ${formatNumber(totalTurni)}\n      • Media mensile: ${formatNumber(averageMonthlyTurni.toFixed(2))} turni\n      \n      Confronto dei mesi rispetto alla media:\n      ${monthsComparison.join('\\n')}\n    `;\n  };\n  const makePrediction = (year, month) => {\n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = allYearsData[y];\n        if (yearData && yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`• ${getMonthName(i)}: ${formatNumber(averageTurni.toFixed(0))} turni`);\n      }\n    }\n    return `\n      Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n      ${futurePredictions.join('\\n')}\n    `;\n  };\n  const formatChartData = () => {\n    const chartData = [];\n    for (let month = 0; month < 12; month++) {\n      const monthData = {\n        month: getMonthName(month + 1)\n      };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (yearData && yearData[month]) {\n          monthData[year] = yearData[month].totaleTurni;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  };\n  return /*#__PURE__*/_jsxDEV(ViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(ViewContent, {\n      children: [/*#__PURE__*/_jsxDEV(ViewTitle, {\n        children: \"Performance Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Trend annuale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: formatChartData(),\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), availableYears.map((year, index) => /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: year.toString(),\n              stroke: colorPalette[index],\n              strokeWidth: year === currentYear ? 3 : 1,\n              dot: false\n            }, year, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LegendContainer, {\n          children: availableYears.map((year, index) => /*#__PURE__*/_jsxDEV(LegendItem, {\n            children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n              color: colorPalette[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this)]\n          }, year, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Conclusioni sull'anno in corso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: yearAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Previsione per i prossimi mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: prediction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BackButton, {\n        onClick: () => setView('main'),\n        children: \"Torna alla Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceTrendView, \"0omG6agserNouo5I/7WMZc5vdSY=\");\n_c12 = PerformanceTrendView;\nexport default PerformanceTrendView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"ViewContainer\");\n$RefreshReg$(_c2, \"ViewContent\");\n$RefreshReg$(_c3, \"ViewTitle\");\n$RefreshReg$(_c4, \"ChartContainer\");\n$RefreshReg$(_c5, \"AnalysisSection\");\n$RefreshReg$(_c6, \"AnalysisTitle\");\n$RefreshReg$(_c7, \"AnalysisText\");\n$RefreshReg$(_c8, \"LegendContainer\");\n$RefreshReg$(_c9, \"LegendItem\");\n$RefreshReg$(_c10, \"LegendColor\");\n$RefreshReg$(_c11, \"BackButton\");\n$RefreshReg$(_c12, \"PerformanceTrendView\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","styled","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","getYearlyData","getCurrentYearAndMonth","getAvailableYears","jsxDEV","_jsxDEV","ViewContainer","div","_c","ViewContent","_c2","ViewTitle","h1","_c3","ChartContainer","_c4","AnalysisSection","_c5","AnalysisTitle","h2","_c6","AnalysisText","p","_c7","LegendContainer","_c8","LegendItem","_c9","LegendColor","props","color","_c10","BackButton","button","_c11","getMonthName","monthNumber","monthNames","formatNumber","num","Intl","NumberFormat","format","generateColorPalette","numColors","hueStep","Array","from","length","_","i","PerformanceTrendView","setView","_s","allYearsData","setAllYearsData","yearAnalysis","setYearAnalysis","prediction","setPrediction","availableYears","map","y","parseInt","value","colorPalette","currentYear","currentMonth","yearsData","forEach","year","analyzeYear","makePrediction","month","yearData","totalTurni","Object","values","reduce","sum","totaleTurni","monthsWithData","filter","averageMonthlyTurni","monthsComparison","entries","monthIndex","data","monthName","difference","toFixed","index","join","futurePredictions","yearsCount","averageTurni","push","formatChartData","chartData","monthData","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","type","toString","stroke","strokeWidth","dot","onClick","_c12","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { \n  getYearlyData, \n  getCurrentYearAndMonth,\n  getAvailableYears\n} from './data';\n\n// Styled components\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\nconst getMonthName = (monthNumber) => {\n  const monthNames = [\n    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n  ];\n  return monthNames[monthNumber - 1];\n};\n\nconst formatNumber = (num) => new Intl.NumberFormat('it-IT').format(num);\n\n// Funzione per generare una palette di colori\nconst generateColorPalette = (numColors) => {\n  const hueStep = 360 / numColors;\n  return Array.from({ length: numColors }, (_, i) => \n    `hsl(${i * hueStep}, 70%, 50%)`\n  );\n};\n\nconst PerformanceTrendView = ({ setView }) => {\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearAnalysis, setYearAnalysis] = useState('');\n  const [prediction, setPrediction] = useState('');\n\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n\n  const { currentYear, currentMonth } = getCurrentYearAndMonth();\n\n  useEffect(() => {\n    const yearsData = {};\n    availableYears.forEach(year => {\n      yearsData[year] = getYearlyData(year);\n    });\n    setAllYearsData(yearsData);\n\n    setYearAnalysis(analyzeYear(currentYear, currentMonth));\n    setPrediction(makePrediction(currentYear, currentMonth));\n  }, [currentYear, currentMonth, availableYears]);\n\n  const analyzeYear = (year, month) => {\n    const yearData = allYearsData[year] || {};\n    const totalTurni = Object.values(yearData).reduce((sum, month) => sum + (month.totaleTurni || 0), 0);\n    const monthsWithData = Object.values(yearData).filter(month => month && month.totaleTurni > 0).length;\n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n\n    const monthsComparison = Object.entries(yearData)\n      .map(([monthIndex, data]) => {\n        const monthName = getMonthName(parseInt(monthIndex) + 1);\n        const difference = (data.totaleTurni || 0) - averageMonthlyTurni;\n        return `• ${monthName}: ${difference > 0 ? '+' : ''}${formatNumber(difference.toFixed(0))} rispetto alla media`;\n      })\n      .filter((_, index) => index < month);\n\n    return `\n      Nell'anno ${year}, fino ad ora:\n      • Totale turni: ${formatNumber(totalTurni)}\n      • Media mensile: ${formatNumber(averageMonthlyTurni.toFixed(2))} turni\n      \n      Confronto dei mesi rispetto alla media:\n      ${monthsComparison.join('\\n')}\n    `;\n  };\n\n  const makePrediction = (year, month) => {\n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = allYearsData[y];\n        if (yearData && yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`• ${getMonthName(i)}: ${formatNumber(averageTurni.toFixed(0))} turni`);\n      }\n    }\n\n    return `\n      Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n      ${futurePredictions.join('\\n')}\n    `;\n  };\n\n  const formatChartData = () => {\n    const chartData = [];\n    for (let month = 0; month < 12; month++) {\n      const monthData = { month: getMonthName(month + 1) };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (yearData && yearData[month]) {\n          monthData[year] = yearData[month].totaleTurni;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  };\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <ViewTitle>Performance Trend</ViewTitle>\n        <ChartContainer>\n          <AnalysisTitle>Trend annuale</AnalysisTitle>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={formatChartData()}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip />\n              {availableYears.map((year, index) => (\n                <Line\n                  key={year}\n                  type=\"monotone\"\n                  dataKey={year.toString()}\n                  stroke={colorPalette[index]}\n                  strokeWidth={year === currentYear ? 3 : 1}\n                  dot={false}\n                />\n              ))}\n            </LineChart>\n          </ResponsiveContainer>\n          <LegendContainer>\n            {availableYears.map((year, index) => (\n              <LegendItem key={year}>\n                <LegendColor color={colorPalette[index]} />\n                <span>{year}</span>\n              </LegendItem>\n            ))}\n          </LegendContainer>\n        </ChartContainer>\n        <AnalysisSection>\n          <AnalysisTitle>Conclusioni sull'anno in corso</AnalysisTitle>\n          <AnalysisText>{yearAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Previsione per i prossimi mesi</AnalysisTitle>\n          <AnalysisText>{prediction}</AnalysisText>\n        </AnalysisSection>\n        <BackButton onClick={() => setView('main')}>Torna alla Dashboard</BackButton>\n      </ViewContent>\n    </ViewContainer>\n  );\n};\n\nexport default PerformanceTrendView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}