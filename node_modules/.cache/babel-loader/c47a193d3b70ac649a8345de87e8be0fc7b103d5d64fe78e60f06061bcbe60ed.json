{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { Share2 } from 'lucide-react';\nimport { getYearlyData, getCurrentYearAndMonth, getAvailableYears } from './data';\n\n// Styled components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n_c = ViewContainer;\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c2 = ViewContent;\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n_c3 = ViewTitle;\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c4 = ChartContainer;\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c5 = AnalysisSection;\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n_c6 = AnalysisTitle;\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n_c7 = AnalysisText;\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n_c8 = LegendContainer;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n_c9 = LegendItem;\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n_c10 = LegendColor;\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 24px;\n`;\n_c11 = ButtonContainer;\nconst Button = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n  display: flex;\n  align-items: center;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n\n  svg {\n    margin-right: 8px;\n  }\n`;\n\n// Helper functions\n_c12 = Button;\nconst getMonthName = monthNumber => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber - 1];\n};\nconst formatNumber = num => new Intl.NumberFormat('it-IT').format(Math.round(num));\nconst generateColorPalette = numColors => {\n  const hueStep = 360 / numColors;\n  return Array.from({\n    length: numColors\n  }, (_, i) => `hsl(${i * hueStep}, 70%, 50%)`);\n};\nconst PerformanceTrendView = ({\n  setView\n}) => {\n  _s();\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearAnalysis, setYearAnalysis] = useState('');\n  const [prediction, setPrediction] = useState('');\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const {\n    currentYear,\n    currentMonth\n  } = getCurrentYearAndMonth();\n  const generateYearAnalysis = useCallback((year, currentMonth, yearData, allYearsData) => {\n    const month = currentMonth > 1 ? currentMonth - 1 : 12;\n    const yearToAnalyze = month === 12 ? year - 1 : year;\n    const currentYearData = yearData[yearToAnalyze] || {};\n    const totalTurni = Object.values(currentYearData).slice(0, month).reduce((sum, monthData) => sum + ((monthData === null || monthData === void 0 ? void 0 : monthData.totaleTurni) || 0), 0);\n    const monthsWithData = Object.values(currentYearData).slice(0, month).filter(monthData => monthData && monthData.totaleTurni > 0).length;\n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n\n    // Calcolo delle statistiche per gli anni precedenti\n    const previousYearsData = Object.entries(allYearsData).filter(([y]) => parseInt(y) < yearToAnalyze).map(([year, data]) => {\n      const yearTotal = Object.values(data).slice(0, month).reduce((sum, monthData) => sum + ((monthData === null || monthData === void 0 ? void 0 : monthData.totaleTurni) || 0), 0);\n      return {\n        year: parseInt(year),\n        totalTurni: yearTotal\n      };\n    });\n    const avgPreviousYears = previousYearsData.reduce((sum, y) => sum + y.totalTurni, 0) / previousYearsData.length;\n    let analysis = `Considerazioni sull'anno in corso ${yearToAnalyze} (fino a ${getMonthName(month)}):\\n\\n`;\n    analysis += `Nel periodo analizzato, sono stati effettuati un totale di ${formatNumber(totalTurni)} turni, `;\n    analysis += `con una media mensile di ${formatNumber(averageMonthlyTurni)} turni. `;\n    const percentageDiff = (totalTurni - avgPreviousYears) / avgPreviousYears * 100;\n    analysis += `Questo rappresenta un ${percentageDiff > 0 ? 'aumento' : 'diminuzione'} del ${formatNumber(Math.abs(percentageDiff))}% `;\n    analysis += `rispetto alla media di tutti gli anni precedenti nello stesso periodo. `;\n\n    // Analisi stagionale\n    analysis += `\\n\\nAnalisi stagionale:\\n`;\n    const monthlyTurni = Object.values(currentYearData).slice(0, month).map(m => m ? m.totaleTurni : undefined);\n    const quarterlyData = [monthlyTurni.slice(0, 3).filter(m => m !== undefined), monthlyTurni.slice(3, 6).filter(m => m !== undefined), monthlyTurni.slice(6, 9).filter(m => m !== undefined), monthlyTurni.slice(9, 12).filter(m => m !== undefined)];\n    const quarterlyAverages = quarterlyData.map(q => q.length > 0 ? q.reduce((a, b) => a + b, 0) / q.length : null);\n    const quarters = ['primo', 'secondo', 'terzo', 'quarto'];\n    quarterlyAverages.forEach((avg, index) => {\n      if (avg !== null) {\n        const percentDiff = (avg - averageMonthlyTurni) / averageMonthlyTurni * 100;\n        analysis += `Il ${quarters[index]} trimestre mostra una media di ${formatNumber(avg)} turni al mese, `;\n        analysis += `${percentDiff > 0 ? 'superiore' : 'inferiore'} del ${formatNumber(Math.abs(percentDiff))}% rispetto alla media annuale.\\n`;\n      }\n    });\n\n    // Conclusione finale\n    const allYearsTotals = Object.entries(allYearsData).map(([year, data]) => ({\n      year: parseInt(year),\n      totalTurni: Object.values(data).slice(0, month).reduce((sum, monthData) => sum + ((monthData === null || monthData === void 0 ? void 0 : monthData.totaleTurni) || 0), 0)\n    })).sort((a, b) => b.totalTurni - a.totalTurni);\n    const currentYearRank = allYearsTotals.findIndex(y => y.year === yearToAnalyze) + 1;\n    const totalYears = allYearsTotals.length;\n    const percentileRank = currentYearRank / totalYears * 100;\n    analysis += `\\nConclusione:\\n`;\n    analysis += `Con le informazioni attuali possiamo determinare che la produttività dell'anno in corso è `;\n    if (percentageDiff > 0) {\n      analysis += `superiore alla media degli anni passati del ${formatNumber(Math.abs(percentageDiff))}%. `;\n      if (currentYearRank === 1) {\n        analysis += `È attualmente il miglior anno di sempre in termini di produttività. `;\n      } else if (percentileRank <= 30) {\n        analysis += `Rientra tra i migliori anni di sempre (top 30%). `;\n      } else {\n        analysis += `Tuttavia, rispetto alla classifica generale, si posiziona al ${currentYearRank}° posto su ${totalYears}. `;\n      }\n    } else if (percentageDiff < 0) {\n      analysis += `inferiore alla media degli anni passati del ${formatNumber(Math.abs(percentageDiff))}%. `;\n      if (currentYearRank === totalYears) {\n        analysis += `È attualmente l'anno con la produttività più bassa. `;\n      } else if (percentileRank >= 70) {\n        analysis += `Rientra tra gli anni meno produttivi (bottom 30%). `;\n      } else {\n        analysis += `Tuttavia, rispetto alla classifica generale, si posiziona al ${currentYearRank}° posto su ${totalYears}. `;\n      }\n    } else {\n      analysis += `in linea con la media degli anni passati. `;\n      analysis += `Si posiziona al ${currentYearRank}° posto su ${totalYears} nella classifica generale. `;\n    }\n    analysis += `Questo posizionamento tiene conto di tutti gli anni disponibili nei dati, `;\n    analysis += `mentre il confronto con la media considera solo il periodo analizzato fino ad ora (${getMonthName(month)}). `;\n    if (month < 12) {\n      analysis += `C'è ancora tempo per migliorare la performance complessiva dell'anno.`;\n    }\n    return analysis;\n  }, []);\n  const makePrediction = useCallback((year, month, allYearsData) => {\n    let analysis = '';\n    const futurePredictions = [];\n    let totalEffectiveTurni = 0;\n    let totalPredictedTurni = 0;\n\n    // Calcolo dei turni effettivi e previsti per l'anno corrente\n    for (let i = 0; i < 12; i++) {\n      const monthData = allYearsData[year][i];\n      if (i < month - 1) {\n        // Turni effettivi per i mesi passati\n        totalEffectiveTurni += monthData ? monthData.totaleTurni : 0;\n      } else {\n        // Previsione per i mesi rimanenti\n        let totalTurni = 0;\n        let yearsCount = 0;\n        availableYears.forEach(y => {\n          if (y !== 2020 && y !== year) {\n            const yearData = allYearsData[y];\n            if (yearData && yearData[i] && yearData[i].totaleTurni > 0) {\n              totalTurni += yearData[i].totaleTurni;\n              yearsCount++;\n            }\n          }\n        });\n        if (yearsCount > 0) {\n          const averageTurni = Math.round(totalTurni / yearsCount);\n          totalPredictedTurni += averageTurni;\n          futurePredictions.push(`• ${getMonthName(i + 1)}: ${formatNumber(averageTurni)} turni`);\n        }\n      }\n    }\n\n    // Calcolo del totale complessivo\n    const totalComplessivo = totalEffectiveTurni + totalPredictedTurni;\n\n    // Creazione della classifica di produttività\n    const productivityRanking = availableYears.map(y => {\n      if (y === year) {\n        return {\n          year: y,\n          totalTurni: totalComplessivo\n        };\n      } else {\n        const yearTotalTurni = Object.values(allYearsData[y]).reduce((sum, month) => sum + (month ? month.totaleTurni : 0), 0);\n        return {\n          year: y,\n          totalTurni: yearTotalTurni\n        };\n      }\n    }).sort((a, b) => b.totalTurni - a.totalTurni);\n\n    // Composizione dell'analisi\n    analysis += `Turni effettivi (fino a ${getMonthName(month - 1)}): ${formatNumber(totalEffectiveTurni)}\\n`;\n    analysis += `Turni previsti (da ${getMonthName(month)} a Dicembre): ${formatNumber(totalPredictedTurni)}\\n`;\n    analysis += `Totale complessivo stimato per l'anno ${year}: ${formatNumber(totalComplessivo)}\\n\\n`;\n    analysis += `Previsione per i mesi rimanenti (in base alla media degli anni precedenti):\\n${futurePredictions.join('\\n')}\\n\\n`;\n    analysis += `Classifica di produttività (totale turni per anno):\\n`;\n    productivityRanking.forEach((item, index) => {\n      analysis += `${index + 1}. ${item.year}: ${formatNumber(item.totalTurni)} turni`;\n      if (item.year === year) {\n        analysis += ` (proiezione)`;\n      }\n      analysis += '\\n';\n    });\n\n    // Aggiungi un commento sulla posizione dell'anno corrente nella classifica\n    const currentYearRank = productivityRanking.findIndex(item => item.year === year) + 1;\n    analysis += `\\nL'anno ${year} si posiziona attualmente al ${currentYearRank}° posto nella classifica di produttività.`;\n    if (currentYearRank === 1) {\n      analysis += ` Questo suggerisce un anno particolarmente produttivo, potenzialmente superando i risultati degli anni precedenti.`;\n    } else if (currentYearRank <= 3) {\n      analysis += ` Questa è una performance solida, indicando un anno di buona produttività.`;\n    } else {\n      analysis += ` C'è potenziale per migliorare la produttività nei mesi rimanenti per salire nella classifica.`;\n    }\n    return analysis;\n  }, [availableYears]);\n  const formatChartData = useCallback(() => {\n    const chartData = [];\n    const calculateAverageForMonth = month => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return Math.round(sum / relevantYears.length);\n    };\n    for (let month = 0; month < 12; month++) {\n      const monthData = {\n        month: getMonthName(month + 1)\n      };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth - 1) {\n            // Dati reali per i mesi passati\n            monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n            monthData[`${year}IsPrediction`] = false;\n          } else {\n            // Previsione per il mese corrente e i mesi futuri\n            monthData[year] = calculateAverageForMonth(month);\n            monthData[`${year}IsPrediction`] = true;\n          }\n        } else {\n          // Dati degli anni passati\n          monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  }, [allYearsData, availableYears, currentYear, currentMonth]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const yearsData = {};\n      for (const year of availableYears) {\n        yearsData[year] = await getYearlyData(year);\n      }\n      setAllYearsData(yearsData);\n      setYearAnalysis(generateYearAnalysis(currentYear, currentMonth, yearsData, yearsData));\n      setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n    };\n    fetchData();\n  }, [currentYear, currentMonth, availableYears, generateYearAnalysis, makePrediction]);\n  const chartData = useMemo(() => formatChartData(), [formatChartData]);\n  const handleShare = () => {\n    const shareText = `Performance Trend ${currentYear}\\n\\n${yearAnalysis}\\n\\n${prediction}`;\n    if (navigator.share) {\n      navigator.share({\n        title: 'Performance Trend',\n        text: shareText\n      }).catch(console.error);\n    } else {\n      // Fallback per browser che non supportano l'API Web Share\n      alert(\"La condivisione non è supportata su questo browser. Copia e incolla il testo seguente:\\n\\n\" + shareText);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(ViewContent, {\n      children: [/*#__PURE__*/_jsxDEV(ViewTitle, {\n        children: \"Performance Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Trend annuale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 15\n            }, this), availableYears.map((year, index) => {\n              const isCurrentYear = year === currentYear;\n              if (isCurrentYear) {\n                return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Line, {\n                    type: \"monotone\",\n                    dataKey: dataPoint => dataPoint[`${year}IsPrediction`] ? undefined : dataPoint[year],\n                    stroke: colorPalette[index],\n                    strokeWidth: 3,\n                    dot: false,\n                    connectNulls: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 412,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Line, {\n                    type: \"monotone\",\n                    dataKey: dataPoint => {\n                      if (dataPoint[`${year}IsPrediction`]) {\n                        return dataPoint[year];\n                      }\n                      // Restituisce il valore dell'ultimo mese reale per connettere le linee\n                      const lastRealMonth = chartData.findIndex(d => d[`${year}IsPrediction`]) - 1;\n                      return dataPoint === chartData[lastRealMonth] ? dataPoint[year] : undefined;\n                    },\n                    stroke: colorPalette[index],\n                    strokeWidth: 3,\n                    strokeDasharray: \"5 5\",\n                    dot: false,\n                    connectNulls: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 421,\n                    columnNumber: 23\n                  }, this)]\n                }, year, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(Line, {\n                  type: \"monotone\",\n                  dataKey: year.toString(),\n                  stroke: colorPalette[index],\n                  strokeWidth: 1,\n                  dot: false\n                }, year, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 441,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LegendContainer, {\n          children: availableYears.map((year, index) => /*#__PURE__*/_jsxDEV(LegendItem, {\n            children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n              color: colorPalette[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: year === currentYear ? `${year} (linea continua: dati reali, tratteggiata: previsione)` : year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 17\n            }, this)]\n          }, year, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Considerazioni sull'anno in corso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: yearAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Previsione per i prossimi mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: prediction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setView('main'),\n          children: \"Torna alla Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleShare,\n          children: [/*#__PURE__*/_jsxDEV(Share2, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this), \"Condividi\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 395,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceTrendView, \"fWv5KBO6NPzZ8sPzy8CeJcFPBrg=\");\n_c13 = PerformanceTrendView;\nexport default PerformanceTrendView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;\n$RefreshReg$(_c, \"ViewContainer\");\n$RefreshReg$(_c2, \"ViewContent\");\n$RefreshReg$(_c3, \"ViewTitle\");\n$RefreshReg$(_c4, \"ChartContainer\");\n$RefreshReg$(_c5, \"AnalysisSection\");\n$RefreshReg$(_c6, \"AnalysisTitle\");\n$RefreshReg$(_c7, \"AnalysisText\");\n$RefreshReg$(_c8, \"LegendContainer\");\n$RefreshReg$(_c9, \"LegendItem\");\n$RefreshReg$(_c10, \"LegendColor\");\n$RefreshReg$(_c11, \"ButtonContainer\");\n$RefreshReg$(_c12, \"Button\");\n$RefreshReg$(_c13, \"PerformanceTrendView\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","styled","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","Share2","getYearlyData","getCurrentYearAndMonth","getAvailableYears","jsxDEV","_jsxDEV","ViewContainer","div","_c","ViewContent","_c2","ViewTitle","h1","_c3","ChartContainer","_c4","AnalysisSection","_c5","AnalysisTitle","h2","_c6","AnalysisText","p","_c7","LegendContainer","_c8","LegendItem","_c9","LegendColor","props","color","_c10","ButtonContainer","_c11","Button","button","_c12","getMonthName","monthNumber","monthNames","formatNumber","num","Intl","NumberFormat","format","Math","round","generateColorPalette","numColors","hueStep","Array","from","length","_","i","PerformanceTrendView","setView","_s","allYearsData","setAllYearsData","yearAnalysis","setYearAnalysis","prediction","setPrediction","availableYears","map","y","parseInt","value","colorPalette","currentYear","currentMonth","generateYearAnalysis","year","yearData","month","yearToAnalyze","currentYearData","totalTurni","Object","values","slice","reduce","sum","monthData","totaleTurni","monthsWithData","filter","averageMonthlyTurni","previousYearsData","entries","data","yearTotal","avgPreviousYears","analysis","percentageDiff","abs","monthlyTurni","m","undefined","quarterlyData","quarterlyAverages","q","a","b","quarters","forEach","avg","index","percentDiff","allYearsTotals","sort","currentYearRank","findIndex","totalYears","percentileRank","makePrediction","futurePredictions","totalEffectiveTurni","totalPredictedTurni","yearsCount","averageTurni","push","totalComplessivo","productivityRanking","yearTotalTurni","join","item","formatChartData","chartData","calculateAverageForMonth","relevantYears","acc","fetchData","yearsData","handleShare","shareText","navigator","share","title","text","catch","console","error","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","isCurrentYear","Fragment","type","dataPoint","stroke","strokeWidth","dot","connectNulls","lastRealMonth","d","toString","onClick","size","_c13","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { Share2 } from 'lucide-react';\nimport { \n  getYearlyData, \n  getCurrentYearAndMonth,\n  getAvailableYears\n} from './data';\n\n// Styled components\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 24px;\n`;\n\nconst Button = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n  display: flex;\n  align-items: center;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n\n  svg {\n    margin-right: 8px;\n  }\n`;\n\n// Helper functions\nconst getMonthName = (monthNumber) => {\n  const monthNames = [\n    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n  ];\n  return monthNames[monthNumber - 1];\n};\n\nconst formatNumber = (num) => new Intl.NumberFormat('it-IT').format(Math.round(num));\n\nconst generateColorPalette = (numColors) => {\n  const hueStep = 360 / numColors;\n  return Array.from({ length: numColors }, (_, i) => \n    `hsl(${i * hueStep}, 70%, 50%)`\n  );\n};\n\nconst PerformanceTrendView = ({ setView }) => {\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearAnalysis, setYearAnalysis] = useState('');\n  const [prediction, setPrediction] = useState('');\n\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const { currentYear, currentMonth } = getCurrentYearAndMonth();\n\n  const generateYearAnalysis = useCallback((year, currentMonth, yearData, allYearsData) => {\n    const month = currentMonth > 1 ? currentMonth - 1 : 12;\n    const yearToAnalyze = month === 12 ? year - 1 : year;\n    const currentYearData = yearData[yearToAnalyze] || {};\n    \n    const totalTurni = Object.values(currentYearData)\n      .slice(0, month)\n      .reduce((sum, monthData) => sum + (monthData?.totaleTurni || 0), 0);\n    \n    const monthsWithData = Object.values(currentYearData)\n      .slice(0, month)\n      .filter(monthData => monthData && monthData.totaleTurni > 0).length;\n    \n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n  \n    // Calcolo delle statistiche per gli anni precedenti\n    const previousYearsData = Object.entries(allYearsData)\n      .filter(([y]) => parseInt(y) < yearToAnalyze)\n      .map(([year, data]) => {\n        const yearTotal = Object.values(data)\n          .slice(0, month)\n          .reduce((sum, monthData) => sum + (monthData?.totaleTurni || 0), 0);\n        return { year: parseInt(year), totalTurni: yearTotal };\n      });\n  \n    const avgPreviousYears = previousYearsData.reduce((sum, y) => sum + y.totalTurni, 0) / previousYearsData.length;\n    \n    let analysis = `Considerazioni sull'anno in corso ${yearToAnalyze} (fino a ${getMonthName(month)}):\\n\\n`;\n    analysis += `Nel periodo analizzato, sono stati effettuati un totale di ${formatNumber(totalTurni)} turni, `;\n    analysis += `con una media mensile di ${formatNumber(averageMonthlyTurni)} turni. `;\n    \n    const percentageDiff = ((totalTurni - avgPreviousYears) / avgPreviousYears) * 100;\n    analysis += `Questo rappresenta un ${percentageDiff > 0 ? 'aumento' : 'diminuzione'} del ${formatNumber(Math.abs(percentageDiff))}% `;\n    analysis += `rispetto alla media di tutti gli anni precedenti nello stesso periodo. `;\n\n    // Analisi stagionale\n    analysis += `\\n\\nAnalisi stagionale:\\n`;\n    const monthlyTurni = Object.values(currentYearData)\n      .slice(0, month)\n      .map(m => m ? m.totaleTurni : undefined);\n    const quarterlyData = [\n      monthlyTurni.slice(0, 3).filter(m => m !== undefined),\n      monthlyTurni.slice(3, 6).filter(m => m !== undefined),\n      monthlyTurni.slice(6, 9).filter(m => m !== undefined),\n      monthlyTurni.slice(9, 12).filter(m => m !== undefined)\n    ];\n\n    const quarterlyAverages = quarterlyData.map(q => q.length > 0 ? q.reduce((a, b) => a + b, 0) / q.length : null);\n    \n    const quarters = ['primo', 'secondo', 'terzo', 'quarto'];\n    quarterlyAverages.forEach((avg, index) => {\n      if (avg !== null) {\n        const percentDiff = ((avg - averageMonthlyTurni) / averageMonthlyTurni) * 100;\n        analysis += `Il ${quarters[index]} trimestre mostra una media di ${formatNumber(avg)} turni al mese, `;\n        analysis += `${percentDiff > 0 ? 'superiore' : 'inferiore'} del ${formatNumber(Math.abs(percentDiff))}% rispetto alla media annuale.\\n`;\n      }\n    });\n\n    // Conclusione finale\n    const allYearsTotals = Object.entries(allYearsData)\n    .map(([year, data]) => ({\n      year: parseInt(year),\n      totalTurni: Object.values(data)\n        .slice(0, month)\n        .reduce((sum, monthData) => sum + (monthData?.totaleTurni || 0), 0)\n    }))\n    .sort((a, b) => b.totalTurni - a.totalTurni);\n\n  const currentYearRank = allYearsTotals.findIndex(y => y.year === yearToAnalyze) + 1;\n  const totalYears = allYearsTotals.length;\n  const percentileRank = (currentYearRank / totalYears) * 100;\n\n  analysis += `\\nConclusione:\\n`;\n  analysis += `Con le informazioni attuali possiamo determinare che la produttività dell'anno in corso è `;\n  \n  if (percentageDiff > 0) {\n    analysis += `superiore alla media degli anni passati del ${formatNumber(Math.abs(percentageDiff))}%. `;\n    \n    if (currentYearRank === 1) {\n      analysis += `È attualmente il miglior anno di sempre in termini di produttività. `;\n    } else if (percentileRank <= 30) {\n      analysis += `Rientra tra i migliori anni di sempre (top 30%). `;\n    } else {\n      analysis += `Tuttavia, rispetto alla classifica generale, si posiziona al ${currentYearRank}° posto su ${totalYears}. `;\n    }\n  } else if (percentageDiff < 0) {\n    analysis += `inferiore alla media degli anni passati del ${formatNumber(Math.abs(percentageDiff))}%. `;\n    \n    if (currentYearRank === totalYears) {\n      analysis += `È attualmente l'anno con la produttività più bassa. `;\n    } else if (percentileRank >= 70) {\n      analysis += `Rientra tra gli anni meno produttivi (bottom 30%). `;\n    } else {\n      analysis += `Tuttavia, rispetto alla classifica generale, si posiziona al ${currentYearRank}° posto su ${totalYears}. `;\n    }\n  } else {\n    analysis += `in linea con la media degli anni passati. `;\n    analysis += `Si posiziona al ${currentYearRank}° posto su ${totalYears} nella classifica generale. `;\n  }\n\n  analysis += `Questo posizionamento tiene conto di tutti gli anni disponibili nei dati, `;\n  analysis += `mentre il confronto con la media considera solo il periodo analizzato fino ad ora (${getMonthName(month)}). `;\n  \n  if (month < 12) {\n    analysis += `C'è ancora tempo per migliorare la performance complessiva dell'anno.`;\n  }\n\n  return analysis;\n}, []);\n\n  const makePrediction = useCallback((year, month, allYearsData) => {\n    let analysis = '';\n    const futurePredictions = [];\n    let totalEffectiveTurni = 0;\n    let totalPredictedTurni = 0;\n  \n    // Calcolo dei turni effettivi e previsti per l'anno corrente\n    for (let i = 0; i < 12; i++) {\n      const monthData = allYearsData[year][i];\n      if (i < month - 1) {\n        // Turni effettivi per i mesi passati\n        totalEffectiveTurni += monthData ? monthData.totaleTurni : 0;\n      } else {\n        // Previsione per i mesi rimanenti\n        let totalTurni = 0;\n        let yearsCount = 0;\n        availableYears.forEach(y => {\n          if (y !== 2020 && y !== year) {\n            const yearData = allYearsData[y];\n            if (yearData && yearData[i] && yearData[i].totaleTurni > 0) {\n              totalTurni += yearData[i].totaleTurni;\n              yearsCount++;\n            }\n          }\n        });\n        if (yearsCount > 0) {\n          const averageTurni = Math.round(totalTurni / yearsCount);\n          totalPredictedTurni += averageTurni;\n          futurePredictions.push(`• ${getMonthName(i + 1)}: ${formatNumber(averageTurni)} turni`);\n        }\n      }\n    }\n  \n    // Calcolo del totale complessivo\n    const totalComplessivo = totalEffectiveTurni + totalPredictedTurni;\n  \n    // Creazione della classifica di produttività\n    const productivityRanking = availableYears\n      .map(y => {\n        if (y === year) {\n          return { year: y, totalTurni: totalComplessivo };\n        } else {\n          const yearTotalTurni = Object.values(allYearsData[y]).reduce((sum, month) => sum + (month ? month.totaleTurni : 0), 0);\n          return { year: y, totalTurni: yearTotalTurni };\n        }\n      })\n      .sort((a, b) => b.totalTurni - a.totalTurni);\n  \n    // Composizione dell'analisi\n    analysis += `Turni effettivi (fino a ${getMonthName(month - 1)}): ${formatNumber(totalEffectiveTurni)}\\n`;\n    analysis += `Turni previsti (da ${getMonthName(month)} a Dicembre): ${formatNumber(totalPredictedTurni)}\\n`;\n    analysis += `Totale complessivo stimato per l'anno ${year}: ${formatNumber(totalComplessivo)}\\n\\n`;\n  \n    analysis += `Previsione per i mesi rimanenti (in base alla media degli anni precedenti):\\n${futurePredictions.join('\\n')}\\n\\n`;\n  \n    analysis += `Classifica di produttività (totale turni per anno):\\n`;\n    productivityRanking.forEach((item, index) => {\n      analysis += `${index + 1}. ${item.year}: ${formatNumber(item.totalTurni)} turni`;\n      if (item.year === year) {\n        analysis += ` (proiezione)`;\n      }\n      analysis += '\\n';\n    });\n  \n    // Aggiungi un commento sulla posizione dell'anno corrente nella classifica\n    const currentYearRank = productivityRanking.findIndex(item => item.year === year) + 1;\n    analysis += `\\nL'anno ${year} si posiziona attualmente al ${currentYearRank}° posto nella classifica di produttività.`;\n    \n    if (currentYearRank === 1) {\n      analysis += ` Questo suggerisce un anno particolarmente produttivo, potenzialmente superando i risultati degli anni precedenti.`;\n    } else if (currentYearRank <= 3) {\n      analysis += ` Questa è una performance solida, indicando un anno di buona produttività.`;\n    } else {\n      analysis += ` C'è potenziale per migliorare la produttività nei mesi rimanenti per salire nella classifica.`;\n    }\n  \n    return analysis;\n  }, [availableYears]);\n\n  const formatChartData = useCallback(() => {\n    const chartData = [];\n    \n    const calculateAverageForMonth = (month) => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return Math.round(sum / relevantYears.length);\n    };\n  \n    for (let month = 0; month < 12; month++) {\n      const monthData = { month: getMonthName(month + 1) };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth - 1) {\n            // Dati reali per i mesi passati\n            monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n            monthData[`${year}IsPrediction`] = false;\n          } else {\n            // Previsione per il mese corrente e i mesi futuri\n            monthData[year] = calculateAverageForMonth(month);\n            monthData[`${year}IsPrediction`] = true;\n          }\n        } else {\n          // Dati degli anni passati\n          monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  }, [allYearsData, availableYears, currentYear, currentMonth]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const yearsData = {};\n      for (const year of availableYears) {\n        yearsData[year] = await getYearlyData(year);\n      }\n      setAllYearsData(yearsData);\n\n      setYearAnalysis(generateYearAnalysis(currentYear, currentMonth, yearsData, yearsData));\n      setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n    };\n\n    fetchData();\n  }, [currentYear, currentMonth, availableYears, generateYearAnalysis, makePrediction]);\n\n  const chartData = useMemo(() => formatChartData(), [formatChartData]);\n\n  const handleShare = () => {\n    const shareText = `Performance Trend ${currentYear}\\n\\n${yearAnalysis}\\n\\n${prediction}`;\n    if (navigator.share) {\n      navigator.share({\n        title: 'Performance Trend',\n        text: shareText,\n      }).catch(console.error);\n    } else {\n      // Fallback per browser che non supportano l'API Web Share\n      alert(\"La condivisione non è supportata su questo browser. Copia e incolla il testo seguente:\\n\\n\" + shareText);\n    }\n  };\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <ViewTitle>Performance Trend</ViewTitle>\n        <ChartContainer>\n          <AnalysisTitle>Trend annuale</AnalysisTitle>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip />\n              {availableYears.map((year, index) => {\n                const isCurrentYear = year === currentYear;\n                if (isCurrentYear) {\n                  return (\n                    <React.Fragment key={year}>\n                      {/* Linea per i dati reali dell'anno corrente */}\n                      <Line\n                        type=\"monotone\"\n                        dataKey={(dataPoint) => dataPoint[`${year}IsPrediction`] ? undefined : dataPoint[year]}\n                        stroke={colorPalette[index]}\n                        strokeWidth={3}\n                        dot={false}\n                        connectNulls={true}\n                      />\n                      {/* Linea tratteggiata per i dati previsionali dell'anno corrente */}\n                      <Line\n                        type=\"monotone\"\n                        dataKey={(dataPoint) => {\n                          if (dataPoint[`${year}IsPrediction`]) {\n                            return dataPoint[year];\n                          }\n                          // Restituisce il valore dell'ultimo mese reale per connettere le linee\n                          const lastRealMonth = chartData.findIndex(d => d[`${year}IsPrediction`]) - 1;\n                          return dataPoint === chartData[lastRealMonth] ? dataPoint[year] : undefined;\n                        }}\n                        stroke={colorPalette[index]}\n                        strokeWidth={3}\n                        strokeDasharray=\"5 5\"\n                        dot={false}\n                        connectNulls={true}\n                      />\n                    </React.Fragment>\n                  );\n                } else {\n                  return (\n                    <Line\n                      key={year}\n                      type=\"monotone\"\n                      dataKey={year.toString()}\n                      stroke={colorPalette[index]}\n                      strokeWidth={1}\n                      dot={false}\n                    />\n                  );\n                }\n              })}\n            </LineChart>\n          </ResponsiveContainer>\n          <LegendContainer>\n            {availableYears.map((year, index) => (\n              <LegendItem key={year}>\n                <LegendColor color={colorPalette[index]} />\n                <span>{year === currentYear ? `${year} (linea continua: dati reali, tratteggiata: previsione)` : year}</span>\n              </LegendItem>\n            ))}\n          </LegendContainer>\n        </ChartContainer>\n        <AnalysisSection>\n          <AnalysisTitle>Considerazioni sull'anno in corso</AnalysisTitle>\n          <AnalysisText>{yearAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Previsione per i prossimi mesi</AnalysisTitle>\n          <AnalysisText>{prediction}</AnalysisText>\n        </AnalysisSection>\n        <ButtonContainer>\n          <Button onClick={() => setView('main')}>Torna alla Dashboard</Button>\n          <Button onClick={handleShare}>\n            <Share2 size={20} />\n            Condividi\n          </Button>\n        </ButtonContainer>\n      </ViewContent>\n    </ViewContainer>\n  );\n};\n\nexport default PerformanceTrendView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}