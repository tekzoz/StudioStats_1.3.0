{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { getYearlyData, getCurrentYearAndMonth, getAvailableYears } from './data';\n\n// Styled components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n_c = ViewContainer;\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c2 = ViewContent;\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n_c3 = ViewTitle;\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c4 = ChartContainer;\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c5 = AnalysisSection;\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n_c6 = AnalysisTitle;\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n_c7 = AnalysisText;\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n_c8 = LegendContainer;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n_c9 = LegendItem;\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n_c10 = LegendColor;\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\n_c11 = BackButton;\nconst getMonthName = monthNumber => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber - 1];\n};\nconst formatNumber = num => new Intl.NumberFormat('it-IT').format(Math.round(num));\nconst generateColorPalette = numColors => {\n  const hueStep = 360 / numColors;\n  return Array.from({\n    length: numColors\n  }, (_, i) => `hsl(${i * hueStep}, 70%, 50%)`);\n};\nconst PerformanceTrendView = ({\n  setView\n}) => {\n  _s();\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearConclusions, setYearConclusions] = useState('');\n  const [prediction, setPrediction] = useState('');\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const {\n    currentYear,\n    currentMonth\n  } = getCurrentYearAndMonth();\n  const generateYearConclusions = useCallback((year, currentMonth, yearData, allYearsData) => {\n    const month = currentMonth > 1 ? currentMonth - 1 : 12;\n    const yearToAnalyze = month === 12 ? year - 1 : year;\n    const currentYearData = yearData[yearToAnalyze] || {};\n    const totalTurni = Object.values(currentYearData).slice(0, month).reduce((sum, monthData) => sum + (monthData.totaleTurni || 0), 0);\n    const monthsWithData = Object.values(currentYearData).slice(0, month).filter(monthData => monthData && monthData.totaleTurni > 0).length;\n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n\n    // Calcolo delle statistiche per gli anni precedenti\n    const previousYearsData = Object.entries(allYearsData).filter(([y]) => parseInt(y) < yearToAnalyze).map(([year, data]) => {\n      const yearTotal = Object.values(data).slice(0, month).reduce((sum, monthData) => sum + (monthData.totaleTurni || 0), 0);\n      return {\n        year: parseInt(year),\n        totalTurni: yearTotal\n      };\n    });\n    const avgPreviousYears = previousYearsData.reduce((sum, y) => sum + y.totalTurni, 0) / previousYearsData.length;\n\n    // Analisi del trend\n    const trend = monthsWithData >= 3 ? currentYearData[month - 1].totaleTurni > currentYearData[month - 3].totaleTurni ? \"crescente\" : currentYearData[month - 1].totaleTurni < currentYearData[month - 3].totaleTurni ? \"decrescente\" : \"stabile\" : \"non determinabile\";\n\n    // Composizione dell'analisi\n    let analysis = `Analisi dettagliata dell'anno ${yearToAnalyze} (fino a ${getMonthName(month)}):\\n\\n`;\n    analysis += `Nel periodo analizzato, sono stati effettuati un totale di ${formatNumber(totalTurni)} turni, `;\n    analysis += `con una media mensile di ${formatNumber(averageMonthlyTurni)} turni. `;\n    if (totalTurni > avgPreviousYears) {\n      analysis += `Questo rappresenta un aumento del ${formatNumber((totalTurni / avgPreviousYears - 1) * 100)}% `;\n      analysis += `rispetto alla media degli anni precedenti nello stesso periodo. `;\n    } else if (totalTurni < avgPreviousYears) {\n      analysis += `Questo rappresenta una diminuzione del ${formatNumber((avgPreviousYears / totalTurni - 1) * 100)}% `;\n      analysis += `rispetto alla media degli anni precedenti nello stesso periodo. `;\n    } else {\n      analysis += `Questo è in linea con la media degli anni precedenti nello stesso periodo. `;\n    }\n    analysis += `\\n\\nIl trend degli ultimi tre mesi è ${trend}. `;\n    if (trend === \"crescente\") {\n      analysis += `Questo potrebbe indicare un aumento della domanda o un'espansione delle attività dello studio. `;\n    } else if (trend === \"decrescente\") {\n      analysis += `Questo potrebbe suggerire una riduzione della domanda o possibili sfide operative. `;\n    }\n    analysis += `\\n\\nConfrontando con gli anni precedenti:\\n`;\n    previousYearsData.forEach(({\n      year,\n      totalTurni: prevYearTotal\n    }) => {\n      const diff = totalTurni - prevYearTotal;\n      const percentDiff = diff / prevYearTotal * 100;\n      analysis += `- ${year}: ${diff > 0 ? 'aumento' : 'diminuzione'} del ${formatNumber(Math.abs(percentDiff))}%\\n`;\n    });\n    analysis += `\\nQuesti dati suggeriscono che `;\n    if (totalTurni > avgPreviousYears) {\n      analysis += `l'anno ${yearToAnalyze} sta mostrando una performance superiore alla media storica. `;\n      analysis += `Potrebbe essere opportuno valutare se le risorse attuali sono sufficienti per gestire questo aumento di attività. `;\n    } else if (totalTurni < avgPreviousYears) {\n      analysis += `l'anno ${yearToAnalyze} sta mostrando una performance inferiore alla media storica. `;\n      analysis += `Potrebbe essere utile analizzare le cause di questa diminuzione e considerare strategie per stimolare la domanda. `;\n    } else {\n      analysis += `l'anno ${yearToAnalyze} sta mantenendo una performance in linea con la media storica. `;\n      analysis += `Questo suggerisce una stabilità nelle operazioni dello studio. `;\n    }\n    analysis += `\\n\\nRaccomandazioni:\n    1. Monitorare attentamente il trend nei prossimi mesi per adattare le risorse in modo proattivo.\n    2. Considerare un'analisi più approfondita dei fattori che influenzano la domanda di turni.\n    3. Valutare l'efficienza operativa e considerare eventuali ottimizzazioni dei processi.`;\n    return analysis;\n  }, []);\n  const makePrediction = useCallback((year, month, allYearsData) => {\n    let analysis = '';\n    const futurePredictions = [];\n    let totalEffectiveTurni = 0;\n    let totalPredictedTurni = 0;\n\n    // Calcolo dei turni effettivi e previsti per l'anno corrente\n    for (let i = 0; i < 12; i++) {\n      const monthData = allYearsData[year][i];\n      if (i < month - 1) {\n        // Turni effettivi per i mesi passati\n        totalEffectiveTurni += monthData ? monthData.totaleTurni : 0;\n      } else {\n        // Previsione per i mesi rimanenti\n        let totalTurni = 0;\n        let yearsCount = 0;\n        availableYears.forEach(y => {\n          if (y !== 2020 && y !== year) {\n            const yearData = allYearsData[y];\n            if (yearData && yearData[i] && yearData[i].totaleTurni > 0) {\n              totalTurni += yearData[i].totaleTurni;\n              yearsCount++;\n            }\n          }\n        });\n        if (yearsCount > 0) {\n          const averageTurni = Math.round(totalTurni / yearsCount);\n          totalPredictedTurni += averageTurni;\n          futurePredictions.push(`• ${getMonthName(i + 1)}: ${formatNumber(averageTurni)} turni`);\n        }\n      }\n    }\n\n    // Calcolo del totale complessivo\n    const totalComplessivo = totalEffectiveTurni + totalPredictedTurni;\n\n    // Creazione della classifica di produttività\n    const productivityRanking = availableYears.map(y => {\n      if (y === year) {\n        return {\n          year: y,\n          totalTurni: totalComplessivo\n        };\n      } else {\n        const yearTotalTurni = Object.values(allYearsData[y]).reduce((sum, month) => sum + (month ? month.totaleTurni : 0), 0);\n        return {\n          year: y,\n          totalTurni: yearTotalTurni\n        };\n      }\n    }).sort((a, b) => b.totalTurni - a.totalTurni);\n\n    // Composizione dell'analisi\n    analysis += `Turni effettivi (fino a ${getMonthName(month - 1)}): ${formatNumber(totalEffectiveTurni)}\\n`;\n    analysis += `Turni previsti (da ${getMonthName(month)} a Dicembre): ${formatNumber(totalPredictedTurni)}\\n`;\n    analysis += `Totale complessivo stimato per l'anno ${year}: ${formatNumber(totalComplessivo)}\\n\\n`;\n    analysis += `Previsione per i mesi rimanenti (in base alla media degli anni precedenti):\\n${futurePredictions.join('\\n')}\\n\\n`;\n    analysis += `Classifica di produttività (totale turni per anno):\\n`;\n    productivityRanking.forEach((item, index) => {\n      analysis += `${index + 1}. ${item.year}: ${formatNumber(item.totalTurni)} turni`;\n      if (item.year === year) {\n        analysis += ` (proiezione)`;\n      }\n      analysis += '\\n';\n    });\n\n    // Aggiungi un commento sulla posizione dell'anno corrente nella classifica\n    const currentYearRank = productivityRanking.findIndex(item => item.year === year) + 1;\n    analysis += `\\nL'anno ${year} si posiziona attualmente al ${currentYearRank}° posto nella classifica di produttività.`;\n    if (currentYearRank === 1) {\n      analysis += ` Questo suggerisce un anno particolarmente produttivo, potenzialmente superando i risultati degli anni precedenti.`;\n    } else if (currentYearRank <= 3) {\n      analysis += ` Questa è una performance solida, indicando un anno di buona produttività.`;\n    } else {\n      analysis += ` C'è potenziale per migliorare la produttività nei mesi rimanenti per salire nella classifica.`;\n    }\n    return analysis;\n  }, [availableYears]);\n  const formatChartData = useCallback(() => {\n    const chartData = [];\n    const calculateAverageForMonth = month => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return Math.round(sum / relevantYears.length);\n    };\n    for (let month = 0; month < 12; month++) {\n      const monthData = {\n        month: getMonthName(month + 1)\n      };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth - 1) {\n            // Dati reali per i mesi passati\n            monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n            monthData[`${year}IsPrediction`] = false;\n          } else {\n            // Previsione per il mese corrente e i mesi futuri\n            monthData[year] = calculateAverageForMonth(month);\n            monthData[`${year}IsPrediction`] = true;\n          }\n        } else {\n          // Dati degli anni passati\n          monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  }, [allYearsData, availableYears, currentYear, currentMonth]);\n  const analyzeTrend = monthData => {\n    const trendWindow = 6; // Analizziamo gli ultimi 6 mesi\n    const recentMonths = monthData.slice(-trendWindow).filter(m => m !== undefined);\n    if (recentMonths.length < 3) return \"non determinabile (dati insufficienti)\";\n    const slopes = [];\n    for (let i = 1; i < recentMonths.length; i++) {\n      slopes.push(recentMonths[i] - recentMonths[i - 1]);\n    }\n    const averageSlope = slopes.reduce((a, b) => a + b, 0) / slopes.length;\n    const slopeVariability = Math.sqrt(slopes.map(s => Math.pow(s - averageSlope, 2)).reduce((a, b) => a + b, 0) / slopes.length);\n    if (Math.abs(averageSlope) < slopeVariability) {\n      return \"stabile\";\n    } else if (averageSlope > 0) {\n      return averageSlope > 2 * slopeVariability ? \"fortemente crescente\" : \"leggermente crescente\";\n    } else {\n      return averageSlope < -2 * slopeVariability ? \"fortemente decrescente\" : \"leggermente decrescente\";\n    }\n  };\n  const monthlyTurni = Object.values(currentYearData).slice(0, month).map(m => m ? m.totaleTurni : undefined);\n  const trend = analyzeTrend(monthlyTurni);\n\n  // Calcolo della volatilità\n  const calculateVolatility = data => {\n    const validData = data.filter(d => d !== undefined);\n    const mean = validData.reduce((a, b) => a + b, 0) / validData.length;\n    const squaredDiffs = validData.map(d => Math.pow(d - mean, 2));\n    return Math.sqrt(squaredDiffs.reduce((a, b) => a + b, 0) / validData.length);\n  };\n  const volatility = calculateVolatility(monthlyTurni);\n  const volatilityPercentage = volatility / averageMonthlyTurni * 100;\n\n  // Composizione dell'analisi del trend\n  let trendAnalysis = `\\n\\nAnalisi approfondita del trend:\\n`;\n  trendAnalysis += `Il trend degli ultimi ${Math.min(6, monthsWithData)} mesi è ${trend}. `;\n  switch (trend) {\n    case \"fortemente crescente\":\n      trendAnalysis += `Questo indica un significativo aumento dell'attività, che potrebbe richiedere un'espansione delle risorse o un'ottimizzazione dei processi per gestire la crescente domanda. `;\n      break;\n    case \"leggermente crescente\":\n      trendAnalysis += `C'è un leggero aumento dell'attività, che potrebbe indicare una graduale espansione del business o un miglioramento delle condizioni di mercato. `;\n      break;\n    case \"stabile\":\n      trendAnalysis += `L'attività mostra una notevole stabilità, suggerendo una domanda costante e potenzialmente prevedibile. `;\n      break;\n    case \"leggermente decrescente\":\n      trendAnalysis += `Si osserva una leggera diminuzione dell'attività, che potrebbe richiedere un'analisi delle cause e possibili azioni correttive. `;\n      break;\n    case \"fortemente decrescente\":\n      trendAnalysis += `C'è una significativa diminuzione dell'attività, che richiede un'attenzione immediata e potenziali interventi strategici. `;\n      break;\n    default:\n      trendAnalysis += `Non è possibile determinare un trend chiaro con i dati disponibili. `;\n  }\n  trendAnalysis += `\\nLa volatilità mensile è di ${formatNumber(volatility)} turni, che rappresenta il ${formatNumber(volatilityPercentage)}% della media mensile. `;\n  if (volatilityPercentage > 30) {\n    trendAnalysis += `Questa alta volatilità suggerisce una significativa variabilità mese per mese, che potrebbe rendere più difficile la pianificazione delle risorse. `;\n  } else if (volatilityPercentage > 15) {\n    trendAnalysis += `Questa moderata volatilità indica alcune fluttuazioni mensili, ma generalmente gestibili con una pianificazione flessibile. `;\n  } else {\n    trendAnalysis += `Questa bassa volatilità suggerisce una relativa stabilità mese per mese, facilitando la pianificazione delle risorse. `;\n  }\n\n  // Analisi stagionale\n  const seasonalAnalysis = `\\n\\nAnalisi stagionale:\\n`;\n  const quarterlyData = [monthlyTurni.slice(0, 3).filter(m => m !== undefined), monthlyTurni.slice(3, 6).filter(m => m !== undefined), monthlyTurni.slice(6, 9).filter(m => m !== undefined), monthlyTurni.slice(9, 12).filter(m => m !== undefined)];\n  const quarterlyAverages = quarterlyData.map(q => q.length > 0 ? q.reduce((a, b) => a + b, 0) / q.length : null);\n  const quarters = ['primo', 'secondo', 'terzo', 'quarto'];\n  quarterlyAverages.forEach((avg, index) => {\n    if (avg !== null) {\n      const percentDiff = (avg - averageMonthlyTurni) / averageMonthlyTurni * 100;\n      seasonalAnalysis += `Il ${quarters[index]} trimestre mostra una media di ${formatNumber(avg)} turni al mese, `;\n      seasonalAnalysis += `${percentDiff > 0 ? 'superiore' : 'inferiore'} del ${formatNumber(Math.abs(percentDiff))}% rispetto alla media annuale.\\n`;\n    }\n  });\n\n  // Aggiunta dell'analisi del trend e stagionale al resto dell'analisi\n  analysis += trendAnalysis + seasonalAnalysis;\n  useEffect(() => {\n    const fetchData = async () => {\n      const yearsData = {};\n      for (const year of availableYears) {\n        yearsData[year] = await getYearlyData(year);\n      }\n      setAllYearsData(yearsData);\n      setYearConclusions(generateYearConclusions(currentYear, currentMonth, yearsData, yearsData));\n      setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n    };\n    fetchData();\n  }, [currentYear, currentMonth, availableYears, generateYearConclusions, makePrediction]);\n  const chartData = useMemo(() => formatChartData(), [formatChartData]);\n  return /*#__PURE__*/_jsxDEV(ViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(ViewContent, {\n      children: [/*#__PURE__*/_jsxDEV(ViewTitle, {\n        children: \"Performance Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Trend annuale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 5\n            }, this), availableYears.map((year, index) => {\n              const isCurrentYear = year === currentYear;\n              if (isCurrentYear) {\n                return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Line, {\n                    type: \"monotone\",\n                    dataKey: dataPoint => dataPoint[`${year}IsPrediction`] ? undefined : dataPoint[year],\n                    stroke: colorPalette[index],\n                    strokeWidth: 3,\n                    dot: false,\n                    connectNulls: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 457,\n                    columnNumber: 13\n                  }, this), /*#__PURE__*/_jsxDEV(Line, {\n                    type: \"monotone\",\n                    dataKey: dataPoint => {\n                      if (dataPoint[`${year}IsPrediction`]) {\n                        return dataPoint[year];\n                      }\n                      // Restituisce il valore dell'ultimo mese reale per connettere le linee\n                      const lastRealMonth = chartData.findIndex(d => d[`${year}IsPrediction`]) - 1;\n                      return dataPoint === chartData[lastRealMonth] ? dataPoint[year] : undefined;\n                    },\n                    stroke: colorPalette[index],\n                    strokeWidth: 3,\n                    strokeDasharray: \"5 5\",\n                    dot: false,\n                    connectNulls: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 466,\n                    columnNumber: 13\n                  }, this)]\n                }, year, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 11\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(Line, {\n                  type: \"monotone\",\n                  dataKey: year.toString(),\n                  stroke: colorPalette[index],\n                  strokeWidth: 1,\n                  dot: false\n                }, year, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 11\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 3\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LegendContainer, {\n          children: availableYears.map((year, index) => /*#__PURE__*/_jsxDEV(LegendItem, {\n            children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n              color: colorPalette[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: year === currentYear ? `${year} (linea continua: dati reali, tratteggiata: previsione)` : year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 17\n            }, this)]\n          }, year, true, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Conclusioni sull'anno in corso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: yearConclusions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Previsione per i prossimi mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: prediction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BackButton, {\n        onClick: () => setView('main'),\n        children: \"Torna alla Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 440,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceTrendView, \"ppp5rTxj7bqbzH8PDsrATEmgRQ4=\");\n_c12 = PerformanceTrendView;\nexport default PerformanceTrendView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"ViewContainer\");\n$RefreshReg$(_c2, \"ViewContent\");\n$RefreshReg$(_c3, \"ViewTitle\");\n$RefreshReg$(_c4, \"ChartContainer\");\n$RefreshReg$(_c5, \"AnalysisSection\");\n$RefreshReg$(_c6, \"AnalysisTitle\");\n$RefreshReg$(_c7, \"AnalysisText\");\n$RefreshReg$(_c8, \"LegendContainer\");\n$RefreshReg$(_c9, \"LegendItem\");\n$RefreshReg$(_c10, \"LegendColor\");\n$RefreshReg$(_c11, \"BackButton\");\n$RefreshReg$(_c12, \"PerformanceTrendView\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","styled","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","getYearlyData","getCurrentYearAndMonth","getAvailableYears","jsxDEV","_jsxDEV","ViewContainer","div","_c","ViewContent","_c2","ViewTitle","h1","_c3","ChartContainer","_c4","AnalysisSection","_c5","AnalysisTitle","h2","_c6","AnalysisText","p","_c7","LegendContainer","_c8","LegendItem","_c9","LegendColor","props","color","_c10","BackButton","button","_c11","getMonthName","monthNumber","monthNames","formatNumber","num","Intl","NumberFormat","format","Math","round","generateColorPalette","numColors","hueStep","Array","from","length","_","i","PerformanceTrendView","setView","_s","allYearsData","setAllYearsData","yearConclusions","setYearConclusions","prediction","setPrediction","availableYears","map","y","parseInt","value","colorPalette","currentYear","currentMonth","generateYearConclusions","year","yearData","month","yearToAnalyze","currentYearData","totalTurni","Object","values","slice","reduce","sum","monthData","totaleTurni","monthsWithData","filter","averageMonthlyTurni","previousYearsData","entries","data","yearTotal","avgPreviousYears","trend","analysis","forEach","prevYearTotal","diff","percentDiff","abs","makePrediction","futurePredictions","totalEffectiveTurni","totalPredictedTurni","yearsCount","averageTurni","push","totalComplessivo","productivityRanking","yearTotalTurni","sort","a","b","join","item","index","currentYearRank","findIndex","formatChartData","chartData","calculateAverageForMonth","relevantYears","acc","analyzeTrend","trendWindow","recentMonths","m","undefined","slopes","averageSlope","slopeVariability","sqrt","s","pow","monthlyTurni","calculateVolatility","validData","d","mean","squaredDiffs","volatility","volatilityPercentage","trendAnalysis","min","seasonalAnalysis","quarterlyData","quarterlyAverages","q","quarters","avg","fetchData","yearsData","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","isCurrentYear","Fragment","type","dataPoint","stroke","strokeWidth","dot","connectNulls","lastRealMonth","toString","onClick","_c12","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { \n  getYearlyData, \n  getCurrentYearAndMonth,\n  getAvailableYears\n} from './data';\n\n// Styled components\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\nconst getMonthName = (monthNumber) => {\n  const monthNames = [\n    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n  ];\n  return monthNames[monthNumber - 1];\n};\n\nconst formatNumber = (num) => new Intl.NumberFormat('it-IT').format(Math.round(num));\n\nconst generateColorPalette = (numColors) => {\n  const hueStep = 360 / numColors;\n  return Array.from({ length: numColors }, (_, i) => \n    `hsl(${i * hueStep}, 70%, 50%)`\n  );\n};\n\nconst PerformanceTrendView = ({ setView }) => {\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearConclusions, setYearConclusions] = useState('');\n  const [prediction, setPrediction] = useState('');\n\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const { currentYear, currentMonth } = getCurrentYearAndMonth();\n\n  const generateYearConclusions = useCallback((year, currentMonth, yearData, allYearsData) => {\n    const month = currentMonth > 1 ? currentMonth - 1 : 12;\n    const yearToAnalyze = month === 12 ? year - 1 : year;\n    const currentYearData = yearData[yearToAnalyze] || {};\n    \n    const totalTurni = Object.values(currentYearData)\n      .slice(0, month)\n      .reduce((sum, monthData) => sum + (monthData.totaleTurni || 0), 0);\n    \n    const monthsWithData = Object.values(currentYearData)\n      .slice(0, month)\n      .filter(monthData => monthData && monthData.totaleTurni > 0).length;\n    \n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n  \n    // Calcolo delle statistiche per gli anni precedenti\n    const previousYearsData = Object.entries(allYearsData)\n      .filter(([y]) => parseInt(y) < yearToAnalyze)\n      .map(([year, data]) => {\n        const yearTotal = Object.values(data)\n          .slice(0, month)\n          .reduce((sum, monthData) => sum + (monthData.totaleTurni || 0), 0);\n        return { year: parseInt(year), totalTurni: yearTotal };\n      });\n  \n    const avgPreviousYears = previousYearsData.reduce((sum, y) => sum + y.totalTurni, 0) / previousYearsData.length;\n    \n    // Analisi del trend\n    const trend = monthsWithData >= 3 ? \n      (currentYearData[month - 1].totaleTurni > currentYearData[month - 3].totaleTurni ? \"crescente\" : \n       currentYearData[month - 1].totaleTurni < currentYearData[month - 3].totaleTurni ? \"decrescente\" : \"stabile\") :\n      \"non determinabile\";\n  \n    // Composizione dell'analisi\n    let analysis = `Analisi dettagliata dell'anno ${yearToAnalyze} (fino a ${getMonthName(month)}):\\n\\n`;\n    \n    analysis += `Nel periodo analizzato, sono stati effettuati un totale di ${formatNumber(totalTurni)} turni, `;\n    analysis += `con una media mensile di ${formatNumber(averageMonthlyTurni)} turni. `;\n    \n    if (totalTurni > avgPreviousYears) {\n      analysis += `Questo rappresenta un aumento del ${formatNumber(((totalTurni / avgPreviousYears) - 1) * 100)}% `;\n      analysis += `rispetto alla media degli anni precedenti nello stesso periodo. `;\n    } else if (totalTurni < avgPreviousYears) {\n      analysis += `Questo rappresenta una diminuzione del ${formatNumber(((avgPreviousYears / totalTurni) - 1) * 100)}% `;\n      analysis += `rispetto alla media degli anni precedenti nello stesso periodo. `;\n    } else {\n      analysis += `Questo è in linea con la media degli anni precedenti nello stesso periodo. `;\n    }\n  \n    analysis += `\\n\\nIl trend degli ultimi tre mesi è ${trend}. `;\n  \n    if (trend === \"crescente\") {\n      analysis += `Questo potrebbe indicare un aumento della domanda o un'espansione delle attività dello studio. `;\n    } else if (trend === \"decrescente\") {\n      analysis += `Questo potrebbe suggerire una riduzione della domanda o possibili sfide operative. `;\n    }\n  \n    analysis += `\\n\\nConfrontando con gli anni precedenti:\\n`;\n    previousYearsData.forEach(({ year, totalTurni: prevYearTotal }) => {\n      const diff = totalTurni - prevYearTotal;\n      const percentDiff = (diff / prevYearTotal) * 100;\n      analysis += `- ${year}: ${diff > 0 ? 'aumento' : 'diminuzione'} del ${formatNumber(Math.abs(percentDiff))}%\\n`;\n    });\n  \n    analysis += `\\nQuesti dati suggeriscono che `;\n    if (totalTurni > avgPreviousYears) {\n      analysis += `l'anno ${yearToAnalyze} sta mostrando una performance superiore alla media storica. `;\n      analysis += `Potrebbe essere opportuno valutare se le risorse attuali sono sufficienti per gestire questo aumento di attività. `;\n    } else if (totalTurni < avgPreviousYears) {\n      analysis += `l'anno ${yearToAnalyze} sta mostrando una performance inferiore alla media storica. `;\n      analysis += `Potrebbe essere utile analizzare le cause di questa diminuzione e considerare strategie per stimolare la domanda. `;\n    } else {\n      analysis += `l'anno ${yearToAnalyze} sta mantenendo una performance in linea con la media storica. `;\n      analysis += `Questo suggerisce una stabilità nelle operazioni dello studio. `;\n    }\n  \n    analysis += `\\n\\nRaccomandazioni:\n    1. Monitorare attentamente il trend nei prossimi mesi per adattare le risorse in modo proattivo.\n    2. Considerare un'analisi più approfondita dei fattori che influenzano la domanda di turni.\n    3. Valutare l'efficienza operativa e considerare eventuali ottimizzazioni dei processi.`;\n  \n    return analysis;\n  }, []);\n\n  const makePrediction = useCallback((year, month, allYearsData) => {\n    let analysis = '';\n    const futurePredictions = [];\n    let totalEffectiveTurni = 0;\n    let totalPredictedTurni = 0;\n  \n    // Calcolo dei turni effettivi e previsti per l'anno corrente\n    for (let i = 0; i < 12; i++) {\n      const monthData = allYearsData[year][i];\n      if (i < month - 1) {\n        // Turni effettivi per i mesi passati\n        totalEffectiveTurni += monthData ? monthData.totaleTurni : 0;\n      } else {\n        // Previsione per i mesi rimanenti\n        let totalTurni = 0;\n        let yearsCount = 0;\n        availableYears.forEach(y => {\n          if (y !== 2020 && y !== year) {\n            const yearData = allYearsData[y];\n            if (yearData && yearData[i] && yearData[i].totaleTurni > 0) {\n              totalTurni += yearData[i].totaleTurni;\n              yearsCount++;\n            }\n          }\n        });\n        if (yearsCount > 0) {\n          const averageTurni = Math.round(totalTurni / yearsCount);\n          totalPredictedTurni += averageTurni;\n          futurePredictions.push(`• ${getMonthName(i + 1)}: ${formatNumber(averageTurni)} turni`);\n        }\n      }\n    }\n  \n    // Calcolo del totale complessivo\n    const totalComplessivo = totalEffectiveTurni + totalPredictedTurni;\n  \n    // Creazione della classifica di produttività\n    const productivityRanking = availableYears\n      .map(y => {\n        if (y === year) {\n          return { year: y, totalTurni: totalComplessivo };\n        } else {\n          const yearTotalTurni = Object.values(allYearsData[y]).reduce((sum, month) => sum + (month ? month.totaleTurni : 0), 0);\n          return { year: y, totalTurni: yearTotalTurni };\n        }\n      })\n      .sort((a, b) => b.totalTurni - a.totalTurni);\n  \n    // Composizione dell'analisi\n    analysis += `Turni effettivi (fino a ${getMonthName(month - 1)}): ${formatNumber(totalEffectiveTurni)}\\n`;\n    analysis += `Turni previsti (da ${getMonthName(month)} a Dicembre): ${formatNumber(totalPredictedTurni)}\\n`;\n    analysis += `Totale complessivo stimato per l'anno ${year}: ${formatNumber(totalComplessivo)}\\n\\n`;\n  \n    analysis += `Previsione per i mesi rimanenti (in base alla media degli anni precedenti):\\n${futurePredictions.join('\\n')}\\n\\n`;\n  \n    analysis += `Classifica di produttività (totale turni per anno):\\n`;\n    productivityRanking.forEach((item, index) => {\n      analysis += `${index + 1}. ${item.year}: ${formatNumber(item.totalTurni)} turni`;\n      if (item.year === year) {\n        analysis += ` (proiezione)`;\n      }\n      analysis += '\\n';\n    });\n  \n    // Aggiungi un commento sulla posizione dell'anno corrente nella classifica\n    const currentYearRank = productivityRanking.findIndex(item => item.year === year) + 1;\n    analysis += `\\nL'anno ${year} si posiziona attualmente al ${currentYearRank}° posto nella classifica di produttività.`;\n    \n    if (currentYearRank === 1) {\n      analysis += ` Questo suggerisce un anno particolarmente produttivo, potenzialmente superando i risultati degli anni precedenti.`;\n    } else if (currentYearRank <= 3) {\n      analysis += ` Questa è una performance solida, indicando un anno di buona produttività.`;\n    } else {\n      analysis += ` C'è potenziale per migliorare la produttività nei mesi rimanenti per salire nella classifica.`;\n    }\n  \n    return analysis;\n  }, [availableYears]);\n\n  const formatChartData = useCallback(() => {\n    const chartData = [];\n    \n    const calculateAverageForMonth = (month) => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return Math.round(sum / relevantYears.length);\n    };\n  \n    for (let month = 0; month < 12; month++) {\n      const monthData = { month: getMonthName(month + 1) };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth - 1) {\n            // Dati reali per i mesi passati\n            monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n            monthData[`${year}IsPrediction`] = false;\n          } else {\n            // Previsione per il mese corrente e i mesi futuri\n            monthData[year] = calculateAverageForMonth(month);\n            monthData[`${year}IsPrediction`] = true;\n          }\n        } else {\n          // Dati degli anni passati\n          monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  }, [allYearsData, availableYears, currentYear, currentMonth]);\n\n  const analyzeTrend = (monthData) => {\n    const trendWindow = 6; // Analizziamo gli ultimi 6 mesi\n    const recentMonths = monthData.slice(-trendWindow).filter(m => m !== undefined);\n    \n    if (recentMonths.length < 3) return \"non determinabile (dati insufficienti)\";\n\n    const slopes = [];\n    for (let i = 1; i < recentMonths.length; i++) {\n      slopes.push(recentMonths[i] - recentMonths[i-1]);\n    }\n\n    const averageSlope = slopes.reduce((a, b) => a + b, 0) / slopes.length;\n    const slopeVariability = Math.sqrt(slopes.map(s => Math.pow(s - averageSlope, 2)).reduce((a, b) => a + b, 0) / slopes.length);\n\n    if (Math.abs(averageSlope) < slopeVariability) {\n      return \"stabile\";\n    } else if (averageSlope > 0) {\n      return averageSlope > 2 * slopeVariability ? \"fortemente crescente\" : \"leggermente crescente\";\n    } else {\n      return averageSlope < -2 * slopeVariability ? \"fortemente decrescente\" : \"leggermente decrescente\";\n    }\n  };\n\n  const monthlyTurni = Object.values(currentYearData)\n    .slice(0, month)\n    .map(m => m ? m.totaleTurni : undefined);\n\n  const trend = analyzeTrend(monthlyTurni);\n\n  // Calcolo della volatilità\n  const calculateVolatility = (data) => {\n    const validData = data.filter(d => d !== undefined);\n    const mean = validData.reduce((a, b) => a + b, 0) / validData.length;\n    const squaredDiffs = validData.map(d => Math.pow(d - mean, 2));\n    return Math.sqrt(squaredDiffs.reduce((a, b) => a + b, 0) / validData.length);\n  };\n\n  const volatility = calculateVolatility(monthlyTurni);\n  const volatilityPercentage = (volatility / averageMonthlyTurni) * 100;\n\n  // Composizione dell'analisi del trend\n  let trendAnalysis = `\\n\\nAnalisi approfondita del trend:\\n`;\n  trendAnalysis += `Il trend degli ultimi ${Math.min(6, monthsWithData)} mesi è ${trend}. `;\n\n  switch (trend) {\n    case \"fortemente crescente\":\n      trendAnalysis += `Questo indica un significativo aumento dell'attività, che potrebbe richiedere un'espansione delle risorse o un'ottimizzazione dei processi per gestire la crescente domanda. `;\n      break;\n    case \"leggermente crescente\":\n      trendAnalysis += `C'è un leggero aumento dell'attività, che potrebbe indicare una graduale espansione del business o un miglioramento delle condizioni di mercato. `;\n      break;\n    case \"stabile\":\n      trendAnalysis += `L'attività mostra una notevole stabilità, suggerendo una domanda costante e potenzialmente prevedibile. `;\n      break;\n    case \"leggermente decrescente\":\n      trendAnalysis += `Si osserva una leggera diminuzione dell'attività, che potrebbe richiedere un'analisi delle cause e possibili azioni correttive. `;\n      break;\n    case \"fortemente decrescente\":\n      trendAnalysis += `C'è una significativa diminuzione dell'attività, che richiede un'attenzione immediata e potenziali interventi strategici. `;\n      break;\n    default:\n      trendAnalysis += `Non è possibile determinare un trend chiaro con i dati disponibili. `;\n  }\n\n  trendAnalysis += `\\nLa volatilità mensile è di ${formatNumber(volatility)} turni, che rappresenta il ${formatNumber(volatilityPercentage)}% della media mensile. `;\n  \n  if (volatilityPercentage > 30) {\n    trendAnalysis += `Questa alta volatilità suggerisce una significativa variabilità mese per mese, che potrebbe rendere più difficile la pianificazione delle risorse. `;\n  } else if (volatilityPercentage > 15) {\n    trendAnalysis += `Questa moderata volatilità indica alcune fluttuazioni mensili, ma generalmente gestibili con una pianificazione flessibile. `;\n  } else {\n    trendAnalysis += `Questa bassa volatilità suggerisce una relativa stabilità mese per mese, facilitando la pianificazione delle risorse. `;\n  }\n\n  // Analisi stagionale\n  const seasonalAnalysis = `\\n\\nAnalisi stagionale:\\n`;\n  const quarterlyData = [\n    monthlyTurni.slice(0, 3).filter(m => m !== undefined),\n    monthlyTurni.slice(3, 6).filter(m => m !== undefined),\n    monthlyTurni.slice(6, 9).filter(m => m !== undefined),\n    monthlyTurni.slice(9, 12).filter(m => m !== undefined)\n  ];\n\n  const quarterlyAverages = quarterlyData.map(q => q.length > 0 ? q.reduce((a, b) => a + b, 0) / q.length : null);\n  \n  const quarters = ['primo', 'secondo', 'terzo', 'quarto'];\n  quarterlyAverages.forEach((avg, index) => {\n    if (avg !== null) {\n      const percentDiff = ((avg - averageMonthlyTurni) / averageMonthlyTurni) * 100;\n      seasonalAnalysis += `Il ${quarters[index]} trimestre mostra una media di ${formatNumber(avg)} turni al mese, `;\n      seasonalAnalysis += `${percentDiff > 0 ? 'superiore' : 'inferiore'} del ${formatNumber(Math.abs(percentDiff))}% rispetto alla media annuale.\\n`;\n    }\n  });\n\n  // Aggiunta dell'analisi del trend e stagionale al resto dell'analisi\n  analysis += trendAnalysis + seasonalAnalysis;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const yearsData = {};\n      for (const year of availableYears) {\n        yearsData[year] = await getYearlyData(year);\n      }\n      setAllYearsData(yearsData);\n\n      setYearConclusions(generateYearConclusions(currentYear, currentMonth, yearsData, yearsData));\n      setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n    };\n\n    fetchData();\n  }, [currentYear, currentMonth, availableYears, generateYearConclusions, makePrediction]);\n\n  const chartData = useMemo(() => formatChartData(), [formatChartData]);\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <ViewTitle>Performance Trend</ViewTitle>\n        <ChartContainer>\n          <AnalysisTitle>Trend annuale</AnalysisTitle>\n          <ResponsiveContainer width=\"100%\" height={400}>\n  <LineChart data={chartData}>\n    <CartesianGrid strokeDasharray=\"3 3\" />\n    <XAxis dataKey=\"month\" />\n    <YAxis />\n    <Tooltip />\n    {availableYears.map((year, index) => {\n      const isCurrentYear = year === currentYear;\n      if (isCurrentYear) {\n        return (\n          <React.Fragment key={year}>\n            {/* Linea per i dati reali dell'anno corrente */}\n            <Line\n              type=\"monotone\"\n              dataKey={(dataPoint) => dataPoint[`${year}IsPrediction`] ? undefined : dataPoint[year]}\n              stroke={colorPalette[index]}\n              strokeWidth={3}\n              dot={false}\n              connectNulls={true}\n            />\n            {/* Linea tratteggiata per i dati previsionali dell'anno corrente */}\n            <Line\n              type=\"monotone\"\n              dataKey={(dataPoint) => {\n                if (dataPoint[`${year}IsPrediction`]) {\n                  return dataPoint[year];\n                }\n                // Restituisce il valore dell'ultimo mese reale per connettere le linee\n                const lastRealMonth = chartData.findIndex(d => d[`${year}IsPrediction`]) - 1;\n                return dataPoint === chartData[lastRealMonth] ? dataPoint[year] : undefined;\n              }}\n              stroke={colorPalette[index]}\n              strokeWidth={3}\n              strokeDasharray=\"5 5\"\n              dot={false}\n              connectNulls={true}\n            />\n          </React.Fragment>\n        );\n      } else {\n        return (\n          <Line\n            key={year}\n            type=\"monotone\"\n            dataKey={year.toString()}\n            stroke={colorPalette[index]}\n            strokeWidth={1}\n            dot={false}\n          />\n        );\n      }\n    })}\n  </LineChart>\n</ResponsiveContainer>\n          <LegendContainer>\n            {availableYears.map((year, index) => (\n              <LegendItem key={year}>\n                <LegendColor color={colorPalette[index]} />\n                <span>{year === currentYear ? `${year} (linea continua: dati reali, tratteggiata: previsione)` : year}</span>\n              </LegendItem>\n            ))}\n          </LegendContainer>\n        </ChartContainer>\n        <AnalysisSection>\n          <AnalysisTitle>Conclusioni sull'anno in corso</AnalysisTitle>\n          <AnalysisText>{yearConclusions}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Previsione per i prossimi mesi</AnalysisTitle>\n          <AnalysisText>{prediction}</AnalysisText>\n        </AnalysisSection>\n        <BackButton onClick={() => setView('main')}>Torna alla Dashboard</BackButton>\n      </ViewContent>\n    </ViewContainer>\n  );\n};\n\nexport default PerformanceTrendView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}