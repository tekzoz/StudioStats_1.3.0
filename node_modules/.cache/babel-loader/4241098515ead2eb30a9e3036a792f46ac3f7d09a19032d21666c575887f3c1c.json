{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { getMonthData, getAvailableMonths, getYearlyData, getCurrentYearAndMonth, getMonthName } from './data';\n\n// ... (stili precedenti rimangono invariati)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PerformanceTrendView = ({\n  setView\n}) => {\n  _s();\n  const [yearlyData, setYearlyData] = useState({});\n  const [lastMonthAnalysis, setLastMonthAnalysis] = useState('');\n  const [quadrimesterAnalysis, setQuadrimesterAnalysis] = useState('');\n  const [yearAnalysis, setYearAnalysis] = useState('');\n  const [prediction, setPrediction] = useState('');\n  useEffect(() => {\n    const {\n      currentYear,\n      currentMonth\n    } = getCurrentYearAndMonth();\n    const data = getYearlyData(currentYear);\n    setYearlyData(data);\n    setLastMonthAnalysis(analyzeLastMonth(currentYear, currentMonth));\n    setQuadrimesterAnalysis(analyzeQuadrimester(currentYear, currentMonth));\n    setYearAnalysis(analyzeYear(currentYear, currentMonth));\n    setPrediction(makePrediction(currentYear, currentMonth));\n  }, []);\n  const formatChartData = data => {\n    return Object.entries(data).map(([month, value]) => ({\n      month: getMonthName(parseInt(month) + 1),\n      turni: value.totaleTurni\n    }));\n  };\n  const analyzeLastMonth = (year, month) => {\n    const availableMonths = getAvailableMonths();\n    const lastAvailableMonth = availableMonths[0].value;\n    const [lastYear, lastMonth] = lastAvailableMonth.split('-').map(Number);\n    const lastMonthData = getMonthData(lastAvailableMonth);\n    if (!lastMonthData) return \"Dati non disponibili per l'ultimo mese.\";\n    const {\n      totaleTurni,\n      mediaGiornaliera,\n      massimoTurni,\n      minimoTurni\n    } = lastMonthData;\n    const monthName = getMonthName(lastMonth);\n    return `Nel mese di ${monthName} ${lastYear}, sono stati effettuati un totale di ${totaleTurni} turni, \n    con una media giornaliera di ${mediaGiornaliera.toFixed(2)} turni. \n    Il giorno più impegnativo è stato il ${massimoTurni.day} con ${massimoTurni.shifts} turni, \n    mentre il giorno con meno attività è stato il ${minimoTurni.day} con ${minimoTurni.shifts} turni.`;\n  };\n  const analyzeQuadrimester = (year, month) => {\n    const availableMonths = getAvailableMonths();\n    const lastFourMonths = availableMonths.slice(0, 4);\n    let totalTurni = 0;\n    let totalDays = 0;\n    const monthsAnalysis = lastFourMonths.map(monthObj => {\n      const monthData = getMonthData(monthObj.value);\n      if (monthData) {\n        totalTurni += monthData.totaleTurni;\n        totalDays += Object.keys(monthData.days).length;\n        return `${monthObj.label}: ${monthData.totaleTurni} turni`;\n      }\n      return `${monthObj.label}: Dati non disponibili`;\n    });\n    const averageTurni = totalTurni / totalDays;\n    return `Analisi degli ultimi 4 mesi:\\n${monthsAnalysis.join('\\n')}\\n\n    In totale, negli ultimi 4 mesi sono stati effettuati ${totalTurni} turni,\n    con una media giornaliera di ${averageTurni.toFixed(2)} turni.`;\n  };\n  const analyzeYear = (year, month) => {\n    const yearData = getYearlyData(year);\n    const totalTurni = Object.values(yearData).reduce((sum, month) => sum + month.totaleTurni, 0);\n    const monthsWithData = Object.values(yearData).filter(month => month.totaleTurni > 0).length;\n    const averageMonthlyTurni = totalTurni / monthsWithData;\n    const monthsComparison = Object.entries(yearData).map(([monthIndex, data]) => {\n      const monthName = getMonthName(parseInt(monthIndex) + 1);\n      const difference = data.totaleTurni - averageMonthlyTurni;\n      return `${monthName}: ${difference > 0 ? '+' : ''}${difference.toFixed(0)} rispetto alla media`;\n    }).filter((_, index) => index < month);\n    return `Nell'anno ${year}, fino ad ora, sono stati effettuati un totale di ${totalTurni} turni,\n    con una media mensile di ${averageMonthlyTurni.toFixed(2)} turni.\n    Ecco come si sono comportati i mesi rispetto alla media:\\n${monthsComparison.join('\\n')}`;\n  };\n  const makePrediction = (year, month) => {\n    const availableYears = getAvailableMonths().map(m => m.value.split('-')[0]).filter((v, i, arr) => arr.indexOf(v) === i);\n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = getYearlyData(parseInt(y));\n        if (yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`${getMonthName(i)}: ${averageTurni.toFixed(0)} turni`);\n      }\n    }\n    return `Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n    \\n${futurePredictions.join('\\n')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(ViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(ViewContent, {\n      children: [/*#__PURE__*/_jsxDEV(ViewTitle, {\n        children: \"Performance Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: formatChartData(yearlyData),\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"turni\",\n              stroke: \"#3B82F6\",\n              activeDot: {\n                r: 8\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Analisi dell'ultimo mese\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: lastMonthAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Considerazioni sugli ultimi 4 mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: quadrimesterAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Conclusioni sull'anno in corso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: yearAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Previsione per i prossimi mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: prediction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BackButton, {\n        onClick: () => setView('main'),\n        children: \"Torna alla Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceTrendView, \"jm9Ng60FHM17asRn9lUZeKJlwDs=\");\n_c = PerformanceTrendView;\nexport default PerformanceTrendView;\nvar _c;\n$RefreshReg$(_c, \"PerformanceTrendView\");","map":{"version":3,"names":["React","useState","useEffect","styled","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","getMonthData","getAvailableMonths","getYearlyData","getCurrentYearAndMonth","getMonthName","jsxDEV","_jsxDEV","PerformanceTrendView","setView","_s","yearlyData","setYearlyData","lastMonthAnalysis","setLastMonthAnalysis","quadrimesterAnalysis","setQuadrimesterAnalysis","yearAnalysis","setYearAnalysis","prediction","setPrediction","currentYear","currentMonth","data","analyzeLastMonth","analyzeQuadrimester","analyzeYear","makePrediction","formatChartData","Object","entries","map","month","value","parseInt","turni","totaleTurni","year","availableMonths","lastAvailableMonth","lastYear","lastMonth","split","Number","lastMonthData","mediaGiornaliera","massimoTurni","minimoTurni","monthName","toFixed","day","shifts","lastFourMonths","slice","totalTurni","totalDays","monthsAnalysis","monthObj","monthData","keys","days","length","label","averageTurni","join","yearData","values","reduce","sum","monthsWithData","filter","averageMonthlyTurni","monthsComparison","monthIndex","difference","_","index","availableYears","m","v","i","arr","indexOf","futurePredictions","yearsCount","forEach","y","push","ViewContainer","children","ViewContent","ViewTitle","fileName","_jsxFileName","lineNumber","columnNumber","ChartContainer","width","height","strokeDasharray","dataKey","type","stroke","activeDot","r","AnalysisSection","AnalysisTitle","AnalysisText","BackButton","onClick","_c","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { \n  getMonthData, \n  getAvailableMonths, \n  getYearlyData, \n  getCurrentYearAndMonth,\n  getMonthName\n} from './data';\n\n// ... (stili precedenti rimangono invariati)\n\nconst PerformanceTrendView = ({ setView }) => {\n  const [yearlyData, setYearlyData] = useState({});\n  const [lastMonthAnalysis, setLastMonthAnalysis] = useState('');\n  const [quadrimesterAnalysis, setQuadrimesterAnalysis] = useState('');\n  const [yearAnalysis, setYearAnalysis] = useState('');\n  const [prediction, setPrediction] = useState('');\n\n  useEffect(() => {\n    const { currentYear, currentMonth } = getCurrentYearAndMonth();\n    const data = getYearlyData(currentYear);\n    setYearlyData(data);\n\n    setLastMonthAnalysis(analyzeLastMonth(currentYear, currentMonth));\n    setQuadrimesterAnalysis(analyzeQuadrimester(currentYear, currentMonth));\n    setYearAnalysis(analyzeYear(currentYear, currentMonth));\n    setPrediction(makePrediction(currentYear, currentMonth));\n  }, []);\n\n  const formatChartData = (data) => {\n    return Object.entries(data).map(([month, value]) => ({\n      month: getMonthName(parseInt(month) + 1),\n      turni: value.totaleTurni\n    }));\n  };\n\n  const analyzeLastMonth = (year, month) => {\n    const availableMonths = getAvailableMonths();\n    const lastAvailableMonth = availableMonths[0].value;\n    const [lastYear, lastMonth] = lastAvailableMonth.split('-').map(Number);\n    const lastMonthData = getMonthData(lastAvailableMonth);\n\n    if (!lastMonthData) return \"Dati non disponibili per l'ultimo mese.\";\n\n    const { totaleTurni, mediaGiornaliera, massimoTurni, minimoTurni } = lastMonthData;\n    const monthName = getMonthName(lastMonth);\n\n    return `Nel mese di ${monthName} ${lastYear}, sono stati effettuati un totale di ${totaleTurni} turni, \n    con una media giornaliera di ${mediaGiornaliera.toFixed(2)} turni. \n    Il giorno più impegnativo è stato il ${massimoTurni.day} con ${massimoTurni.shifts} turni, \n    mentre il giorno con meno attività è stato il ${minimoTurni.day} con ${minimoTurni.shifts} turni.`;\n  };\n\n  const analyzeQuadrimester = (year, month) => {\n    const availableMonths = getAvailableMonths();\n    const lastFourMonths = availableMonths.slice(0, 4);\n    let totalTurni = 0;\n    let totalDays = 0;\n\n    const monthsAnalysis = lastFourMonths.map(monthObj => {\n      const monthData = getMonthData(monthObj.value);\n      if (monthData) {\n        totalTurni += monthData.totaleTurni;\n        totalDays += Object.keys(monthData.days).length;\n        return `${monthObj.label}: ${monthData.totaleTurni} turni`;\n      }\n      return `${monthObj.label}: Dati non disponibili`;\n    });\n\n    const averageTurni = totalTurni / totalDays;\n\n    return `Analisi degli ultimi 4 mesi:\\n${monthsAnalysis.join('\\n')}\\n\n    In totale, negli ultimi 4 mesi sono stati effettuati ${totalTurni} turni,\n    con una media giornaliera di ${averageTurni.toFixed(2)} turni.`;\n  };\n\n  const analyzeYear = (year, month) => {\n    const yearData = getYearlyData(year);\n    const totalTurni = Object.values(yearData).reduce((sum, month) => sum + month.totaleTurni, 0);\n    const monthsWithData = Object.values(yearData).filter(month => month.totaleTurni > 0).length;\n    const averageMonthlyTurni = totalTurni / monthsWithData;\n\n    const monthsComparison = Object.entries(yearData)\n      .map(([monthIndex, data]) => {\n        const monthName = getMonthName(parseInt(monthIndex) + 1);\n        const difference = data.totaleTurni - averageMonthlyTurni;\n        return `${monthName}: ${difference > 0 ? '+' : ''}${difference.toFixed(0)} rispetto alla media`;\n      })\n      .filter((_, index) => index < month);\n\n    return `Nell'anno ${year}, fino ad ora, sono stati effettuati un totale di ${totalTurni} turni,\n    con una media mensile di ${averageMonthlyTurni.toFixed(2)} turni.\n    Ecco come si sono comportati i mesi rispetto alla media:\\n${monthsComparison.join('\\n')}`;\n  };\n\n  const makePrediction = (year, month) => {\n    const availableYears = getAvailableMonths().map(m => m.value.split('-')[0])\n      .filter((v, i, arr) => arr.indexOf(v) === i);\n    \n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = getYearlyData(parseInt(y));\n        if (yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`${getMonthName(i)}: ${averageTurni.toFixed(0)} turni`);\n      }\n    }\n\n    return `Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n    \\n${futurePredictions.join('\\n')}`;\n  };\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <ViewTitle>Performance Trend</ViewTitle>\n        <ChartContainer>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={formatChartData(yearlyData)}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"turni\" stroke=\"#3B82F6\" activeDot={{ r: 8 }} />\n            </LineChart>\n          </ResponsiveContainer>\n        </ChartContainer>\n        <AnalysisSection>\n          <AnalysisTitle>Analisi dell'ultimo mese</AnalysisTitle>\n          <AnalysisText>{lastMonthAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Considerazioni sugli ultimi 4 mesi</AnalysisTitle>\n          <AnalysisText>{quadrimesterAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Conclusioni sull'anno in corso</AnalysisTitle>\n          <AnalysisText>{yearAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Previsione per i prossimi mesi</AnalysisTitle>\n          <AnalysisText>{prediction}</AnalysisText>\n        </AnalysisSection>\n        <BackButton onClick={() => setView('main')}>Torna alla Dashboard</BackButton>\n      </ViewContent>\n    </ViewContainer>\n  );\n};\n\nexport default PerformanceTrendView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}