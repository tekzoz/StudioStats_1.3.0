{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { Share2 } from 'lucide-react';\nimport { getYearlyData, getCurrentYearAndMonth, getAvailableYears } from './data';\n\n// Styled components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n_c = ViewContainer;\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c2 = ViewContent;\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n_c3 = ViewTitle;\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c4 = ChartContainer;\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c5 = AnalysisSection;\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n_c6 = AnalysisTitle;\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n_c7 = AnalysisText;\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n_c8 = LegendContainer;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n_c9 = LegendItem;\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n_c10 = LegendColor;\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 24px;\n`;\n_c11 = ButtonContainer;\nconst Button = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n  display: flex;\n  align-items: center;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n\n  svg {\n    margin-right: 8px;\n  }\n`;\n\n// Helper functions\n_c12 = Button;\nconst getMonthName = monthNumber => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber];\n};\nconst formatNumber = num => new Intl.NumberFormat('it-IT').format(Math.round(num));\nconst generateColorPalette = numColors => {\n  const hueStep = 360 / numColors;\n  return Array.from({\n    length: numColors\n  }, (_, i) => `hsl(${i * hueStep}, 70%, 50%)`);\n};\nconst PerformanceTrendView = ({\n  setView\n}) => {\n  _s();\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearConclusions, setYearConclusions] = useState('');\n  const [prediction, setPrediction] = useState('');\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const {\n    currentYear,\n    currentMonth\n  } = getCurrentYearAndMonth();\n  const generateYearConclusions = useCallback((year, currentMonth, yearData, allYearsData) => {\n    const month = currentMonth > 1 ? currentMonth - 1 : 12;\n    const yearToAnalyze = month === 12 ? year - 1 : year;\n    const currentYearData = yearData[yearToAnalyze] || {};\n    const totalTurni = Object.values(currentYearData).reduce((sum, monthData) => sum + ((monthData === null || monthData === void 0 ? void 0 : monthData.totaleTurni) || 0), 0);\n    const monthsWithData = Object.values(currentYearData).filter(monthData => monthData && monthData.totaleTurni > 0).length;\n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n\n    // Calcolo delle statistiche per gli anni precedenti\n    const previousYearsData = Object.entries(allYearsData).filter(([y]) => parseInt(y) < yearToAnalyze).map(([year, data]) => {\n      const yearTotal = Object.values(data).reduce((sum, monthData) => sum + ((monthData === null || monthData === void 0 ? void 0 : monthData.totaleTurni) || 0), 0);\n      return {\n        year: parseInt(year),\n        totalTurni: yearTotal\n      };\n    });\n    const avgPreviousYears = previousYearsData.length > 0 ? previousYearsData.reduce((sum, y) => sum + y.totalTurni, 0) / previousYearsData.length : 0;\n    let analysis = `Considerazioni sull'anno ${yearToAnalyze} (fino a ${getMonthName(month - 1)}):\\n\\n`;\n    analysis += `Nel periodo analizzato, sono stati effettuati un totale di ${formatNumber(totalTurni)} turni, `;\n    analysis += `con una media mensile di ${formatNumber(averageMonthlyTurni)} turni. `;\n    if (avgPreviousYears > 0) {\n      const percentDiff = (totalTurni - avgPreviousYears) / avgPreviousYears * 100;\n      analysis += `Questo rappresenta un ${percentDiff > 0 ? 'aumento' : 'diminuzione'} del ${formatNumber(Math.abs(percentDiff))}% `;\n      analysis += `rispetto alla media di tutti gli anni precedenti nello stesso periodo.\\n\\n`;\n    } else {\n      analysis += `Non ci sono dati sufficienti per un confronto con gli anni precedenti.\\n\\n`;\n    }\n\n    // Nuova analisi del trend\n    analysis += `Analisi dettagliata:\\n`;\n    const lastYear = yearToAnalyze - 1;\n    const lastYearData = allYearsData[lastYear] || {};\n    let growthMonths = [];\n    let declineMonths = [];\n    let consecutiveGrowth = 0;\n    let consecutiveDecline = 0;\n    let maxConsecutiveGrowth = 0;\n    let maxConsecutiveDecline = 0;\n    for (let i = 0; i < month; i++) {\n      var _currentYearData$i, _lastYearData$i;\n      const currentMonthTurni = ((_currentYearData$i = currentYearData[i]) === null || _currentYearData$i === void 0 ? void 0 : _currentYearData$i.totaleTurni) || 0;\n      const lastYearMonthTurni = ((_lastYearData$i = lastYearData[i]) === null || _lastYearData$i === void 0 ? void 0 : _lastYearData$i.totaleTurni) || 0;\n      if (lastYearMonthTurni > 0) {\n        const monthlyDiff = currentMonthTurni - lastYearMonthTurni;\n        const monthlyPercentDiff = monthlyDiff / lastYearMonthTurni * 100;\n        if (monthlyDiff > 0) {\n          growthMonths.push({\n            month: i,\n            diff: monthlyPercentDiff\n          });\n          consecutiveGrowth++;\n          consecutiveDecline = 0;\n        } else if (monthlyDiff < 0) {\n          declineMonths.push({\n            month: i,\n            diff: monthlyPercentDiff\n          });\n          consecutiveDecline++;\n          consecutiveGrowth = 0;\n        }\n        maxConsecutiveGrowth = Math.max(maxConsecutiveGrowth, consecutiveGrowth);\n        maxConsecutiveDecline = Math.max(maxConsecutiveDecline, consecutiveDecline);\n      }\n    }\n    growthMonths.sort((a, b) => b.diff - a.diff);\n    declineMonths.sort((a, b) => a.diff - b.diff);\n    if (growthMonths.length > 0) {\n      analysis += `I mesi con la maggiore crescita rispetto all'anno precedente sono stati:\\n`;\n      growthMonths.slice(0, 3).forEach(m => {\n        analysis += `- ${getMonthName(m.month)} con un aumento del ${formatNumber(m.diff)}%\\n`;\n      });\n    }\n    if (declineMonths.length > 0) {\n      analysis += `\\nI mesi con la maggiore diminuzione rispetto all'anno precedente sono stati:\\n`;\n      declineMonths.slice(0, 3).forEach(m => {\n        analysis += `- ${getMonthName(m.month)} con una diminuzione del ${formatNumber(Math.abs(m.diff))}%\\n`;\n      });\n    }\n    analysis += `\\nLa performance ha mostrato una crescita continua per un massimo di ${maxConsecutiveGrowth} mesi consecutivi `;\n    analysis += `e una diminuzione continua per un massimo di ${maxConsecutiveDecline} mesi consecutivi.\\n`;\n\n    // Analisi stagionale\n    analysis += `\\nAnalisi stagionale:\\n`;\n    const quarterlyData = [[0, 1, 2],\n    // primo trimestre\n    [3, 4, 5],\n    // secondo trimestre\n    [6, 7, 8],\n    // terzo trimestre\n    [9, 10, 11] // quarto trimestre\n    ].map(months => months.map(m => {\n      var _currentYearData$m;\n      return ((_currentYearData$m = currentYearData[m]) === null || _currentYearData$m === void 0 ? void 0 : _currentYearData$m.totaleTurni) || 0;\n    }).filter(t => t > 0));\n    const quarterlyAverages = quarterlyData.map(q => q.length > 0 ? q.reduce((a, b) => a + b, 0) / q.length : null);\n    const quarters = ['primo', 'secondo', 'terzo', 'quarto'];\n    quarterlyAverages.forEach((avg, index) => {\n      if (avg !== null) {\n        const percentDiff = (avg - averageMonthlyTurni) / averageMonthlyTurni * 100;\n        analysis += `Il ${quarters[index]} trimestre mostra una media di ${formatNumber(avg)} turni al mese, `;\n        analysis += `${percentDiff > 0 ? 'superiore' : 'inferiore'} del ${formatNumber(Math.abs(percentDiff))}% rispetto alla media annuale.\\n`;\n      }\n    });\n\n    // Conclusione finale\n    const allYearsTotalTurni = Object.values(allYearsData).map(yearData => Object.values(yearData).reduce((sum, month) => sum + ((month === null || month === void 0 ? void 0 : month.totaleTurni) || 0), 0));\n    const sortedTotalTurni = [...allYearsTotalTurni].sort((a, b) => b - a);\n    const currentYearRank = sortedTotalTurni.indexOf(totalTurni) + 1;\n    const isTopPerformer = currentYearRank <= Math.ceil(sortedTotalTurni.length * 0.2);\n    analysis += `\\nConclusione:\\nCon le informazioni attuali possiamo determinare che la produttività dell'anno in corso è `;\n    if (avgPreviousYears > 0) {\n      analysis += totalTurni > avgPreviousYears ? 'superiore' : 'inferiore';\n      analysis += ` alla media degli anni passati. `;\n    } else {\n      analysis += `non confrontabile con gli anni precedenti per mancanza di dati. `;\n    }\n    if (currentYearRank === 1) {\n      analysis += `Questo è attualmente il miglior anno di sempre in termini di produttività.`;\n    } else if (isTopPerformer) {\n      analysis += `Questo è uno dei migliori anni, posizionandosi al ${currentYearRank}° posto nella classifica storica.`;\n    } else {\n      analysis += `La performance di quest'anno si posiziona al ${currentYearRank}° posto nella classifica storica.`;\n    }\n    return analysis;\n  }, []);\n  const makePrediction = useCallback((year, month, allYearsData) => {\n    // Implementa qui la logica per la previsione\n    return \"Previsione non ancora implementata.\";\n  }, [availableYears]);\n  const formatChartData = useCallback(() => {\n    const chartData = [];\n    const calculateAverageForMonth = month => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return Math.round(sum / relevantYears.length);\n    };\n    for (let month = 0; month < 12; month++) {\n      const monthData = {\n        month: getMonthName(month)\n      };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth - 1) {\n            // Dati reali per i mesi passati\n            monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n            monthData[`${year}IsPrediction`] = false;\n          } else {\n            // Previsione per il mese corrente e i mesi futuri\n            monthData[year] = calculateAverageForMonth(month);\n            monthData[`${year}IsPrediction`] = true;\n          }\n        } else {\n          // Dati degli anni passati\n          monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  }, [allYearsData, availableYears, currentYear, currentMonth]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const yearsData = {};\n      for (const year of availableYears) {\n        yearsData[year] = await getYearlyData(year);\n      }\n      setAllYearsData(yearsData);\n      setYearConclusions(generateYearConclusions(currentYear, currentMonth, yearsData, yearsData));\n      setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n    };\n    fetchData();\n  }, [currentYear, currentMonth, availableYears, generateYearConclusions, makePrediction]);\n  const chartData = useMemo(() => formatChartData(), [formatChartData]);\n  const handleShare = () => {\n    const content = `Performance Trend\\n\\n${yearConclusions}\\n\\n${prediction}`;\n    navigator.clipboard.writeText(content).then(() => {\n      alert('Contenuto copiato negli appunti. Ora puoi condividerlo!');\n    }).catch(err => {\n      console.error('Errore nel copiare il contenuto: ', err);\n      alert('Si è verificato un errore nel copiare il contenuto. Per favore, prova a copiarlo manualmente.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(ViewContent, {\n      children: [/*#__PURE__*/_jsxDEV(ViewTitle, {\n        children: \"Performance Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Trend annuale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 15\n            }, this), availableYears.map((year, index) => {\n              const isCurrentYear = year === currentYear;\n              if (isCurrentYear) {\n                return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Line, {\n                    type: \"monotone\",\n                    dataKey: dataPoint => dataPoint[`${year}IsPrediction`] ? undefined : dataPoint[year],\n                    stroke: colorPalette[index],\n                    strokeWidth: 3,\n                    dot: false,\n                    connectNulls: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 365,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Line, {\n                    type: \"monotone\",\n                    dataKey: dataPoint => {\n                      if (dataPoint[`${year}IsPrediction`]) {\n                        return dataPoint[year];\n                      }\n                      // Restituisce il valore dell'ultimo mese reale per connettere le linee\n                      const lastRealMonth = chartData.findIndex(d => d[`${year}IsPrediction`]) - 1;\n                      return dataPoint === chartData[lastRealMonth] ? dataPoint[year] : undefined;\n                    },\n                    stroke: colorPalette[index],\n                    strokeWidth: 3,\n                    strokeDasharray: \"5 5\",\n                    dot: false,\n                    connectNulls: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 374,\n                    columnNumber: 23\n                  }, this)]\n                }, year, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(Line, {\n                  type: \"monotone\",\n                  dataKey: year.toString(),\n                  stroke: colorPalette[index],\n                  strokeWidth: 1,\n                  dot: false\n                }, year, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LegendContainer, {\n          children: availableYears.map((year, index) => /*#__PURE__*/_jsxDEV(LegendItem, {\n            children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n              color: colorPalette[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: year === currentYear ? `${year} (linea continua: dati reali, tratteggiata: previsione)` : year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 17\n            }, this)]\n          }, year, true, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Considerazioni sull'anno in corso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: yearConclusions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Previsione per i prossimi mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: prediction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setView('main'),\n          children: \"Torna alla Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleShare,\n          children: [/*#__PURE__*/_jsxDEV(Share2, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this), \"Condividi\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 348,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceTrendView, \"ppp5rTxj7bqbzH8PDsrATEmgRQ4=\");\n_c13 = PerformanceTrendView;\nexport default PerformanceTrendView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;\n$RefreshReg$(_c, \"ViewContainer\");\n$RefreshReg$(_c2, \"ViewContent\");\n$RefreshReg$(_c3, \"ViewTitle\");\n$RefreshReg$(_c4, \"ChartContainer\");\n$RefreshReg$(_c5, \"AnalysisSection\");\n$RefreshReg$(_c6, \"AnalysisTitle\");\n$RefreshReg$(_c7, \"AnalysisText\");\n$RefreshReg$(_c8, \"LegendContainer\");\n$RefreshReg$(_c9, \"LegendItem\");\n$RefreshReg$(_c10, \"LegendColor\");\n$RefreshReg$(_c11, \"ButtonContainer\");\n$RefreshReg$(_c12, \"Button\");\n$RefreshReg$(_c13, \"PerformanceTrendView\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","styled","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","Share2","getYearlyData","getCurrentYearAndMonth","getAvailableYears","jsxDEV","_jsxDEV","ViewContainer","div","_c","ViewContent","_c2","ViewTitle","h1","_c3","ChartContainer","_c4","AnalysisSection","_c5","AnalysisTitle","h2","_c6","AnalysisText","p","_c7","LegendContainer","_c8","LegendItem","_c9","LegendColor","props","color","_c10","ButtonContainer","_c11","Button","button","_c12","getMonthName","monthNumber","monthNames","formatNumber","num","Intl","NumberFormat","format","Math","round","generateColorPalette","numColors","hueStep","Array","from","length","_","i","PerformanceTrendView","setView","_s","allYearsData","setAllYearsData","yearConclusions","setYearConclusions","prediction","setPrediction","availableYears","map","y","parseInt","value","colorPalette","currentYear","currentMonth","generateYearConclusions","year","yearData","month","yearToAnalyze","currentYearData","totalTurni","Object","values","reduce","sum","monthData","totaleTurni","monthsWithData","filter","averageMonthlyTurni","previousYearsData","entries","data","yearTotal","avgPreviousYears","analysis","percentDiff","abs","lastYear","lastYearData","growthMonths","declineMonths","consecutiveGrowth","consecutiveDecline","maxConsecutiveGrowth","maxConsecutiveDecline","_currentYearData$i","_lastYearData$i","currentMonthTurni","lastYearMonthTurni","monthlyDiff","monthlyPercentDiff","push","diff","max","sort","a","b","slice","forEach","m","quarterlyData","months","_currentYearData$m","t","quarterlyAverages","q","quarters","avg","index","allYearsTotalTurni","sortedTotalTurni","currentYearRank","indexOf","isTopPerformer","ceil","makePrediction","formatChartData","chartData","calculateAverageForMonth","relevantYears","acc","fetchData","yearsData","handleShare","content","navigator","clipboard","writeText","then","alert","catch","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","isCurrentYear","Fragment","type","dataPoint","undefined","stroke","strokeWidth","dot","connectNulls","lastRealMonth","findIndex","d","toString","onClick","size","_c13","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { Share2 } from 'lucide-react';\nimport { \n  getYearlyData, \n  getCurrentYearAndMonth,\n  getAvailableYears\n} from './data';\n\n// Styled components\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 24px;\n`;\n\nconst Button = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n  display: flex;\n  align-items: center;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n\n  svg {\n    margin-right: 8px;\n  }\n`;\n\n// Helper functions\nconst getMonthName = (monthNumber) => {\n  const monthNames = [\n    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n  ];\n  return monthNames[monthNumber];\n};\n\nconst formatNumber = (num) => new Intl.NumberFormat('it-IT').format(Math.round(num));\n\nconst generateColorPalette = (numColors) => {\n  const hueStep = 360 / numColors;\n  return Array.from({ length: numColors }, (_, i) => \n    `hsl(${i * hueStep}, 70%, 50%)`\n  );\n};\n\nconst PerformanceTrendView = ({ setView }) => {\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearConclusions, setYearConclusions] = useState('');\n  const [prediction, setPrediction] = useState('');\n\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const { currentYear, currentMonth } = getCurrentYearAndMonth();\n\n  const generateYearConclusions = useCallback((year, currentMonth, yearData, allYearsData) => {\n    const month = currentMonth > 1 ? currentMonth - 1 : 12;\n    const yearToAnalyze = month === 12 ? year - 1 : year;\n    const currentYearData = yearData[yearToAnalyze] || {};\n    \n    const totalTurni = Object.values(currentYearData)\n      .reduce((sum, monthData) => sum + (monthData?.totaleTurni || 0), 0);\n    \n    const monthsWithData = Object.values(currentYearData)\n      .filter(monthData => monthData && monthData.totaleTurni > 0).length;\n    \n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n  \n    // Calcolo delle statistiche per gli anni precedenti\n    const previousYearsData = Object.entries(allYearsData)\n      .filter(([y]) => parseInt(y) < yearToAnalyze)\n      .map(([year, data]) => {\n        const yearTotal = Object.values(data)\n          .reduce((sum, monthData) => sum + (monthData?.totaleTurni || 0), 0);\n        return { year: parseInt(year), totalTurni: yearTotal };\n      });\n  \n    const avgPreviousYears = previousYearsData.length > 0 \n      ? previousYearsData.reduce((sum, y) => sum + y.totalTurni, 0) / previousYearsData.length \n      : 0;\n    \n    let analysis = `Considerazioni sull'anno ${yearToAnalyze} (fino a ${getMonthName(month - 1)}):\\n\\n`;\n    analysis += `Nel periodo analizzato, sono stati effettuati un totale di ${formatNumber(totalTurni)} turni, `;\n    analysis += `con una media mensile di ${formatNumber(averageMonthlyTurni)} turni. `;\n    \n    if (avgPreviousYears > 0) {\n      const percentDiff = ((totalTurni - avgPreviousYears) / avgPreviousYears) * 100;\n      analysis += `Questo rappresenta un ${percentDiff > 0 ? 'aumento' : 'diminuzione'} del ${formatNumber(Math.abs(percentDiff))}% `;\n      analysis += `rispetto alla media di tutti gli anni precedenti nello stesso periodo.\\n\\n`;\n    } else {\n      analysis += `Non ci sono dati sufficienti per un confronto con gli anni precedenti.\\n\\n`;\n    }\n\n    // Nuova analisi del trend\n    analysis += `Analisi dettagliata:\\n`;\n    const lastYear = yearToAnalyze - 1;\n    const lastYearData = allYearsData[lastYear] || {};\n    let growthMonths = [];\n    let declineMonths = [];\n    let consecutiveGrowth = 0;\n    let consecutiveDecline = 0;\n    let maxConsecutiveGrowth = 0;\n    let maxConsecutiveDecline = 0;\n\n    for (let i = 0; i < month; i++) {\n      const currentMonthTurni = currentYearData[i]?.totaleTurni || 0;\n      const lastYearMonthTurni = lastYearData[i]?.totaleTurni || 0;\n      if (lastYearMonthTurni > 0) {\n        const monthlyDiff = currentMonthTurni - lastYearMonthTurni;\n        const monthlyPercentDiff = (monthlyDiff / lastYearMonthTurni) * 100;\n\n        if (monthlyDiff > 0) {\n          growthMonths.push({ month: i, diff: monthlyPercentDiff });\n          consecutiveGrowth++;\n          consecutiveDecline = 0;\n        } else if (monthlyDiff < 0) {\n          declineMonths.push({ month: i, diff: monthlyPercentDiff });\n          consecutiveDecline++;\n          consecutiveGrowth = 0;\n        }\n\n        maxConsecutiveGrowth = Math.max(maxConsecutiveGrowth, consecutiveGrowth);\n        maxConsecutiveDecline = Math.max(maxConsecutiveDecline, consecutiveDecline);\n      }\n    }\n\n    growthMonths.sort((a, b) => b.diff - a.diff);\n    declineMonths.sort((a, b) => a.diff - b.diff);\n\n    if (growthMonths.length > 0) {\n      analysis += `I mesi con la maggiore crescita rispetto all'anno precedente sono stati:\\n`;\n      growthMonths.slice(0, 3).forEach(m => {\n        analysis += `- ${getMonthName(m.month)} con un aumento del ${formatNumber(m.diff)}%\\n`;\n      });\n    }\n\n    if (declineMonths.length > 0) {\n      analysis += `\\nI mesi con la maggiore diminuzione rispetto all'anno precedente sono stati:\\n`;\n      declineMonths.slice(0, 3).forEach(m => {\n        analysis += `- ${getMonthName(m.month)} con una diminuzione del ${formatNumber(Math.abs(m.diff))}%\\n`;\n      });\n    }\n\n    analysis += `\\nLa performance ha mostrato una crescita continua per un massimo di ${maxConsecutiveGrowth} mesi consecutivi `;\n    analysis += `e una diminuzione continua per un massimo di ${maxConsecutiveDecline} mesi consecutivi.\\n`;\n\n    // Analisi stagionale\n    analysis += `\\nAnalisi stagionale:\\n`;\n    const quarterlyData = [\n      [0, 1, 2], // primo trimestre\n      [3, 4, 5], // secondo trimestre\n      [6, 7, 8], // terzo trimestre\n      [9, 10, 11] // quarto trimestre\n    ].map(months => \n      months.map(m => currentYearData[m]?.totaleTurni || 0).filter(t => t > 0)\n    );\n\n    const quarterlyAverages = quarterlyData.map(q => q.length > 0 ? q.reduce((a, b) => a + b, 0) / q.length : null);\n    \n    const quarters = ['primo', 'secondo', 'terzo', 'quarto'];\n    quarterlyAverages.forEach((avg, index) => {\n      if (avg !== null) {\n        const percentDiff = ((avg - averageMonthlyTurni) / averageMonthlyTurni) * 100;\n        analysis += `Il ${quarters[index]} trimestre mostra una media di ${formatNumber(avg)} turni al mese, `;\n        analysis += `${percentDiff > 0 ? 'superiore' : 'inferiore'} del ${formatNumber(Math.abs(percentDiff))}% rispetto alla media annuale.\\n`;\n      }\n    });\n\n    // Conclusione finale\n    const allYearsTotalTurni = Object.values(allYearsData).map(yearData => \n      Object.values(yearData).reduce((sum, month) => sum + (month?.totaleTurni || 0), 0)\n    );\n    const sortedTotalTurni = [...allYearsTotalTurni].sort((a, b) => b - a);\n    const currentYearRank = sortedTotalTurni.indexOf(totalTurni) + 1;\n    const isTopPerformer = currentYearRank <= Math.ceil(sortedTotalTurni.length * 0.2);\n\n    analysis += `\\nConclusione:\\nCon le informazioni attuali possiamo determinare che la produttività dell'anno in corso è `;\n    if (avgPreviousYears > 0) {\n      analysis += totalTurni > avgPreviousYears ? 'superiore' : 'inferiore';\n      analysis += ` alla media degli anni passati. `;\n    } else {\n      analysis += `non confrontabile con gli anni precedenti per mancanza di dati. `;\n    }\n    \n    if (currentYearRank === 1) {\n      analysis += `Questo è attualmente il miglior anno di sempre in termini di produttività.`;\n    } else if (isTopPerformer) {\n      analysis += `Questo è uno dei migliori anni, posizionandosi al ${currentYearRank}° posto nella classifica storica.`;\n    } else {\n      analysis += `La performance di quest'anno si posiziona al ${currentYearRank}° posto nella classifica storica.`;\n    }\n\n    return analysis;\n  }, []);\n\n  const makePrediction = useCallback((year, month, allYearsData) => {\n    // Implementa qui la logica per la previsione\n    return \"Previsione non ancora implementata.\";\n  }, [availableYears]);\n\n  const formatChartData = useCallback(() => {\n    const chartData = [];\n    \n    const calculateAverageForMonth = (month) => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return Math.round(sum / relevantYears.length);\n    };\n  \n    for (let month = 0; month < 12; month++) {\n      const monthData = { month: getMonthName(month) };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth - 1) {\n            // Dati reali per i mesi passati\n            monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n            monthData[`${year}IsPrediction`] = false;\n          } else {\n            // Previsione per il mese corrente e i mesi futuri\n            monthData[year] = calculateAverageForMonth(month);\n            monthData[`${year}IsPrediction`] = true;\n          }\n        } else {\n          // Dati degli anni passati\n          monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  }, [allYearsData, availableYears, currentYear, currentMonth]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const yearsData = {};\n      for (const year of availableYears) {\n        yearsData[year] = await getYearlyData(year);\n      }\n      setAllYearsData(yearsData);\n\n      setYearConclusions(generateYearConclusions(currentYear, currentMonth, yearsData, yearsData));\n      setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n    };\n\n    fetchData();\n  }, [currentYear, currentMonth, availableYears, generateYearConclusions, makePrediction]);\n\n  const chartData = useMemo(() => formatChartData(), [formatChartData]);\n\n  const handleShare = () => {\n    const content = `Performance Trend\\n\\n${yearConclusions}\\n\\n${prediction}`;\n    navigator.clipboard.writeText(content).then(() => {\n      alert('Contenuto copiato negli appunti. Ora puoi condividerlo!');\n    }).catch(err => {\n      console.error('Errore nel copiare il contenuto: ', err);\n      alert('Si è verificato un errore nel copiare il contenuto. Per favore, prova a copiarlo manualmente.');\n    });\n  };\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <ViewTitle>Performance Trend</ViewTitle>\n        <ChartContainer>\n          <AnalysisTitle>Trend annuale</AnalysisTitle>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip />\n              {availableYears.map((year, index) => {\n                const isCurrentYear = year === currentYear;\n                if (isCurrentYear) {\n                  return (\n                    <React.Fragment key={year}>\n                      {/* Linea per i dati reali dell'anno corrente */}\n                      <Line\n                        type=\"monotone\"\n                        dataKey={(dataPoint) => dataPoint[`${year}IsPrediction`] ? undefined : dataPoint[year]}\n                        stroke={colorPalette[index]}\n                        strokeWidth={3}\n                        dot={false}\n                        connectNulls={true}\n                      />\n                      {/* Linea tratteggiata per i dati previsionali dell'anno corrente */}\n                      <Line\n                        type=\"monotone\"\n                        dataKey={(dataPoint) => {\n                          if (dataPoint[`${year}IsPrediction`]) {\n                            return dataPoint[year];\n                          }\n                          // Restituisce il valore dell'ultimo mese reale per connettere le linee\n                          const lastRealMonth = chartData.findIndex(d => d[`${year}IsPrediction`]) - 1;\n                          return dataPoint === chartData[lastRealMonth] ? dataPoint[year] : undefined;\n                        }}\n                        stroke={colorPalette[index]}\n                        strokeWidth={3}\n                        strokeDasharray=\"5 5\"\n                        dot={false}\n                        connectNulls={true}\n                      />\n                    </React.Fragment>\n                  );\n                } else {\n                  return (\n                    <Line\n                      key={year}\n                      type=\"monotone\"\n                      dataKey={year.toString()}\n                      stroke={colorPalette[index]}\n                      strokeWidth={1}\n                      dot={false}\n                    />\n                  );\n                }\n              })}\n            </LineChart>\n          </ResponsiveContainer>\n          <LegendContainer>\n            {availableYears.map((year, index) => (\n              <LegendItem key={year}>\n                <LegendColor color={colorPalette[index]} />\n                <span>{year === currentYear ? `${year} (linea continua: dati reali, tratteggiata: previsione)` : year}</span>\n              </LegendItem>\n            ))}\n          </LegendContainer>\n        </ChartContainer>\n        <AnalysisSection>\n          <AnalysisTitle>Considerazioni sull'anno in corso</AnalysisTitle>\n          <AnalysisText>{yearConclusions}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Previsione per i prossimi mesi</AnalysisTitle>\n          <AnalysisText>{prediction}</AnalysisText>\n        </AnalysisSection>\n        <ButtonContainer>\n          <Button onClick={() => setView('main')}>Torna alla Dashboard</Button>\n          <Button onClick={handleShare}>\n            <Share2 size={20} />\n            Condividi\n          </Button>\n        </ButtonContainer>\n      </ViewContent>\n    </ViewContainer>\n  );\n};\n\nexport default PerformanceTrendView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}