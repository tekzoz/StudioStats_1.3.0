{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { getYearlyData, getCurrentYearAndMonth, getAvailableYears } from './data';\n\n// Styled components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n_c = ViewContainer;\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c2 = ViewContent;\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n_c3 = ViewTitle;\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c4 = ChartContainer;\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c5 = AnalysisSection;\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n_c6 = AnalysisTitle;\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n_c7 = AnalysisText;\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n_c8 = LegendContainer;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n_c9 = LegendItem;\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n_c10 = LegendColor;\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\n_c11 = BackButton;\nconst getMonthName = monthNumber => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber - 1];\n};\nconst formatNumber = num => new Intl.NumberFormat('it-IT').format(Math.round(num));\nconst generateColorPalette = numColors => {\n  const hueStep = 360 / numColors;\n  return Array.from({\n    length: numColors\n  }, (_, i) => `hsl(${i * hueStep}, 70%, 50%)`);\n};\nconst PerformanceTrendView = ({\n  setView\n}) => {\n  _s();\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearConclusions, setYearConclusions] = useState('');\n  const [prediction, setPrediction] = useState('');\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const {\n    currentYear,\n    currentMonth\n  } = getCurrentYearAndMonth();\n  const analyzeTrend = useCallback(monthData => {\n    const trendWindow = 6; // Analizziamo gli ultimi 6 mesi\n    const recentMonths = monthData.slice(-trendWindow).filter(m => m !== undefined);\n    if (recentMonths.length < 3) return \"non determinabile (dati insufficienti)\";\n    const slopes = [];\n    for (let i = 1; i < recentMonths.length; i++) {\n      slopes.push(recentMonths[i] - recentMonths[i - 1]);\n    }\n    const averageSlope = slopes.reduce((a, b) => a + b, 0) / slopes.length;\n    const slopeVariability = Math.sqrt(slopes.map(s => Math.pow(s - averageSlope, 2)).reduce((a, b) => a + b, 0) / slopes.length);\n    if (Math.abs(averageSlope) < slopeVariability) {\n      return \"stabile\";\n    } else if (averageSlope > 0) {\n      return averageSlope > 2 * slopeVariability ? \"fortemente crescente\" : \"leggermente crescente\";\n    } else {\n      return averageSlope < -2 * slopeVariability ? \"fortemente decrescente\" : \"leggermente decrescente\";\n    }\n  }, []);\n  const calculateVolatility = useCallback(data => {\n    const validData = data.filter(d => d !== undefined);\n    const mean = validData.reduce((a, b) => a + b, 0) / validData.length;\n    const squaredDiffs = validData.map(d => Math.pow(d - mean, 2));\n    return Math.sqrt(squaredDiffs.reduce((a, b) => a + b, 0) / validData.length);\n  }, []);\n  const generateYearConclusions = useCallback((year, currentMonth, yearData, allYearsData) => {\n    const month = currentMonth > 1 ? currentMonth - 1 : 12;\n    const yearToAnalyze = month === 12 ? year - 1 : year;\n    const currentYearData = yearData[yearToAnalyze] || {};\n    const totalTurni = Object.values(currentYearData).slice(0, month).reduce((sum, monthData) => sum + ((monthData === null || monthData === void 0 ? void 0 : monthData.totaleTurni) || 0), 0);\n    const monthsWithData = Object.values(currentYearData).slice(0, month).filter(monthData => monthData && monthData.totaleTurni > 0).length;\n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n\n    // Calcolo delle statistiche per gli anni precedenti\n    const previousYearsData = Object.entries(allYearsData).filter(([y]) => parseInt(y) < yearToAnalyze).map(([year, data]) => {\n      const yearTotal = Object.values(data).slice(0, month).reduce((sum, monthData) => sum + ((monthData === null || monthData === void 0 ? void 0 : monthData.totaleTurni) || 0), 0);\n      return {\n        year: parseInt(year),\n        totalTurni: yearTotal\n      };\n    });\n    const avgPreviousYears = previousYearsData.reduce((sum, y) => sum + y.totalTurni, 0) / previousYearsData.length;\n    const monthlyTurni = Object.values(currentYearData).slice(0, month).map(m => m ? m.totaleTurni : undefined);\n    const trend = analyzeTrend(monthlyTurni);\n    const volatility = calculateVolatility(monthlyTurni);\n    const volatilityPercentage = volatility / averageMonthlyTurni * 100;\n    let analysis = `Analisi dettagliata dell'anno ${yearToAnalyze} (fino a ${getMonthName(month)}):\\n\\n`;\n    analysis += `Nel periodo analizzato, sono stati effettuati un totale di ${formatNumber(totalTurni)} turni, `;\n    analysis += `con una media mensile di ${formatNumber(averageMonthlyTurni)} turni. `;\n    if (totalTurni > avgPreviousYears) {\n      analysis += `Questo rappresenta un aumento del ${formatNumber((totalTurni / avgPreviousYears - 1) * 100)}% `;\n      analysis += `rispetto alla media degli anni precedenti nello stesso periodo. `;\n    } else if (totalTurni < avgPreviousYears) {\n      analysis += `Questo rappresenta una diminuzione del ${formatNumber((avgPreviousYears / totalTurni - 1) * 100)}% `;\n      analysis += `rispetto alla media degli anni precedenti nello stesso periodo. `;\n    } else {\n      analysis += `Questo è in linea con la media degli anni precedenti nello stesso periodo. `;\n    }\n    analysis += `\\n\\nAnalisi approfondita del trend:\\n`;\n    analysis += `Il trend degli ultimi ${Math.min(6, monthsWithData)} mesi è ${trend}. `;\n    switch (trend) {\n      case \"fortemente crescente\":\n        analysis += `Questo indica un significativo aumento dell'attività, che potrebbe richiedere un'espansione delle risorse o un'ottimizzazione dei processi per gestire la crescente domanda. `;\n        break;\n      case \"leggermente crescente\":\n        analysis += `C'è un leggero aumento dell'attività, che potrebbe indicare una graduale espansione del business o un miglioramento delle condizioni di mercato. `;\n        break;\n      case \"stabile\":\n        analysis += `L'attività mostra una notevole stabilità, suggerendo una domanda costante e potenzialmente prevedibile. `;\n        break;\n      case \"leggermente decrescente\":\n        analysis += `Si osserva una leggera diminuzione dell'attività, che potrebbe richiedere un'analisi delle cause e possibili azioni correttive. `;\n        break;\n      case \"fortemente decrescente\":\n        analysis += `C'è una significativa diminuzione dell'attività, che richiede un'attenzione immediata e potenziali interventi strategici. `;\n        break;\n      default:\n        analysis += `Non è possibile determinare un trend chiaro con i dati disponibili. `;\n    }\n    analysis += `\\nLa volatilità mensile è di ${formatNumber(volatility)} turni, che rappresenta il ${formatNumber(volatilityPercentage)}% della media mensile. `;\n    if (volatilityPercentage > 30) {\n      analysis += `Questa alta volatilità suggerisce una significativa variabilità mese per mese, che potrebbe rendere più difficile la pianificazione delle risorse. `;\n    } else if (volatilityPercentage > 15) {\n      analysis += `Questa moderata volatilità indica alcune fluttuazioni mensili, ma generalmente gestibili con una pianificazione flessibile. `;\n    } else {\n      analysis += `Questa bassa volatilità suggerisce una relativa stabilità mese per mese, facilitando la pianificazione delle risorse. `;\n    }\n\n    // Analisi stagionale\n    analysis += `\\n\\nAnalisi stagionale:\\n`;\n    const quarterlyData = [monthlyTurni.slice(0, 3).filter(m => m !== undefined), monthlyTurni.slice(3, 6).filter(m => m !== undefined), monthlyTurni.slice(6, 9).filter(m => m !== undefined), monthlyTurni.slice(9, 12).filter(m => m !== undefined)];\n    const quarterlyAverages = quarterlyData.map(q => q.length > 0 ? q.reduce((a, b) => a + b, 0) / q.length : null);\n    const quarters = ['primo', 'secondo', 'terzo', 'quarto'];\n    quarterlyAverages.forEach((avg, index) => {\n      if (avg !== null) {\n        const percentDiff = (avg - averageMonthlyTurni) / averageMonthlyTurni * 100;\n        analysis += `Il ${quarters[index]} trimestre mostra una media di ${formatNumber(avg)} turni al mese, `;\n        analysis += `${percentDiff > 0 ? 'superiore' : 'inferiore'} del ${formatNumber(Math.abs(percentDiff))}% rispetto alla media annuale.\\n`;\n      }\n    });\n    return analysis;\n  }, [analyzeTrend, calculateVolatility]);\n  const makePrediction = useCallback((year, month, allYearsData) => {\n    let analysis = '';\n    const futurePredictions = [];\n    let totalEffectiveTurni = 0;\n    let totalPredictedTurni = 0;\n\n    // Calcolo dei turni effettivi e previsti per l'anno corrente\n    for (let i = 0; i < 12; i++) {\n      const monthData = allYearsData[year][i];\n      if (i < month - 1) {\n        // Turni effettivi per i mesi passati\n        totalEffectiveTurni += monthData ? monthData.totaleTurni : 0;\n      } else {\n        // Previsione per i mesi rimanenti\n        let totalTurni = 0;\n        let yearsCount = 0;\n        availableYears.forEach(y => {\n          if (y !== 2020 && y !== year) {\n            const yearData = allYearsData[y];\n            if (yearData && yearData[i] && yearData[i].totaleTurni > 0) {\n              totalTurni += yearData[i].totaleTurni;\n              yearsCount++;\n            }\n          }\n        });\n        if (yearsCount > 0) {\n          const averageTurni = Math.round(totalTurni / yearsCount);\n          totalPredictedTurni += averageTurni;\n          futurePredictions.push(`• ${getMonthName(i + 1)}: ${formatNumber(averageTurni)} turni`);\n        }\n      }\n    }\n\n    // Calcolo del totale complessivo\n    const totalComplessivo = totalEffectiveTurni + totalPredictedTurni;\n\n    // Creazione della classifica di produttività\n    const productivityRanking = availableYears.map(y => {\n      if (y === year) {\n        return {\n          year: y,\n          totalTurni: totalComplessivo\n        };\n      } else {\n        const yearTotalTurni = Object.values(allYearsData[y]).reduce((sum, month) => sum + (month ? month.totaleTurni : 0), 0);\n        return {\n          year: y,\n          totalTurni: yearTotalTurni\n        };\n      }\n    }).sort((a, b) => b.totalTurni - a.totalTurni);\n\n    // Composizione dell'analisi\n    analysis += `Turni effettivi (fino a ${getMonthName(month - 1)}): ${formatNumber(totalEffectiveTurni)}\\n`;\n    analysis += `Turni previsti (da ${getMonthName(month)} a Dicembre): ${formatNumber(totalPredictedTurni)}\\n`;\n    analysis += `Totale complessivo stimato per l'anno ${year}: ${formatNumber(totalComplessivo)}\\n\\n`;\n    analysis += `Previsione per i mesi rimanenti (in base alla media degli anni precedenti):\\n${futurePredictions.join('\\n')}\\n\\n`;\n    analysis += `Classifica di produttività (totale turni per anno):\\n`;\n    productivityRanking.forEach((item, index) => {\n      analysis += `${index + 1}. ${item.year}: ${formatNumber(item.totalTurni)} turni`;\n      if (item.year === year) {\n        analysis += ` (proiezione)`;\n      }\n      analysis += '\\n';\n    });\n\n    // Aggiungi un commento sulla posizione dell'anno corrente nella classifica\n    const currentYearRank = productivityRanking.findIndex(item => item.year === year) + 1;\n    analysis += `\\nL'anno ${year} si posiziona attualmente al ${currentYearRank}° posto nella classifica di produttività.`;\n    if (currentYearRank === 1) {\n      analysis += ` Questo suggerisce un anno particolarmente produttivo, potenzialmente superando i risultati degli anni precedenti.`;\n    } else if (currentYearRank <= 3) {\n      analysis += ` Questa è una performance solida, indicando un anno di buona produttività.`;\n    } else {\n      analysis += ` C'è potenziale per migliorare la produttività nei mesi rimanenti per salire nella classifica.`;\n    }\n    return analysis;\n  }, [availableYears]);\n  const formatChartData = useCallback(() => {\n    const chartData = [];\n    const calculateAverageForMonth = month => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return Math.round(sum / relevantYears.length);\n    };\n    for (let month = 0; month < 12; month++) {\n      const monthData = {\n        month: getMonthName(month + 1)\n      };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth - 1) {\n            // Dati reali per i mesi passati\n            monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n            monthData[`${year}IsPrediction`] = false;\n          } else {\n            // Previsione per il mese corrente e i mesi futuri\n            monthData[year] = calculateAverageForMonth(month);\n            monthData[`${year}IsPrediction`] = true;\n          }\n        } else {\n          // Dati degli anni passati\n          monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  }, [allYearsData, availableYears, currentYear, currentMonth]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const yearsData = {};\n      for (const year of availableYears) {\n        yearsData[year] = await getYearlyData(year);\n      }\n      setAllYearsData(yearsData);\n      setYearConclusions(generateYearConclusions(currentYear, currentMonth, yearsData, yearsData));\n      setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n    };\n    fetchData();\n  }, [currentYear, currentMonth, availableYears, generateYearConclusions, makePrediction]);\n  const chartData = useMemo(() => formatChartData(), [formatChartData]);\n  return /*#__PURE__*/_jsxDEV(ViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(ViewContent, {\n      children: [/*#__PURE__*/_jsxDEV(ViewTitle, {\n        children: \"Performance Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Trend annuale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this), availableYears.map((year, index) => {\n              const isCurrentYear = year === currentYear;\n              if (isCurrentYear) {\n                return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Line, {\n                    type: \"monotone\",\n                    dataKey: dataPoint => dataPoint[`${year}IsPrediction`] ? undefined : dataPoint[year],\n                    stroke: colorPalette[index],\n                    strokeWidth: 3,\n                    dot: false,\n                    connectNulls: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 411,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Line, {\n                    type: \"monotone\",\n                    dataKey: dataPoint => {\n                      if (dataPoint[`${year}IsPrediction`]) {\n                        return dataPoint[year];\n                      }\n                      // Restituisce il valore dell'ultimo mese reale per connettere le linee\n                      const lastRealMonth = chartData.findIndex(d => d[`${year}IsPrediction`]) - 1;\n                      return dataPoint === chartData[lastRealMonth] ? dataPoint[year] : undefined;\n                    },\n                    stroke: colorPalette[index],\n                    strokeWidth: 3,\n                    strokeDasharray: \"5 5\",\n                    dot: false,\n                    connectNulls: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 420,\n                    columnNumber: 23\n                  }, this)]\n                }, year, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(Line, {\n                  type: \"monotone\",\n                  dataKey: year.toString(),\n                  stroke: colorPalette[index],\n                  strokeWidth: 1,\n                  dot: false\n                }, year, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 440,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LegendContainer, {\n          children: availableYears.map((year, index) => /*#__PURE__*/_jsxDEV(LegendItem, {\n            children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n              color: colorPalette[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: year === currentYear ? `${year} (linea continua: dati reali, tratteggiata: previsione)` : year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 17\n            }, this)]\n          }, year, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Conclusioni sull'anno in corso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: yearConclusions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Previsione per i prossimi mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: prediction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BackButton, {\n        onClick: () => setView('main'),\n        children: \"Torna alla Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 394,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceTrendView, \"rwUQ3UO/MOvxGUroQNocJOwjzlk=\");\n_c12 = PerformanceTrendView;\nexport default PerformanceTrendView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"ViewContainer\");\n$RefreshReg$(_c2, \"ViewContent\");\n$RefreshReg$(_c3, \"ViewTitle\");\n$RefreshReg$(_c4, \"ChartContainer\");\n$RefreshReg$(_c5, \"AnalysisSection\");\n$RefreshReg$(_c6, \"AnalysisTitle\");\n$RefreshReg$(_c7, \"AnalysisText\");\n$RefreshReg$(_c8, \"LegendContainer\");\n$RefreshReg$(_c9, \"LegendItem\");\n$RefreshReg$(_c10, \"LegendColor\");\n$RefreshReg$(_c11, \"BackButton\");\n$RefreshReg$(_c12, \"PerformanceTrendView\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","styled","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","getYearlyData","getCurrentYearAndMonth","getAvailableYears","jsxDEV","_jsxDEV","ViewContainer","div","_c","ViewContent","_c2","ViewTitle","h1","_c3","ChartContainer","_c4","AnalysisSection","_c5","AnalysisTitle","h2","_c6","AnalysisText","p","_c7","LegendContainer","_c8","LegendItem","_c9","LegendColor","props","color","_c10","BackButton","button","_c11","getMonthName","monthNumber","monthNames","formatNumber","num","Intl","NumberFormat","format","Math","round","generateColorPalette","numColors","hueStep","Array","from","length","_","i","PerformanceTrendView","setView","_s","allYearsData","setAllYearsData","yearConclusions","setYearConclusions","prediction","setPrediction","availableYears","map","y","parseInt","value","colorPalette","currentYear","currentMonth","analyzeTrend","monthData","trendWindow","recentMonths","slice","filter","m","undefined","slopes","push","averageSlope","reduce","a","b","slopeVariability","sqrt","s","pow","abs","calculateVolatility","data","validData","d","mean","squaredDiffs","generateYearConclusions","year","yearData","month","yearToAnalyze","currentYearData","totalTurni","Object","values","sum","totaleTurni","monthsWithData","averageMonthlyTurni","previousYearsData","entries","yearTotal","avgPreviousYears","monthlyTurni","trend","volatility","volatilityPercentage","analysis","min","quarterlyData","quarterlyAverages","q","quarters","forEach","avg","index","percentDiff","makePrediction","futurePredictions","totalEffectiveTurni","totalPredictedTurni","yearsCount","averageTurni","totalComplessivo","productivityRanking","yearTotalTurni","sort","join","item","currentYearRank","findIndex","formatChartData","chartData","calculateAverageForMonth","relevantYears","acc","fetchData","yearsData","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","isCurrentYear","Fragment","type","dataPoint","stroke","strokeWidth","dot","connectNulls","lastRealMonth","toString","onClick","_c12","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { \n  getYearlyData, \n  getCurrentYearAndMonth,\n  getAvailableYears\n} from './data';\n\n// Styled components\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\nconst getMonthName = (monthNumber) => {\n  const monthNames = [\n    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n  ];\n  return monthNames[monthNumber - 1];\n};\n\nconst formatNumber = (num) => new Intl.NumberFormat('it-IT').format(Math.round(num));\n\nconst generateColorPalette = (numColors) => {\n  const hueStep = 360 / numColors;\n  return Array.from({ length: numColors }, (_, i) => \n    `hsl(${i * hueStep}, 70%, 50%)`\n  );\n};\n\nconst PerformanceTrendView = ({ setView }) => {\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearConclusions, setYearConclusions] = useState('');\n  const [prediction, setPrediction] = useState('');\n\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const { currentYear, currentMonth } = getCurrentYearAndMonth();\n\n  const analyzeTrend = useCallback((monthData) => {\n    const trendWindow = 6; // Analizziamo gli ultimi 6 mesi\n    const recentMonths = monthData.slice(-trendWindow).filter(m => m !== undefined);\n    \n    if (recentMonths.length < 3) return \"non determinabile (dati insufficienti)\";\n\n    const slopes = [];\n    for (let i = 1; i < recentMonths.length; i++) {\n      slopes.push(recentMonths[i] - recentMonths[i-1]);\n    }\n\n    const averageSlope = slopes.reduce((a, b) => a + b, 0) / slopes.length;\n    const slopeVariability = Math.sqrt(slopes.map(s => Math.pow(s - averageSlope, 2)).reduce((a, b) => a + b, 0) / slopes.length);\n\n    if (Math.abs(averageSlope) < slopeVariability) {\n      return \"stabile\";\n    } else if (averageSlope > 0) {\n      return averageSlope > 2 * slopeVariability ? \"fortemente crescente\" : \"leggermente crescente\";\n    } else {\n      return averageSlope < -2 * slopeVariability ? \"fortemente decrescente\" : \"leggermente decrescente\";\n    }\n  }, []);\n\n  const calculateVolatility = useCallback((data) => {\n    const validData = data.filter(d => d !== undefined);\n    const mean = validData.reduce((a, b) => a + b, 0) / validData.length;\n    const squaredDiffs = validData.map(d => Math.pow(d - mean, 2));\n    return Math.sqrt(squaredDiffs.reduce((a, b) => a + b, 0) / validData.length);\n  }, []);\n\n  const generateYearConclusions = useCallback((year, currentMonth, yearData, allYearsData) => {\n    const month = currentMonth > 1 ? currentMonth - 1 : 12;\n    const yearToAnalyze = month === 12 ? year - 1 : year;\n    const currentYearData = yearData[yearToAnalyze] || {};\n    \n    const totalTurni = Object.values(currentYearData)\n      .slice(0, month)\n      .reduce((sum, monthData) => sum + (monthData?.totaleTurni || 0), 0);\n    \n    const monthsWithData = Object.values(currentYearData)\n      .slice(0, month)\n      .filter(monthData => monthData && monthData.totaleTurni > 0).length;\n    \n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n  \n    // Calcolo delle statistiche per gli anni precedenti\n    const previousYearsData = Object.entries(allYearsData)\n      .filter(([y]) => parseInt(y) < yearToAnalyze)\n      .map(([year, data]) => {\n        const yearTotal = Object.values(data)\n          .slice(0, month)\n          .reduce((sum, monthData) => sum + (monthData?.totaleTurni || 0), 0);\n        return { year: parseInt(year), totalTurni: yearTotal };\n      });\n  \n    const avgPreviousYears = previousYearsData.reduce((sum, y) => sum + y.totalTurni, 0) / previousYearsData.length;\n    \n    const monthlyTurni = Object.values(currentYearData)\n      .slice(0, month)\n      .map(m => m ? m.totaleTurni : undefined);\n\n    const trend = analyzeTrend(monthlyTurni);\n    const volatility = calculateVolatility(monthlyTurni);\n    const volatilityPercentage = (volatility / averageMonthlyTurni) * 100;\n\n    let analysis = `Analisi dettagliata dell'anno ${yearToAnalyze} (fino a ${getMonthName(month)}):\\n\\n`;\n    analysis += `Nel periodo analizzato, sono stati effettuati un totale di ${formatNumber(totalTurni)} turni, `;\n    analysis += `con una media mensile di ${formatNumber(averageMonthlyTurni)} turni. `;\n    \n    if (totalTurni > avgPreviousYears) {\n      analysis += `Questo rappresenta un aumento del ${formatNumber(((totalTurni / avgPreviousYears) - 1) * 100)}% `;\n      analysis += `rispetto alla media degli anni precedenti nello stesso periodo. `;\n    } else if (totalTurni < avgPreviousYears) {\n      analysis += `Questo rappresenta una diminuzione del ${formatNumber(((avgPreviousYears / totalTurni) - 1) * 100)}% `;\n      analysis += `rispetto alla media degli anni precedenti nello stesso periodo. `;\n    } else {\n      analysis += `Questo è in linea con la media degli anni precedenti nello stesso periodo. `;\n    }\n\n    analysis += `\\n\\nAnalisi approfondita del trend:\\n`;\n    analysis += `Il trend degli ultimi ${Math.min(6, monthsWithData)} mesi è ${trend}. `;\n\n    switch (trend) {\n      case \"fortemente crescente\":\n        analysis += `Questo indica un significativo aumento dell'attività, che potrebbe richiedere un'espansione delle risorse o un'ottimizzazione dei processi per gestire la crescente domanda. `;\n        break;\n      case \"leggermente crescente\":\n        analysis += `C'è un leggero aumento dell'attività, che potrebbe indicare una graduale espansione del business o un miglioramento delle condizioni di mercato. `;\n        break;\n      case \"stabile\":\n        analysis += `L'attività mostra una notevole stabilità, suggerendo una domanda costante e potenzialmente prevedibile. `;\n        break;\n      case \"leggermente decrescente\":\n        analysis += `Si osserva una leggera diminuzione dell'attività, che potrebbe richiedere un'analisi delle cause e possibili azioni correttive. `;\n        break;\n      case \"fortemente decrescente\":\n        analysis += `C'è una significativa diminuzione dell'attività, che richiede un'attenzione immediata e potenziali interventi strategici. `;\n        break;\n      default:\n        analysis += `Non è possibile determinare un trend chiaro con i dati disponibili. `;\n    }\n\n    analysis += `\\nLa volatilità mensile è di ${formatNumber(volatility)} turni, che rappresenta il ${formatNumber(volatilityPercentage)}% della media mensile. `;\n    \n    if (volatilityPercentage > 30) {\n      analysis += `Questa alta volatilità suggerisce una significativa variabilità mese per mese, che potrebbe rendere più difficile la pianificazione delle risorse. `;\n    } else if (volatilityPercentage > 15) {\n      analysis += `Questa moderata volatilità indica alcune fluttuazioni mensili, ma generalmente gestibili con una pianificazione flessibile. `;\n    } else {\n      analysis += `Questa bassa volatilità suggerisce una relativa stabilità mese per mese, facilitando la pianificazione delle risorse. `;\n    }\n\n    // Analisi stagionale\n    analysis += `\\n\\nAnalisi stagionale:\\n`;\n    const quarterlyData = [\n      monthlyTurni.slice(0, 3).filter(m => m !== undefined),\n      monthlyTurni.slice(3, 6).filter(m => m !== undefined),\n      monthlyTurni.slice(6, 9).filter(m => m !== undefined),\n      monthlyTurni.slice(9, 12).filter(m => m !== undefined)\n    ];\n\n    const quarterlyAverages = quarterlyData.map(q => q.length > 0 ? q.reduce((a, b) => a + b, 0) / q.length : null);\n    \n    const quarters = ['primo', 'secondo', 'terzo', 'quarto'];\n    quarterlyAverages.forEach((avg, index) => {\n      if (avg !== null) {\n        const percentDiff = ((avg - averageMonthlyTurni) / averageMonthlyTurni) * 100;\n        analysis += `Il ${quarters[index]} trimestre mostra una media di ${formatNumber(avg)} turni al mese, `;\n        analysis += `${percentDiff > 0 ? 'superiore' : 'inferiore'} del ${formatNumber(Math.abs(percentDiff))}% rispetto alla media annuale.\\n`;\n      }\n    });\n\n    return analysis;\n  }, [analyzeTrend, calculateVolatility]);\n\n  const makePrediction = useCallback((year, month, allYearsData) => {\n    let analysis = '';\n    const futurePredictions = [];\n    let totalEffectiveTurni = 0;\n    let totalPredictedTurni = 0;\n  \n    // Calcolo dei turni effettivi e previsti per l'anno corrente\n    for (let i = 0; i < 12; i++) {\n      const monthData = allYearsData[year][i];\n      if (i < month - 1) {\n        // Turni effettivi per i mesi passati\n        totalEffectiveTurni += monthData ? monthData.totaleTurni : 0;\n      } else {\n        // Previsione per i mesi rimanenti\n        let totalTurni = 0;\n        let yearsCount = 0;\n        availableYears.forEach(y => {\n          if (y !== 2020 && y !== year) {\n            const yearData = allYearsData[y];\n            if (yearData && yearData[i] && yearData[i].totaleTurni > 0) {\n              totalTurni += yearData[i].totaleTurni;\n              yearsCount++;\n            }\n          }\n        });\n        if (yearsCount > 0) {\n          const averageTurni = Math.round(totalTurni / yearsCount);\n          totalPredictedTurni += averageTurni;\n          futurePredictions.push(`• ${getMonthName(i + 1)}: ${formatNumber(averageTurni)} turni`);\n        }\n      }\n    }\n  \n    // Calcolo del totale complessivo\n    const totalComplessivo = totalEffectiveTurni + totalPredictedTurni;\n  \n    // Creazione della classifica di produttività\n    const productivityRanking = availableYears\n      .map(y => {\n        if (y === year) {\n          return { year: y, totalTurni: totalComplessivo };\n        } else {\n            const yearTotalTurni = Object.values(allYearsData[y]).reduce((sum, month) => sum + (month ? month.totaleTurni : 0), 0);\n          return { year: y, totalTurni: yearTotalTurni };\n        }\n      })\n      .sort((a, b) => b.totalTurni - a.totalTurni);\n  \n    // Composizione dell'analisi\n    analysis += `Turni effettivi (fino a ${getMonthName(month - 1)}): ${formatNumber(totalEffectiveTurni)}\\n`;\n    analysis += `Turni previsti (da ${getMonthName(month)} a Dicembre): ${formatNumber(totalPredictedTurni)}\\n`;\n    analysis += `Totale complessivo stimato per l'anno ${year}: ${formatNumber(totalComplessivo)}\\n\\n`;\n  \n    analysis += `Previsione per i mesi rimanenti (in base alla media degli anni precedenti):\\n${futurePredictions.join('\\n')}\\n\\n`;\n  \n    analysis += `Classifica di produttività (totale turni per anno):\\n`;\n    productivityRanking.forEach((item, index) => {\n      analysis += `${index + 1}. ${item.year}: ${formatNumber(item.totalTurni)} turni`;\n      if (item.year === year) {\n        analysis += ` (proiezione)`;\n      }\n      analysis += '\\n';\n    });\n  \n    // Aggiungi un commento sulla posizione dell'anno corrente nella classifica\n    const currentYearRank = productivityRanking.findIndex(item => item.year === year) + 1;\n    analysis += `\\nL'anno ${year} si posiziona attualmente al ${currentYearRank}° posto nella classifica di produttività.`;\n    \n    if (currentYearRank === 1) {\n      analysis += ` Questo suggerisce un anno particolarmente produttivo, potenzialmente superando i risultati degli anni precedenti.`;\n    } else if (currentYearRank <= 3) {\n      analysis += ` Questa è una performance solida, indicando un anno di buona produttività.`;\n    } else {\n      analysis += ` C'è potenziale per migliorare la produttività nei mesi rimanenti per salire nella classifica.`;\n    }\n  \n    return analysis;\n  }, [availableYears]);\n\n  const formatChartData = useCallback(() => {\n    const chartData = [];\n    \n    const calculateAverageForMonth = (month) => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return Math.round(sum / relevantYears.length);\n    };\n  \n    for (let month = 0; month < 12; month++) {\n      const monthData = { month: getMonthName(month + 1) };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth - 1) {\n            // Dati reali per i mesi passati\n            monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n            monthData[`${year}IsPrediction`] = false;\n          } else {\n            // Previsione per il mese corrente e i mesi futuri\n            monthData[year] = calculateAverageForMonth(month);\n            monthData[`${year}IsPrediction`] = true;\n          }\n        } else {\n          // Dati degli anni passati\n          monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  }, [allYearsData, availableYears, currentYear, currentMonth]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const yearsData = {};\n      for (const year of availableYears) {\n        yearsData[year] = await getYearlyData(year);\n      }\n      setAllYearsData(yearsData);\n\n      setYearConclusions(generateYearConclusions(currentYear, currentMonth, yearsData, yearsData));\n      setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n    };\n\n    fetchData();\n  }, [currentYear, currentMonth, availableYears, generateYearConclusions, makePrediction]);\n\n  const chartData = useMemo(() => formatChartData(), [formatChartData]);\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <ViewTitle>Performance Trend</ViewTitle>\n        <ChartContainer>\n          <AnalysisTitle>Trend annuale</AnalysisTitle>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip />\n              {availableYears.map((year, index) => {\n                const isCurrentYear = year === currentYear;\n                if (isCurrentYear) {\n                  return (\n                    <React.Fragment key={year}>\n                      {/* Linea per i dati reali dell'anno corrente */}\n                      <Line\n                        type=\"monotone\"\n                        dataKey={(dataPoint) => dataPoint[`${year}IsPrediction`] ? undefined : dataPoint[year]}\n                        stroke={colorPalette[index]}\n                        strokeWidth={3}\n                        dot={false}\n                        connectNulls={true}\n                      />\n                      {/* Linea tratteggiata per i dati previsionali dell'anno corrente */}\n                      <Line\n                        type=\"monotone\"\n                        dataKey={(dataPoint) => {\n                          if (dataPoint[`${year}IsPrediction`]) {\n                            return dataPoint[year];\n                          }\n                          // Restituisce il valore dell'ultimo mese reale per connettere le linee\n                          const lastRealMonth = chartData.findIndex(d => d[`${year}IsPrediction`]) - 1;\n                          return dataPoint === chartData[lastRealMonth] ? dataPoint[year] : undefined;\n                        }}\n                        stroke={colorPalette[index]}\n                        strokeWidth={3}\n                        strokeDasharray=\"5 5\"\n                        dot={false}\n                        connectNulls={true}\n                      />\n                    </React.Fragment>\n                  );\n                } else {\n                  return (\n                    <Line\n                      key={year}\n                      type=\"monotone\"\n                      dataKey={year.toString()}\n                      stroke={colorPalette[index]}\n                      strokeWidth={1}\n                      dot={false}\n                    />\n                  );\n                }\n              })}\n            </LineChart>\n          </ResponsiveContainer>\n          <LegendContainer>\n            {availableYears.map((year, index) => (\n              <LegendItem key={year}>\n                <LegendColor color={colorPalette[index]} />\n                <span>{year === currentYear ? `${year} (linea continua: dati reali, tratteggiata: previsione)` : year}</span>\n              </LegendItem>\n            ))}\n          </LegendContainer>\n        </ChartContainer>\n        <AnalysisSection>\n          <AnalysisTitle>Conclusioni sull'anno in corso</AnalysisTitle>\n          <AnalysisText>{yearConclusions}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Previsione per i prossimi mesi</AnalysisTitle>\n          <AnalysisText>{prediction}</AnalysisText>\n        </AnalysisSection>\n        <BackButton onClick={() => setView('main')}>Torna alla Dashboard</BackButton>\n      </ViewContent>\n    </ViewContainer>\n  );\n};\n\nexport default PerformanceTrendView;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AACxE,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,mBAAmB,QAAQ,UAAU;AACrG,SACEC,aAAa,EACbC,sBAAsB,EACtBC,iBAAiB,QACZ,QAAQ;;AAEf;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAGb,MAAM,CAACc,GAAG;AAChC;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,aAAa;AAOnB,MAAMG,WAAW,GAAGhB,MAAM,CAACc,GAAG;AAC9B;AACA;AACA,CAAC;AAACG,GAAA,GAHID,WAAW;AAKjB,MAAME,SAAS,GAAGlB,MAAM,CAACmB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GANIF,SAAS;AAQf,MAAMG,cAAc,GAAGrB,MAAM,CAACc,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA,CAAC;AAACQ,GAAA,GANID,cAAc;AAQpB,MAAME,eAAe,GAAGvB,MAAM,CAACc,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA,CAAC;AAACU,GAAA,GANID,eAAe;AAQrB,MAAME,aAAa,GAAGzB,MAAM,CAAC0B,EAAE;AAC/B;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GALIF,aAAa;AAOnB,MAAMG,YAAY,GAAG5B,MAAM,CAAC6B,CAAC;AAC7B;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GALIF,YAAY;AAOlB,MAAMG,eAAe,GAAG/B,MAAM,CAACc,GAAG;AAClC;AACA;AACA;AACA;AACA,CAAC;AAACkB,GAAA,GALID,eAAe;AAOrB,MAAME,UAAU,GAAGjC,MAAM,CAACc,GAAG;AAC7B;AACA;AACA;AACA;AACA,CAAC;AAACoB,GAAA,GALID,UAAU;AAOhB,MAAME,WAAW,GAAGnC,MAAM,CAACc,GAAG;AAC9B;AACA;AACA;AACA;AACA,sBAAsBsB,KAAK,IAAIA,KAAK,CAACC,KAAK;AAC1C,CAAC;AAACC,IAAA,GANIH,WAAW;AAQjB,MAAMI,UAAU,GAAGvC,MAAM,CAACwC,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAC,IAAA,GAhBMF,UAAU;AAiBhB,MAAMG,YAAY,GAAIC,WAAW,IAAK;EACpC,MAAMC,UAAU,GAAG,CACjB,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAC5D,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CACnE;EACD,OAAOA,UAAU,CAACD,WAAW,GAAG,CAAC,CAAC;AACpC,CAAC;AAED,MAAME,YAAY,GAAIC,GAAG,IAAK,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,CAAC,CAACC,MAAM,CAACC,IAAI,CAACC,KAAK,CAACL,GAAG,CAAC,CAAC;AAEpF,MAAMM,oBAAoB,GAAIC,SAAS,IAAK;EAC1C,MAAMC,OAAO,GAAG,GAAG,GAAGD,SAAS;EAC/B,OAAOE,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEJ;EAAU,CAAC,EAAE,CAACK,CAAC,EAAEC,CAAC,KAC5C,OAAOA,CAAC,GAAGL,OAAO,aACpB,CAAC;AACH,CAAC;AAED,MAAMM,oBAAoB,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGpE,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAACqE,eAAe,EAAEC,kBAAkB,CAAC,GAAGtE,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACuE,UAAU,EAAEC,aAAa,CAAC,GAAGxE,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMyE,cAAc,GAAGvE,OAAO,CAAC,MAAMY,iBAAiB,CAAC,CAAC,CAAC4D,GAAG,CAACC,CAAC,IAAIC,QAAQ,CAACD,CAAC,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EACzF,MAAMC,YAAY,GAAG5E,OAAO,CAAC,MAAMsD,oBAAoB,CAACiB,cAAc,CAACZ,MAAM,CAAC,EAAE,CAACY,cAAc,CAAC,CAAC;EACjG,MAAM;IAAEM,WAAW;IAAEC;EAAa,CAAC,GAAGnE,sBAAsB,CAAC,CAAC;EAE9D,MAAMoE,YAAY,GAAG9E,WAAW,CAAE+E,SAAS,IAAK;IAC9C,MAAMC,WAAW,GAAG,CAAC,CAAC,CAAC;IACvB,MAAMC,YAAY,GAAGF,SAAS,CAACG,KAAK,CAAC,CAACF,WAAW,CAAC,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKC,SAAS,CAAC;IAE/E,IAAIJ,YAAY,CAACvB,MAAM,GAAG,CAAC,EAAE,OAAO,wCAAwC;IAE5E,MAAM4B,MAAM,GAAG,EAAE;IACjB,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqB,YAAY,CAACvB,MAAM,EAAEE,CAAC,EAAE,EAAE;MAC5C0B,MAAM,CAACC,IAAI,CAACN,YAAY,CAACrB,CAAC,CAAC,GAAGqB,YAAY,CAACrB,CAAC,GAAC,CAAC,CAAC,CAAC;IAClD;IAEA,MAAM4B,YAAY,GAAGF,MAAM,CAACG,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAGL,MAAM,CAAC5B,MAAM;IACtE,MAAMkC,gBAAgB,GAAGzC,IAAI,CAAC0C,IAAI,CAACP,MAAM,CAACf,GAAG,CAACuB,CAAC,IAAI3C,IAAI,CAAC4C,GAAG,CAACD,CAAC,GAAGN,YAAY,EAAE,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAGL,MAAM,CAAC5B,MAAM,CAAC;IAE7H,IAAIP,IAAI,CAAC6C,GAAG,CAACR,YAAY,CAAC,GAAGI,gBAAgB,EAAE;MAC7C,OAAO,SAAS;IAClB,CAAC,MAAM,IAAIJ,YAAY,GAAG,CAAC,EAAE;MAC3B,OAAOA,YAAY,GAAG,CAAC,GAAGI,gBAAgB,GAAG,sBAAsB,GAAG,uBAAuB;IAC/F,CAAC,MAAM;MACL,OAAOJ,YAAY,GAAG,CAAC,CAAC,GAAGI,gBAAgB,GAAG,wBAAwB,GAAG,yBAAyB;IACpG;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,mBAAmB,GAAGjG,WAAW,CAAEkG,IAAI,IAAK;IAChD,MAAMC,SAAS,GAAGD,IAAI,CAACf,MAAM,CAACiB,CAAC,IAAIA,CAAC,KAAKf,SAAS,CAAC;IACnD,MAAMgB,IAAI,GAAGF,SAAS,CAACV,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAGQ,SAAS,CAACzC,MAAM;IACpE,MAAM4C,YAAY,GAAGH,SAAS,CAAC5B,GAAG,CAAC6B,CAAC,IAAIjD,IAAI,CAAC4C,GAAG,CAACK,CAAC,GAAGC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC9D,OAAOlD,IAAI,CAAC0C,IAAI,CAACS,YAAY,CAACb,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAGQ,SAAS,CAACzC,MAAM,CAAC;EAC9E,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM6C,uBAAuB,GAAGvG,WAAW,CAAC,CAACwG,IAAI,EAAE3B,YAAY,EAAE4B,QAAQ,EAAEzC,YAAY,KAAK;IAC1F,MAAM0C,KAAK,GAAG7B,YAAY,GAAG,CAAC,GAAGA,YAAY,GAAG,CAAC,GAAG,EAAE;IACtD,MAAM8B,aAAa,GAAGD,KAAK,KAAK,EAAE,GAAGF,IAAI,GAAG,CAAC,GAAGA,IAAI;IACpD,MAAMI,eAAe,GAAGH,QAAQ,CAACE,aAAa,CAAC,IAAI,CAAC,CAAC;IAErD,MAAME,UAAU,GAAGC,MAAM,CAACC,MAAM,CAACH,eAAe,CAAC,CAC9C1B,KAAK,CAAC,CAAC,EAAEwB,KAAK,CAAC,CACfjB,MAAM,CAAC,CAACuB,GAAG,EAAEjC,SAAS,KAAKiC,GAAG,IAAI,CAAAjC,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEkC,WAAW,KAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IAErE,MAAMC,cAAc,GAAGJ,MAAM,CAACC,MAAM,CAACH,eAAe,CAAC,CAClD1B,KAAK,CAAC,CAAC,EAAEwB,KAAK,CAAC,CACfvB,MAAM,CAACJ,SAAS,IAAIA,SAAS,IAAIA,SAAS,CAACkC,WAAW,GAAG,CAAC,CAAC,CAACvD,MAAM;IAErE,MAAMyD,mBAAmB,GAAGD,cAAc,GAAG,CAAC,GAAGL,UAAU,GAAGK,cAAc,GAAG,CAAC;;IAEhF;IACA,MAAME,iBAAiB,GAAGN,MAAM,CAACO,OAAO,CAACrD,YAAY,CAAC,CACnDmB,MAAM,CAAC,CAAC,CAACX,CAAC,CAAC,KAAKC,QAAQ,CAACD,CAAC,CAAC,GAAGmC,aAAa,CAAC,CAC5CpC,GAAG,CAAC,CAAC,CAACiC,IAAI,EAAEN,IAAI,CAAC,KAAK;MACrB,MAAMoB,SAAS,GAAGR,MAAM,CAACC,MAAM,CAACb,IAAI,CAAC,CAClChB,KAAK,CAAC,CAAC,EAAEwB,KAAK,CAAC,CACfjB,MAAM,CAAC,CAACuB,GAAG,EAAEjC,SAAS,KAAKiC,GAAG,IAAI,CAAAjC,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEkC,WAAW,KAAI,CAAC,CAAC,EAAE,CAAC,CAAC;MACrE,OAAO;QAAET,IAAI,EAAE/B,QAAQ,CAAC+B,IAAI,CAAC;QAAEK,UAAU,EAAES;MAAU,CAAC;IACxD,CAAC,CAAC;IAEJ,MAAMC,gBAAgB,GAAGH,iBAAiB,CAAC3B,MAAM,CAAC,CAACuB,GAAG,EAAExC,CAAC,KAAKwC,GAAG,GAAGxC,CAAC,CAACqC,UAAU,EAAE,CAAC,CAAC,GAAGO,iBAAiB,CAAC1D,MAAM;IAE/G,MAAM8D,YAAY,GAAGV,MAAM,CAACC,MAAM,CAACH,eAAe,CAAC,CAChD1B,KAAK,CAAC,CAAC,EAAEwB,KAAK,CAAC,CACfnC,GAAG,CAACa,CAAC,IAAIA,CAAC,GAAGA,CAAC,CAAC6B,WAAW,GAAG5B,SAAS,CAAC;IAE1C,MAAMoC,KAAK,GAAG3C,YAAY,CAAC0C,YAAY,CAAC;IACxC,MAAME,UAAU,GAAGzB,mBAAmB,CAACuB,YAAY,CAAC;IACpD,MAAMG,oBAAoB,GAAID,UAAU,GAAGP,mBAAmB,GAAI,GAAG;IAErE,IAAIS,QAAQ,GAAG,iCAAiCjB,aAAa,YAAYhE,YAAY,CAAC+D,KAAK,CAAC,QAAQ;IACpGkB,QAAQ,IAAI,8DAA8D9E,YAAY,CAAC+D,UAAU,CAAC,UAAU;IAC5Ge,QAAQ,IAAI,4BAA4B9E,YAAY,CAACqE,mBAAmB,CAAC,UAAU;IAEnF,IAAIN,UAAU,GAAGU,gBAAgB,EAAE;MACjCK,QAAQ,IAAI,qCAAqC9E,YAAY,CAAC,CAAE+D,UAAU,GAAGU,gBAAgB,GAAI,CAAC,IAAI,GAAG,CAAC,IAAI;MAC9GK,QAAQ,IAAI,kEAAkE;IAChF,CAAC,MAAM,IAAIf,UAAU,GAAGU,gBAAgB,EAAE;MACxCK,QAAQ,IAAI,0CAA0C9E,YAAY,CAAC,CAAEyE,gBAAgB,GAAGV,UAAU,GAAI,CAAC,IAAI,GAAG,CAAC,IAAI;MACnHe,QAAQ,IAAI,kEAAkE;IAChF,CAAC,MAAM;MACLA,QAAQ,IAAI,6EAA6E;IAC3F;IAEAA,QAAQ,IAAI,uCAAuC;IACnDA,QAAQ,IAAI,yBAAyBzE,IAAI,CAAC0E,GAAG,CAAC,CAAC,EAAEX,cAAc,CAAC,WAAWO,KAAK,IAAI;IAEpF,QAAQA,KAAK;MACX,KAAK,sBAAsB;QACzBG,QAAQ,IAAI,+KAA+K;QAC3L;MACF,KAAK,uBAAuB;QAC1BA,QAAQ,IAAI,mJAAmJ;QAC/J;MACF,KAAK,SAAS;QACZA,QAAQ,IAAI,0GAA0G;QACtH;MACF,KAAK,yBAAyB;QAC5BA,QAAQ,IAAI,kIAAkI;QAC9I;MACF,KAAK,wBAAwB;QAC3BA,QAAQ,IAAI,4HAA4H;QACxI;MACF;QACEA,QAAQ,IAAI,sEAAsE;IACtF;IAEAA,QAAQ,IAAI,gCAAgC9E,YAAY,CAAC4E,UAAU,CAAC,8BAA8B5E,YAAY,CAAC6E,oBAAoB,CAAC,yBAAyB;IAE7J,IAAIA,oBAAoB,GAAG,EAAE,EAAE;MAC7BC,QAAQ,IAAI,qJAAqJ;IACnK,CAAC,MAAM,IAAID,oBAAoB,GAAG,EAAE,EAAE;MACpCC,QAAQ,IAAI,8HAA8H;IAC5I,CAAC,MAAM;MACLA,QAAQ,IAAI,wHAAwH;IACtI;;IAEA;IACAA,QAAQ,IAAI,2BAA2B;IACvC,MAAME,aAAa,GAAG,CACpBN,YAAY,CAACtC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKC,SAAS,CAAC,EACrDmC,YAAY,CAACtC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKC,SAAS,CAAC,EACrDmC,YAAY,CAACtC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKC,SAAS,CAAC,EACrDmC,YAAY,CAACtC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKC,SAAS,CAAC,CACvD;IAED,MAAM0C,iBAAiB,GAAGD,aAAa,CAACvD,GAAG,CAACyD,CAAC,IAAIA,CAAC,CAACtE,MAAM,GAAG,CAAC,GAAGsE,CAAC,CAACvC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAGqC,CAAC,CAACtE,MAAM,GAAG,IAAI,CAAC;IAE/G,MAAMuE,QAAQ,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC;IACxDF,iBAAiB,CAACG,OAAO,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;MACxC,IAAID,GAAG,KAAK,IAAI,EAAE;QAChB,MAAME,WAAW,GAAI,CAACF,GAAG,GAAGhB,mBAAmB,IAAIA,mBAAmB,GAAI,GAAG;QAC7ES,QAAQ,IAAI,MAAMK,QAAQ,CAACG,KAAK,CAAC,kCAAkCtF,YAAY,CAACqF,GAAG,CAAC,kBAAkB;QACtGP,QAAQ,IAAI,GAAGS,WAAW,GAAG,CAAC,GAAG,WAAW,GAAG,WAAW,QAAQvF,YAAY,CAACK,IAAI,CAAC6C,GAAG,CAACqC,WAAW,CAAC,CAAC,kCAAkC;MACzI;IACF,CAAC,CAAC;IAEF,OAAOT,QAAQ;EACjB,CAAC,EAAE,CAAC9C,YAAY,EAAEmB,mBAAmB,CAAC,CAAC;EAEvC,MAAMqC,cAAc,GAAGtI,WAAW,CAAC,CAACwG,IAAI,EAAEE,KAAK,EAAE1C,YAAY,KAAK;IAChE,IAAI4D,QAAQ,GAAG,EAAE;IACjB,MAAMW,iBAAiB,GAAG,EAAE;IAC5B,IAAIC,mBAAmB,GAAG,CAAC;IAC3B,IAAIC,mBAAmB,GAAG,CAAC;;IAE3B;IACA,KAAK,IAAI7E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3B,MAAMmB,SAAS,GAAGf,YAAY,CAACwC,IAAI,CAAC,CAAC5C,CAAC,CAAC;MACvC,IAAIA,CAAC,GAAG8C,KAAK,GAAG,CAAC,EAAE;QACjB;QACA8B,mBAAmB,IAAIzD,SAAS,GAAGA,SAAS,CAACkC,WAAW,GAAG,CAAC;MAC9D,CAAC,MAAM;QACL;QACA,IAAIJ,UAAU,GAAG,CAAC;QAClB,IAAI6B,UAAU,GAAG,CAAC;QAClBpE,cAAc,CAAC4D,OAAO,CAAC1D,CAAC,IAAI;UAC1B,IAAIA,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAKgC,IAAI,EAAE;YAC5B,MAAMC,QAAQ,GAAGzC,YAAY,CAACQ,CAAC,CAAC;YAChC,IAAIiC,QAAQ,IAAIA,QAAQ,CAAC7C,CAAC,CAAC,IAAI6C,QAAQ,CAAC7C,CAAC,CAAC,CAACqD,WAAW,GAAG,CAAC,EAAE;cAC1DJ,UAAU,IAAIJ,QAAQ,CAAC7C,CAAC,CAAC,CAACqD,WAAW;cACrCyB,UAAU,EAAE;YACd;UACF;QACF,CAAC,CAAC;QACF,IAAIA,UAAU,GAAG,CAAC,EAAE;UAClB,MAAMC,YAAY,GAAGxF,IAAI,CAACC,KAAK,CAACyD,UAAU,GAAG6B,UAAU,CAAC;UACxDD,mBAAmB,IAAIE,YAAY;UACnCJ,iBAAiB,CAAChD,IAAI,CAAC,KAAK5C,YAAY,CAACiB,CAAC,GAAG,CAAC,CAAC,KAAKd,YAAY,CAAC6F,YAAY,CAAC,QAAQ,CAAC;QACzF;MACF;IACF;;IAEA;IACA,MAAMC,gBAAgB,GAAGJ,mBAAmB,GAAGC,mBAAmB;;IAElE;IACA,MAAMI,mBAAmB,GAAGvE,cAAc,CACvCC,GAAG,CAACC,CAAC,IAAI;MACR,IAAIA,CAAC,KAAKgC,IAAI,EAAE;QACd,OAAO;UAAEA,IAAI,EAAEhC,CAAC;UAAEqC,UAAU,EAAE+B;QAAiB,CAAC;MAClD,CAAC,MAAM;QACH,MAAME,cAAc,GAAGhC,MAAM,CAACC,MAAM,CAAC/C,YAAY,CAACQ,CAAC,CAAC,CAAC,CAACiB,MAAM,CAAC,CAACuB,GAAG,EAAEN,KAAK,KAAKM,GAAG,IAAIN,KAAK,GAAGA,KAAK,CAACO,WAAW,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QACxH,OAAO;UAAET,IAAI,EAAEhC,CAAC;UAAEqC,UAAU,EAAEiC;QAAe,CAAC;MAChD;IACF,CAAC,CAAC,CACDC,IAAI,CAAC,CAACrD,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACkB,UAAU,GAAGnB,CAAC,CAACmB,UAAU,CAAC;;IAE9C;IACAe,QAAQ,IAAI,2BAA2BjF,YAAY,CAAC+D,KAAK,GAAG,CAAC,CAAC,MAAM5D,YAAY,CAAC0F,mBAAmB,CAAC,IAAI;IACzGZ,QAAQ,IAAI,sBAAsBjF,YAAY,CAAC+D,KAAK,CAAC,iBAAiB5D,YAAY,CAAC2F,mBAAmB,CAAC,IAAI;IAC3Gb,QAAQ,IAAI,yCAAyCpB,IAAI,KAAK1D,YAAY,CAAC8F,gBAAgB,CAAC,MAAM;IAElGhB,QAAQ,IAAI,gFAAgFW,iBAAiB,CAACS,IAAI,CAAC,IAAI,CAAC,MAAM;IAE9HpB,QAAQ,IAAI,uDAAuD;IACnEiB,mBAAmB,CAACX,OAAO,CAAC,CAACe,IAAI,EAAEb,KAAK,KAAK;MAC3CR,QAAQ,IAAI,GAAGQ,KAAK,GAAG,CAAC,KAAKa,IAAI,CAACzC,IAAI,KAAK1D,YAAY,CAACmG,IAAI,CAACpC,UAAU,CAAC,QAAQ;MAChF,IAAIoC,IAAI,CAACzC,IAAI,KAAKA,IAAI,EAAE;QACtBoB,QAAQ,IAAI,eAAe;MAC7B;MACAA,QAAQ,IAAI,IAAI;IAClB,CAAC,CAAC;;IAEF;IACA,MAAMsB,eAAe,GAAGL,mBAAmB,CAACM,SAAS,CAACF,IAAI,IAAIA,IAAI,CAACzC,IAAI,KAAKA,IAAI,CAAC,GAAG,CAAC;IACrFoB,QAAQ,IAAI,YAAYpB,IAAI,gCAAgC0C,eAAe,2CAA2C;IAEtH,IAAIA,eAAe,KAAK,CAAC,EAAE;MACzBtB,QAAQ,IAAI,oHAAoH;IAClI,CAAC,MAAM,IAAIsB,eAAe,IAAI,CAAC,EAAE;MAC/BtB,QAAQ,IAAI,4EAA4E;IAC1F,CAAC,MAAM;MACLA,QAAQ,IAAI,gGAAgG;IAC9G;IAEA,OAAOA,QAAQ;EACjB,CAAC,EAAE,CAACtD,cAAc,CAAC,CAAC;EAEpB,MAAM8E,eAAe,GAAGpJ,WAAW,CAAC,MAAM;IACxC,MAAMqJ,SAAS,GAAG,EAAE;IAEpB,MAAMC,wBAAwB,GAAI5C,KAAK,IAAK;MAC1C,MAAM6C,aAAa,GAAGjF,cAAc,CAACa,MAAM,CAACqB,IAAI,IAAIA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK5B,WAAW,CAAC;MAC1F,MAAMoC,GAAG,GAAGuC,aAAa,CAAC9D,MAAM,CAAC,CAAC+D,GAAG,EAAEhD,IAAI,KAAK;QAC9C,MAAMC,QAAQ,GAAGzC,YAAY,CAACwC,IAAI,CAAC;QACnC,OAAOgD,GAAG,IAAI/C,QAAQ,IAAIA,QAAQ,CAACC,KAAK,CAAC,GAAGD,QAAQ,CAACC,KAAK,CAAC,CAACO,WAAW,GAAG,CAAC,CAAC;MAC9E,CAAC,EAAE,CAAC,CAAC;MACL,OAAO9D,IAAI,CAACC,KAAK,CAAC4D,GAAG,GAAGuC,aAAa,CAAC7F,MAAM,CAAC;IAC/C,CAAC;IAED,KAAK,IAAIgD,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,EAAE,EAAEA,KAAK,EAAE,EAAE;MACvC,MAAM3B,SAAS,GAAG;QAAE2B,KAAK,EAAE/D,YAAY,CAAC+D,KAAK,GAAG,CAAC;MAAE,CAAC;MACpDpC,cAAc,CAAC4D,OAAO,CAAC1B,IAAI,IAAI;QAC7B,MAAMC,QAAQ,GAAGzC,YAAY,CAACwC,IAAI,CAAC;QACnC,IAAIA,IAAI,KAAK5B,WAAW,EAAE;UACxB,IAAI8B,KAAK,GAAG7B,YAAY,GAAG,CAAC,EAAE;YAC5B;YACAE,SAAS,CAACyB,IAAI,CAAC,GAAGC,QAAQ,IAAIA,QAAQ,CAACC,KAAK,CAAC,GAAGvD,IAAI,CAACC,KAAK,CAACqD,QAAQ,CAACC,KAAK,CAAC,CAACO,WAAW,CAAC,GAAG,CAAC;YAC3FlC,SAAS,CAAC,GAAGyB,IAAI,cAAc,CAAC,GAAG,KAAK;UAC1C,CAAC,MAAM;YACL;YACAzB,SAAS,CAACyB,IAAI,CAAC,GAAG8C,wBAAwB,CAAC5C,KAAK,CAAC;YACjD3B,SAAS,CAAC,GAAGyB,IAAI,cAAc,CAAC,GAAG,IAAI;UACzC;QACF,CAAC,MAAM;UACL;UACAzB,SAAS,CAACyB,IAAI,CAAC,GAAGC,QAAQ,IAAIA,QAAQ,CAACC,KAAK,CAAC,GAAGvD,IAAI,CAACC,KAAK,CAACqD,QAAQ,CAACC,KAAK,CAAC,CAACO,WAAW,CAAC,GAAG,CAAC;QAC7F;MACF,CAAC,CAAC;MACFoC,SAAS,CAAC9D,IAAI,CAACR,SAAS,CAAC;IAC3B;IACA,OAAOsE,SAAS;EAClB,CAAC,EAAE,CAACrF,YAAY,EAAEM,cAAc,EAAEM,WAAW,EAAEC,YAAY,CAAC,CAAC;EAE7D/E,SAAS,CAAC,MAAM;IACd,MAAM2J,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,SAAS,GAAG,CAAC,CAAC;MACpB,KAAK,MAAMlD,IAAI,IAAIlC,cAAc,EAAE;QACjCoF,SAAS,CAAClD,IAAI,CAAC,GAAG,MAAM/F,aAAa,CAAC+F,IAAI,CAAC;MAC7C;MACAvC,eAAe,CAACyF,SAAS,CAAC;MAE1BvF,kBAAkB,CAACoC,uBAAuB,CAAC3B,WAAW,EAAEC,YAAY,EAAE6E,SAAS,EAAEA,SAAS,CAAC,CAAC;MAC5FrF,aAAa,CAACiE,cAAc,CAAC1D,WAAW,EAAEC,YAAY,EAAE6E,SAAS,CAAC,CAAC;IACrE,CAAC;IAEDD,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAAC7E,WAAW,EAAEC,YAAY,EAAEP,cAAc,EAAEiC,uBAAuB,EAAE+B,cAAc,CAAC,CAAC;EAExF,MAAMe,SAAS,GAAGtJ,OAAO,CAAC,MAAMqJ,eAAe,CAAC,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EAErE,oBACEvI,OAAA,CAACC,aAAa;IAAA6I,QAAA,eACZ9I,OAAA,CAACI,WAAW;MAAA0I,QAAA,gBACV9I,OAAA,CAACM,SAAS;QAAAwI,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CAAC,eACxClJ,OAAA,CAACS,cAAc;QAAAqI,QAAA,gBACb9I,OAAA,CAACa,aAAa;UAAAiI,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC,eAC5ClJ,OAAA,CAACL,mBAAmB;UAACwJ,KAAK,EAAC,MAAM;UAACC,MAAM,EAAE,GAAI;UAAAN,QAAA,eAC5C9I,OAAA,CAACX,SAAS;YAACgG,IAAI,EAAEmD,SAAU;YAAAM,QAAA,gBACzB9I,OAAA,CAACP,aAAa;cAAC4J,eAAe,EAAC;YAAK;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACvClJ,OAAA,CAACT,KAAK;cAAC+J,OAAO,EAAC;YAAO;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACzBlJ,OAAA,CAACR,KAAK;cAAAuJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACTlJ,OAAA,CAACN,OAAO;cAAAqJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EACVzF,cAAc,CAACC,GAAG,CAAC,CAACiC,IAAI,EAAE4B,KAAK,KAAK;cACnC,MAAMgC,aAAa,GAAG5D,IAAI,KAAK5B,WAAW;cAC1C,IAAIwF,aAAa,EAAE;gBACjB,oBACEvJ,OAAA,CAACjB,KAAK,CAACyK,QAAQ;kBAAAV,QAAA,gBAEb9I,OAAA,CAACV,IAAI;oBACHmK,IAAI,EAAC,UAAU;oBACfH,OAAO,EAAGI,SAAS,IAAKA,SAAS,CAAC,GAAG/D,IAAI,cAAc,CAAC,GAAGnB,SAAS,GAAGkF,SAAS,CAAC/D,IAAI,CAAE;oBACvFgE,MAAM,EAAE7F,YAAY,CAACyD,KAAK,CAAE;oBAC5BqC,WAAW,EAAE,CAAE;oBACfC,GAAG,EAAE,KAAM;oBACXC,YAAY,EAAE;kBAAK;oBAAAf,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACpB,CAAC,eAEFlJ,OAAA,CAACV,IAAI;oBACHmK,IAAI,EAAC,UAAU;oBACfH,OAAO,EAAGI,SAAS,IAAK;sBACtB,IAAIA,SAAS,CAAC,GAAG/D,IAAI,cAAc,CAAC,EAAE;wBACpC,OAAO+D,SAAS,CAAC/D,IAAI,CAAC;sBACxB;sBACA;sBACA,MAAMoE,aAAa,GAAGvB,SAAS,CAACF,SAAS,CAAC/C,CAAC,IAAIA,CAAC,CAAC,GAAGI,IAAI,cAAc,CAAC,CAAC,GAAG,CAAC;sBAC5E,OAAO+D,SAAS,KAAKlB,SAAS,CAACuB,aAAa,CAAC,GAAGL,SAAS,CAAC/D,IAAI,CAAC,GAAGnB,SAAS;oBAC7E,CAAE;oBACFmF,MAAM,EAAE7F,YAAY,CAACyD,KAAK,CAAE;oBAC5BqC,WAAW,EAAE,CAAE;oBACfP,eAAe,EAAC,KAAK;oBACrBQ,GAAG,EAAE,KAAM;oBACXC,YAAY,EAAE;kBAAK;oBAAAf,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACpB,CAAC;gBAAA,GA1BiBvD,IAAI;kBAAAoD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OA2BT,CAAC;cAErB,CAAC,MAAM;gBACL,oBACElJ,OAAA,CAACV,IAAI;kBAEHmK,IAAI,EAAC,UAAU;kBACfH,OAAO,EAAE3D,IAAI,CAACqE,QAAQ,CAAC,CAAE;kBACzBL,MAAM,EAAE7F,YAAY,CAACyD,KAAK,CAAE;kBAC5BqC,WAAW,EAAE,CAAE;kBACfC,GAAG,EAAE;gBAAM,GALNlE,IAAI;kBAAAoD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAMV,CAAC;cAEN;YACF,CAAC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACO;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACO,CAAC,eACtBlJ,OAAA,CAACmB,eAAe;UAAA2H,QAAA,EACbrF,cAAc,CAACC,GAAG,CAAC,CAACiC,IAAI,EAAE4B,KAAK,kBAC9BvH,OAAA,CAACqB,UAAU;YAAAyH,QAAA,gBACT9I,OAAA,CAACuB,WAAW;cAACE,KAAK,EAAEqC,YAAY,CAACyD,KAAK;YAAE;cAAAwB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC3ClJ,OAAA;cAAA8I,QAAA,EAAOnD,IAAI,KAAK5B,WAAW,GAAG,GAAG4B,IAAI,yDAAyD,GAAGA;YAAI;cAAAoD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA,GAF9FvD,IAAI;YAAAoD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGT,CACb;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACa,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eACjBlJ,OAAA,CAACW,eAAe;QAAAmI,QAAA,gBACd9I,OAAA,CAACa,aAAa;UAAAiI,QAAA,EAAC;QAA8B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC,eAC7DlJ,OAAA,CAACgB,YAAY;UAAA8H,QAAA,EAAEzF;QAAe;UAAA0F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC,eAClBlJ,OAAA,CAACW,eAAe;QAAAmI,QAAA,gBACd9I,OAAA,CAACa,aAAa;UAAAiI,QAAA,EAAC;QAA8B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC,eAC7DlJ,OAAA,CAACgB,YAAY;UAAA8H,QAAA,EAAEvF;QAAU;UAAAwF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eAClBlJ,OAAA,CAAC2B,UAAU;QAACsI,OAAO,EAAEA,CAAA,KAAMhH,OAAO,CAAC,MAAM,CAAE;QAAA6F,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEpB,CAAC;AAAChG,EAAA,CArWIF,oBAAoB;AAAAkH,IAAA,GAApBlH,oBAAoB;AAuW1B,eAAeA,oBAAoB;AAAC,IAAA7C,EAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAI,IAAA,EAAAG,IAAA,EAAAqI,IAAA;AAAAC,YAAA,CAAAhK,EAAA;AAAAgK,YAAA,CAAA9J,GAAA;AAAA8J,YAAA,CAAA3J,GAAA;AAAA2J,YAAA,CAAAzJ,GAAA;AAAAyJ,YAAA,CAAAvJ,GAAA;AAAAuJ,YAAA,CAAApJ,GAAA;AAAAoJ,YAAA,CAAAjJ,GAAA;AAAAiJ,YAAA,CAAA/I,GAAA;AAAA+I,YAAA,CAAA7I,GAAA;AAAA6I,YAAA,CAAAzI,IAAA;AAAAyI,YAAA,CAAAtI,IAAA;AAAAsI,YAAA,CAAAD,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}