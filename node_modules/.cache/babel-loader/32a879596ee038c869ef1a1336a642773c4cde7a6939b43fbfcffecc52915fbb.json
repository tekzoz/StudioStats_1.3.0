{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from 'recharts';\nimport { getMonthData, getAvailableMonths, getYearlyData, getCurrentYearAndMonth, getAvailableYears } from './data';\n\n// Styled components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n_c = ViewContainer;\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c2 = ViewContent;\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n_c3 = ViewTitle;\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c4 = ChartContainer;\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c5 = AnalysisSection;\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n_c6 = AnalysisTitle;\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n_c7 = AnalysisText;\nconst SelectContainer = styled.div`\n  margin-bottom: 20px;\n`;\n_c8 = SelectContainer;\nconst Select = styled.select`\n  padding: 8px 12px;\n  font-size: 16px;\n  border-radius: 4px;\n  border: 1px solid #D1D5DB;\n`;\n_c9 = Select;\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\n_c10 = BackButton;\nconst getMonthName = monthNumber => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber - 1];\n};\nconst formatNumber = num => new Intl.NumberFormat('it-IT').format(num);\nconst PerformanceTrendView = ({\n  setView\n}) => {\n  _s();\n  const [selectedYear, setSelectedYear] = useState('');\n  const [yearlyData, setYearlyData] = useState({});\n  const [lastMonthAnalysis, setLastMonthAnalysis] = useState('');\n  const [quadrimesterAnalysis, setQuadrimesterAnalysis] = useState('');\n  const [yearAnalysis, setYearAnalysis] = useState('');\n  const [prediction, setPrediction] = useState('');\n  const [quadrimesterChartData, setQuadrimesterChartData] = useState([]);\n  const availableYears = useMemo(() => getAvailableYears(), []);\n  useEffect(() => {\n    const {\n      currentYear\n    } = getCurrentYearAndMonth();\n    setSelectedYear(currentYear.toString());\n  }, []);\n  useEffect(() => {\n    if (selectedYear) {\n      const year = parseInt(selectedYear);\n      const {\n        currentMonth\n      } = getCurrentYearAndMonth();\n      const data = getYearlyData(year);\n      setYearlyData(data);\n      const analyses = performAnalyses(year, currentMonth);\n      setLastMonthAnalysis(analyses.lastMonth);\n      setQuadrimesterAnalysis(analyses.quadrimester);\n      setYearAnalysis(analyses.year);\n      setPrediction(analyses.prediction);\n      setQuadrimesterChartData(analyses.quadrimesterChart);\n    }\n  }, [selectedYear]);\n  const performAnalyses = (year, month) => {\n    const lastMonthData = analyzeLastMonth();\n    const quadrimesterData = analyzeQuadrimester();\n    const yearData = analyzeYear(year, month);\n    const predictionData = makePrediction(year, month);\n    return {\n      lastMonth: lastMonthData.analysis,\n      quadrimester: quadrimesterData.analysis,\n      year: yearData,\n      prediction: predictionData,\n      quadrimesterChart: quadrimesterData.chartData\n    };\n  };\n  const analyzeLastMonth = () => {\n    const availableMonths = getAvailableMonths();\n    const lastAvailableMonth = availableMonths[0].value;\n    const [lastYear, lastMonth] = lastAvailableMonth.split('-').map(Number);\n    const lastMonthData = getMonthData(lastAvailableMonth);\n    if (!lastMonthData) return {\n      analysis: \"Dati non disponibili per l'ultimo mese.\"\n    };\n    const {\n      totaleTurni,\n      mediaGiornaliera,\n      massimoTurni,\n      minimoTurni\n    } = lastMonthData;\n    const monthName = getMonthName(lastMonth);\n    const analysis = `\n      Nel mese di ${monthName} ${lastYear}:\n      • Totale turni: ${formatNumber(totaleTurni)}\n      • Media giornaliera: ${formatNumber(mediaGiornaliera.toFixed(2))} turni\n      • Giorno più impegnativo: ${massimoTurni.day} con ${formatNumber(massimoTurni.shifts)} turni\n      • Giorno meno impegnativo: ${minimoTurni.day} con ${formatNumber(minimoTurni.shifts)} turni\n    `;\n    return {\n      analysis\n    };\n  };\n  const analyzeQuadrimester = () => {\n    const availableMonths = getAvailableMonths();\n    const lastFourMonths = availableMonths.slice(0, 4);\n    let totalTurni = 0;\n    let totalDays = 0;\n    const monthsAnalysis = lastFourMonths.map(monthObj => {\n      const monthData = getMonthData(monthObj.value);\n      if (monthData) {\n        totalTurni += monthData.totaleTurni;\n        totalDays += Object.keys(monthData.days).length;\n        return {\n          month: monthObj.label,\n          turni: monthData.totaleTurni\n        };\n      }\n      return {\n        month: monthObj.label,\n        turni: 0\n      };\n    });\n    const averageTurni = totalTurni / totalDays;\n    const analysis = `\n      Analisi degli ultimi 4 mesi:\n      ${monthsAnalysis.map(m => `• ${m.month}: ${formatNumber(m.turni)} turni`).join('\\n')}\n      \n      In totale, negli ultimi 4 mesi:\n      • Turni effettuati: ${formatNumber(totalTurni)}\n      • Media giornaliera: ${formatNumber(averageTurni.toFixed(2))} turni\n    `;\n    return {\n      analysis,\n      chartData: monthsAnalysis\n    };\n  };\n  const analyzeYear = (year, month) => {\n    const yearData = getYearlyData(year);\n    const totalTurni = Object.values(yearData).reduce((sum, month) => sum + month.totaleTurni, 0);\n    const monthsWithData = Object.values(yearData).filter(month => month.totaleTurni > 0).length;\n    const averageMonthlyTurni = totalTurni / monthsWithData;\n    const monthsComparison = Object.entries(yearData).map(([monthIndex, data]) => {\n      const monthName = getMonthName(parseInt(monthIndex) + 1);\n      const difference = data.totaleTurni - averageMonthlyTurni;\n      return `• ${monthName}: ${difference > 0 ? '+' : ''}${formatNumber(difference.toFixed(0))} rispetto alla media`;\n    }).filter((_, index) => index < month);\n    return `\n      Nell'anno ${year}, fino ad ora:\n      • Totale turni: ${formatNumber(totalTurni)}\n      • Media mensile: ${formatNumber(averageMonthlyTurni.toFixed(2))} turni\n      \n      Confronto dei mesi rispetto alla media:\n      ${monthsComparison.join('\\n')}\n    `;\n  };\n  const makePrediction = (year, month) => {\n    const availableYears = getAvailableYears().map(y => parseInt(y.value));\n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = getYearlyData(y);\n        if (yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`• ${getMonthName(i)}: ${formatNumber(averageTurni.toFixed(0))} turni`);\n      }\n    }\n    return `\n      Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n      ${futurePredictions.join('\\n')}\n    `;\n  };\n  const formatYearlyChartData = data => {\n    return Object.entries(data).map(([month, value]) => ({\n      month: getMonthName(parseInt(month) + 1),\n      turni: value.totaleTurni\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(ViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(ViewContent, {\n      children: [/*#__PURE__*/_jsxDEV(ViewTitle, {\n        children: \"Performance Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SelectContainer, {\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          value: selectedYear,\n          onChange: e => setSelectedYear(e.target.value),\n          children: availableYears.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: year.value,\n            children: year.label\n          }, year.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: [\"Trend annuale \", selectedYear]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: formatYearlyChartData(yearlyData),\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"turni\",\n              stroke: \"#3B82F6\",\n              activeDot: {\n                r: 8\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Ultimi 4 mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: quadrimesterChartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"turni\",\n              fill: \"#3B82F6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Analisi dell'ultimo mese\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: lastMonthAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Considerazioni sugli ultimi 4 mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: quadrimesterAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Conclusioni sull'anno in corso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: yearAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Previsione per i prossimi mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: prediction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BackButton, {\n        onClick: () => setView('main'),\n        children: \"Torna alla Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceTrendView, \"ZOo1R5zTA7BG0IuyiujUBEDzJAw=\");\n_c11 = PerformanceTrendView;\nexport default PerformanceTrendView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"ViewContainer\");\n$RefreshReg$(_c2, \"ViewContent\");\n$RefreshReg$(_c3, \"ViewTitle\");\n$RefreshReg$(_c4, \"ChartContainer\");\n$RefreshReg$(_c5, \"AnalysisSection\");\n$RefreshReg$(_c6, \"AnalysisTitle\");\n$RefreshReg$(_c7, \"AnalysisText\");\n$RefreshReg$(_c8, \"SelectContainer\");\n$RefreshReg$(_c9, \"Select\");\n$RefreshReg$(_c10, \"BackButton\");\n$RefreshReg$(_c11, \"PerformanceTrendView\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","styled","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","BarChart","Bar","getMonthData","getAvailableMonths","getYearlyData","getCurrentYearAndMonth","getAvailableYears","jsxDEV","_jsxDEV","ViewContainer","div","_c","ViewContent","_c2","ViewTitle","h1","_c3","ChartContainer","_c4","AnalysisSection","_c5","AnalysisTitle","h2","_c6","AnalysisText","p","_c7","SelectContainer","_c8","Select","select","_c9","BackButton","button","_c10","getMonthName","monthNumber","monthNames","formatNumber","num","Intl","NumberFormat","format","PerformanceTrendView","setView","_s","selectedYear","setSelectedYear","yearlyData","setYearlyData","lastMonthAnalysis","setLastMonthAnalysis","quadrimesterAnalysis","setQuadrimesterAnalysis","yearAnalysis","setYearAnalysis","prediction","setPrediction","quadrimesterChartData","setQuadrimesterChartData","availableYears","currentYear","toString","year","parseInt","currentMonth","data","analyses","performAnalyses","lastMonth","quadrimester","quadrimesterChart","month","lastMonthData","analyzeLastMonth","quadrimesterData","analyzeQuadrimester","yearData","analyzeYear","predictionData","makePrediction","analysis","chartData","availableMonths","lastAvailableMonth","value","lastYear","split","map","Number","totaleTurni","mediaGiornaliera","massimoTurni","minimoTurni","monthName","toFixed","day","shifts","lastFourMonths","slice","totalTurni","totalDays","monthsAnalysis","monthObj","monthData","Object","keys","days","length","label","turni","averageTurni","m","join","values","reduce","sum","monthsWithData","filter","averageMonthlyTurni","monthsComparison","entries","monthIndex","difference","_","index","y","futurePredictions","i","yearsCount","forEach","push","formatYearlyChartData","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","width","height","strokeDasharray","dataKey","type","stroke","activeDot","r","fill","onClick","_c11","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from 'recharts';\nimport { \n  getMonthData, \n  getAvailableMonths, \n  getYearlyData, \n  getCurrentYearAndMonth,\n  getAvailableYears\n} from './data';\n\n// Styled components\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n\nconst SelectContainer = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst Select = styled.select`\n  padding: 8px 12px;\n  font-size: 16px;\n  border-radius: 4px;\n  border: 1px solid #D1D5DB;\n`;\n\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\nconst getMonthName = (monthNumber) => {\n  const monthNames = [\n    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n  ];\n  return monthNames[monthNumber - 1];\n};\n\nconst formatNumber = (num) => new Intl.NumberFormat('it-IT').format(num);\n\nconst PerformanceTrendView = ({ setView }) => {\n  const [selectedYear, setSelectedYear] = useState('');\n  const [yearlyData, setYearlyData] = useState({});\n  const [lastMonthAnalysis, setLastMonthAnalysis] = useState('');\n  const [quadrimesterAnalysis, setQuadrimesterAnalysis] = useState('');\n  const [yearAnalysis, setYearAnalysis] = useState('');\n  const [prediction, setPrediction] = useState('');\n  const [quadrimesterChartData, setQuadrimesterChartData] = useState([]);\n\n  const availableYears = useMemo(() => getAvailableYears(), []);\n\n  useEffect(() => {\n    const { currentYear } = getCurrentYearAndMonth();\n    setSelectedYear(currentYear.toString());\n  }, []);\n\n  useEffect(() => {\n    if (selectedYear) {\n      const year = parseInt(selectedYear);\n      const { currentMonth } = getCurrentYearAndMonth();\n      const data = getYearlyData(year);\n      setYearlyData(data);\n\n      const analyses = performAnalyses(year, currentMonth);\n      setLastMonthAnalysis(analyses.lastMonth);\n      setQuadrimesterAnalysis(analyses.quadrimester);\n      setYearAnalysis(analyses.year);\n      setPrediction(analyses.prediction);\n      setQuadrimesterChartData(analyses.quadrimesterChart);\n    }\n  }, [selectedYear]);\n\n  const performAnalyses = (year, month) => {\n    const lastMonthData = analyzeLastMonth();\n    const quadrimesterData = analyzeQuadrimester();\n    const yearData = analyzeYear(year, month);\n    const predictionData = makePrediction(year, month);\n\n    return {\n      lastMonth: lastMonthData.analysis,\n      quadrimester: quadrimesterData.analysis,\n      year: yearData,\n      prediction: predictionData,\n      quadrimesterChart: quadrimesterData.chartData\n    };\n  };\n\n  const analyzeLastMonth = () => {\n    const availableMonths = getAvailableMonths();\n    const lastAvailableMonth = availableMonths[0].value;\n    const [lastYear, lastMonth] = lastAvailableMonth.split('-').map(Number);\n    const lastMonthData = getMonthData(lastAvailableMonth);\n\n    if (!lastMonthData) return { analysis: \"Dati non disponibili per l'ultimo mese.\" };\n\n    const { totaleTurni, mediaGiornaliera, massimoTurni, minimoTurni } = lastMonthData;\n    const monthName = getMonthName(lastMonth);\n\n    const analysis = `\n      Nel mese di ${monthName} ${lastYear}:\n      • Totale turni: ${formatNumber(totaleTurni)}\n      • Media giornaliera: ${formatNumber(mediaGiornaliera.toFixed(2))} turni\n      • Giorno più impegnativo: ${massimoTurni.day} con ${formatNumber(massimoTurni.shifts)} turni\n      • Giorno meno impegnativo: ${minimoTurni.day} con ${formatNumber(minimoTurni.shifts)} turni\n    `;\n\n    return { analysis };\n  };\n\n  const analyzeQuadrimester = () => {\n    const availableMonths = getAvailableMonths();\n    const lastFourMonths = availableMonths.slice(0, 4);\n    let totalTurni = 0;\n    let totalDays = 0;\n\n    const monthsAnalysis = lastFourMonths.map(monthObj => {\n      const monthData = getMonthData(monthObj.value);\n      if (monthData) {\n        totalTurni += monthData.totaleTurni;\n        totalDays += Object.keys(monthData.days).length;\n        return { month: monthObj.label, turni: monthData.totaleTurni };\n      }\n      return { month: monthObj.label, turni: 0 };\n    });\n\n    const averageTurni = totalTurni / totalDays;\n\n    const analysis = `\n      Analisi degli ultimi 4 mesi:\n      ${monthsAnalysis.map(m => `• ${m.month}: ${formatNumber(m.turni)} turni`).join('\\n')}\n      \n      In totale, negli ultimi 4 mesi:\n      • Turni effettuati: ${formatNumber(totalTurni)}\n      • Media giornaliera: ${formatNumber(averageTurni.toFixed(2))} turni\n    `;\n\n    return { analysis, chartData: monthsAnalysis };\n  };\n\n  const analyzeYear = (year, month) => {\n    const yearData = getYearlyData(year);\n    const totalTurni = Object.values(yearData).reduce((sum, month) => sum + month.totaleTurni, 0);\n    const monthsWithData = Object.values(yearData).filter(month => month.totaleTurni > 0).length;\n    const averageMonthlyTurni = totalTurni / monthsWithData;\n\n    const monthsComparison = Object.entries(yearData)\n      .map(([monthIndex, data]) => {\n        const monthName = getMonthName(parseInt(monthIndex) + 1);\n        const difference = data.totaleTurni - averageMonthlyTurni;\n        return `• ${monthName}: ${difference > 0 ? '+' : ''}${formatNumber(difference.toFixed(0))} rispetto alla media`;\n      })\n      .filter((_, index) => index < month);\n\n    return `\n      Nell'anno ${year}, fino ad ora:\n      • Totale turni: ${formatNumber(totalTurni)}\n      • Media mensile: ${formatNumber(averageMonthlyTurni.toFixed(2))} turni\n      \n      Confronto dei mesi rispetto alla media:\n      ${monthsComparison.join('\\n')}\n    `;\n  };\n\n  const makePrediction = (year, month) => {\n    const availableYears = getAvailableYears().map(y => parseInt(y.value));\n    \n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = getYearlyData(y);\n        if (yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`• ${getMonthName(i)}: ${formatNumber(averageTurni.toFixed(0))} turni`);\n      }\n    }\n\n    return `\n      Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n      ${futurePredictions.join('\\n')}\n    `;\n  };\n\n  const formatYearlyChartData = (data) => {\n    return Object.entries(data).map(([month, value]) => ({\n      month: getMonthName(parseInt(month) + 1),\n      turni: value.totaleTurni\n    }));\n  };\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <ViewTitle>Performance Trend</ViewTitle>\n        <SelectContainer>\n          <Select value={selectedYear} onChange={(e) => setSelectedYear(e.target.value)}>\n            {availableYears.map(year => (\n              <option key={year.value} value={year.value}>{year.label}</option>\n            ))}\n          </Select>\n        </SelectContainer>\n        <ChartContainer>\n          <AnalysisTitle>Trend annuale {selectedYear}</AnalysisTitle>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={formatYearlyChartData(yearlyData)}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"turni\" stroke=\"#3B82F6\" activeDot={{ r: 8 }} />\n            </LineChart>\n          </ResponsiveContainer>\n        </ChartContainer>\n        <ChartContainer>\n          <AnalysisTitle>Ultimi 4 mesi</AnalysisTitle>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={quadrimesterChartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"turni\" fill=\"#3B82F6\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </ChartContainer>\n        <AnalysisSection>\n          <AnalysisTitle>Analisi dell'ultimo mese</AnalysisTitle>\n          <AnalysisText>{lastMonthAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Considerazioni sugli ultimi 4 mesi</AnalysisTitle>\n          <AnalysisText>{quadrimesterAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Conclusioni sull'anno in corso</AnalysisTitle>\n          <AnalysisText>{yearAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Previsione per i prossimi mesi</AnalysisTitle>\n          <AnalysisText>{prediction}</AnalysisText>\n        </AnalysisSection>\n        <BackButton onClick={() => setView('main')}>Torna alla Dashboard</BackButton>\n      </ViewContent>\n    </ViewContainer>\n  );\n};\n\nexport default PerformanceTrendView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}