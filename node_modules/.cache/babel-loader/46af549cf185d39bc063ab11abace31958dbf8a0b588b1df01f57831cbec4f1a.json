{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { getYearlyData, getCurrentYearAndMonth, getAvailableYears } from './data';\n\n// Styled components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n_c = ViewContainer;\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c2 = ViewContent;\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n_c3 = ViewTitle;\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c4 = ChartContainer;\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c5 = AnalysisSection;\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n_c6 = AnalysisTitle;\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n_c7 = AnalysisText;\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n_c8 = LegendContainer;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n_c9 = LegendItem;\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n_c10 = LegendColor;\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\n_c11 = BackButton;\nconst getMonthName = monthNumber => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber - 1];\n};\nconst formatNumber = num => new Intl.NumberFormat('it-IT').format(num);\nconst generateColorPalette = numColors => {\n  const hueStep = 360 / numColors;\n  return Array.from({\n    length: numColors\n  }, (_, i) => `hsl(${i * hueStep}, 70%, 50%)`);\n};\nconst PerformanceTrendView = ({\n  setView\n}) => {\n  _s();\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearConclusions, setYearConclusions] = useState('');\n  const [prediction, setPrediction] = useState('');\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const {\n    currentYear,\n    currentMonth\n  } = getCurrentYearAndMonth();\n  const generateYearConclusions = useCallback((year, month, yearData, allYearsData) => {\n    const currentYearData = yearData[year] || {};\n    const totalTurni = Object.values(currentYearData).reduce((sum, month) => sum + (month.totaleTurni || 0), 0);\n    const monthsWithData = Object.values(currentYearData).filter(month => month && month.totaleTurni > 0).length;\n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n    const lastYear = year - 1;\n    const lastYearData = allYearsData[lastYear] || {};\n    const lastYearTotalTurni = Object.values(lastYearData).reduce((sum, month) => sum + (month.totaleTurni || 0), 0);\n    const percentageChange = lastYearTotalTurni > 0 ? (totalTurni - lastYearTotalTurni) / lastYearTotalTurni * 100 : 0;\n    const monthsData = Object.entries(currentYearData).map(([monthIndex, data]) => ({\n      month: parseInt(monthIndex) + 1,\n      turni: data.totaleTurni || 0\n    })).filter(data => data.month <= month);\n    const maxMonth = monthsData.reduce((max, current) => current.turni > max.turni ? current : max, {\n      turni: 0\n    });\n    const minMonth = monthsData.reduce((min, current) => current.turni < min.turni && current.turni > 0 ? current : min, {\n      turni: Infinity\n    });\n    let conclusions = `Conclusioni per l'anno ${year} (fino a ${getMonthName(month)}):\\n\\n`;\n    conclusions += `• Totale turni effettuati: ${formatNumber(totalTurni)}\\n`;\n    conclusions += `• Media mensile: ${formatNumber(averageMonthlyTurni.toFixed(2))} turni\\n`;\n    if (percentageChange !== 0) {\n      conclusions += `• Variazione rispetto all'anno precedente: ${percentageChange > 0 ? '+' : ''}${percentageChange.toFixed(2)}%\\n`;\n    }\n    conclusions += `• Mese più intenso: ${getMonthName(maxMonth.month)} con ${formatNumber(maxMonth.turni)} turni\\n`;\n    conclusions += `• Mese meno intenso: ${getMonthName(minMonth.month)} con ${formatNumber(minMonth.turni)} turni\\n\\n`;\n    const trend = monthsData.slice(-3).every((data, index, array) => index === 0 || data.turni >= array[index - 1].turni) ? \"crescente\" : monthsData.slice(-3).every((data, index, array) => index === 0 || data.turni <= array[index - 1].turni) ? \"decrescente\" : \"stabile\";\n    conclusions += `Il trend degli ultimi tre mesi è ${trend}. `;\n    if (month < 12) {\n      const remainingMonths = 12 - month;\n      const projectedTotal = totalTurni + averageMonthlyTurni * remainingMonths;\n      conclusions += `Se il trend attuale continua, si prevede di raggiungere circa ${formatNumber(projectedTotal.toFixed(0))} turni entro la fine dell'anno.\\n\\n`;\n    }\n    const previousYearsAverage = Object.entries(allYearsData).filter(([y]) => parseInt(y) < year).reduce((sum, [_, yearData]) => {\n      const yearTotal = Object.values(yearData).reduce((total, month) => total + (month.totaleTurni || 0), 0);\n      return sum + yearTotal;\n    }, 0) / (Object.keys(allYearsData).length - 1);\n    const comparisonWithAverage = (totalTurni / previousYearsAverage - 1) * 100;\n    conclusions += `Rispetto alla media degli anni precedenti, l'anno corrente sta registrando una ${comparisonWithAverage > 0 ? 'crescita' : 'diminuzione'} del ${Math.abs(comparisonWithAverage).toFixed(2)}% nel numero di turni.`;\n    return conclusions;\n  }, []);\n  const makePrediction = useCallback((year, month, allYearsData) => {\n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = allYearsData[y];\n        if (yearData && yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`• ${getMonthName(i)}: ${formatNumber(averageTurni.toFixed(0))} turni`);\n      }\n    }\n    return `\n      Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n      ${futurePredictions.join('\\n')}\n    `;\n  }, [availableYears]);\n  const formatChartData = useCallback(() => {\n    const chartData = [];\n    const calculateAverageForMonth = month => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return sum / relevantYears.length;\n    };\n    for (let month = 0; month < 12; month++) {\n      const monthData = {\n        month: getMonthName(month + 1)\n      };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth) {\n            monthData[year] = yearData && yearData[month] ? yearData[month].totaleTurni : 0;\n          } else {\n            monthData[`${year}Prediction`] = calculateAverageForMonth(month);\n          }\n        } else {\n          monthData[year] = yearData && yearData[month] ? yearData[month].totaleTurni : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  }, [allYearsData, availableYears, currentYear, currentMonth]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const yearsData = {};\n      for (const year of availableYears) {\n        yearsData[year] = await getYearlyData(year);\n      }\n      setAllYearsData(yearsData);\n      setYearConclusions(generateYearConclusions(currentYear, currentMonth, yearsData, yearsData));\n      setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n    };\n    fetchData();\n  }, [currentYear, currentMonth, availableYears, generateYearConclusions, makePrediction]);\n  const chartData = useMemo(() => formatChartData(), [formatChartData]);\n  return /*#__PURE__*/_jsxDEV(ViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(ViewContent, {\n      children: [/*#__PURE__*/_jsxDEV(ViewTitle, {\n        children: \"Performance Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Trend annuale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 15\n            }, this), availableYears.map((year, index) => {\n              const isCurrentYear = year === currentYear;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Line, {\n                  type: \"monotone\",\n                  dataKey: year.toString(),\n                  stroke: colorPalette[index],\n                  strokeWidth: isCurrentYear ? 3 : 1,\n                  dot: false\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 21\n                }, this), isCurrentYear && /*#__PURE__*/_jsxDEV(Line, {\n                  type: \"monotone\",\n                  dataKey: `${year}Prediction`,\n                  stroke: colorPalette[index],\n                  strokeWidth: 3,\n                  strokeDasharray: \"5 5\",\n                  dot: false\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 23\n                }, this)]\n              }, year, true, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LegendContainer, {\n          children: availableYears.map((year, index) => /*#__PURE__*/_jsxDEV(LegendItem, {\n            children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n              color: colorPalette[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: year === currentYear ? `${year} / Previsione ${year}` : year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 17\n            }, this)]\n          }, year, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Conclusioni sull'anno in corso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: yearConclusions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Previsione per i prossimi mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: prediction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BackButton, {\n        onClick: () => setView('main'),\n        children: \"Torna alla Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceTrendView, \"ppp5rTxj7bqbzH8PDsrATEmgRQ4=\");\n_c12 = PerformanceTrendView;\nexport default PerformanceTrendView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"ViewContainer\");\n$RefreshReg$(_c2, \"ViewContent\");\n$RefreshReg$(_c3, \"ViewTitle\");\n$RefreshReg$(_c4, \"ChartContainer\");\n$RefreshReg$(_c5, \"AnalysisSection\");\n$RefreshReg$(_c6, \"AnalysisTitle\");\n$RefreshReg$(_c7, \"AnalysisText\");\n$RefreshReg$(_c8, \"LegendContainer\");\n$RefreshReg$(_c9, \"LegendItem\");\n$RefreshReg$(_c10, \"LegendColor\");\n$RefreshReg$(_c11, \"BackButton\");\n$RefreshReg$(_c12, \"PerformanceTrendView\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","styled","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","getYearlyData","getCurrentYearAndMonth","getAvailableYears","jsxDEV","_jsxDEV","ViewContainer","div","_c","ViewContent","_c2","ViewTitle","h1","_c3","ChartContainer","_c4","AnalysisSection","_c5","AnalysisTitle","h2","_c6","AnalysisText","p","_c7","LegendContainer","_c8","LegendItem","_c9","LegendColor","props","color","_c10","BackButton","button","_c11","getMonthName","monthNumber","monthNames","formatNumber","num","Intl","NumberFormat","format","generateColorPalette","numColors","hueStep","Array","from","length","_","i","PerformanceTrendView","setView","_s","allYearsData","setAllYearsData","yearConclusions","setYearConclusions","prediction","setPrediction","availableYears","map","y","parseInt","value","colorPalette","currentYear","currentMonth","generateYearConclusions","year","month","yearData","currentYearData","totalTurni","Object","values","reduce","sum","totaleTurni","monthsWithData","filter","averageMonthlyTurni","lastYear","lastYearData","lastYearTotalTurni","percentageChange","monthsData","entries","monthIndex","data","turni","maxMonth","max","current","minMonth","min","Infinity","conclusions","toFixed","trend","slice","every","index","array","remainingMonths","projectedTotal","previousYearsAverage","yearTotal","total","keys","comparisonWithAverage","Math","abs","makePrediction","futurePredictions","yearsCount","forEach","averageTurni","push","join","formatChartData","chartData","calculateAverageForMonth","relevantYears","acc","monthData","fetchData","yearsData","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","isCurrentYear","Fragment","type","toString","stroke","strokeWidth","dot","onClick","_c12","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { \n  getYearlyData, \n  getCurrentYearAndMonth,\n  getAvailableYears\n} from './data';\n\n// Styled components\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\nconst getMonthName = (monthNumber) => {\n  const monthNames = [\n    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n  ];\n  return monthNames[monthNumber - 1];\n};\n\nconst formatNumber = (num) => new Intl.NumberFormat('it-IT').format(num);\n\nconst generateColorPalette = (numColors) => {\n  const hueStep = 360 / numColors;\n  return Array.from({ length: numColors }, (_, i) => \n    `hsl(${i * hueStep}, 70%, 50%)`\n  );\n};\n\nconst PerformanceTrendView = ({ setView }) => {\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearConclusions, setYearConclusions] = useState('');\n  const [prediction, setPrediction] = useState('');\n\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const { currentYear, currentMonth } = getCurrentYearAndMonth();\n\n  const generateYearConclusions = useCallback((year, month, yearData, allYearsData) => {\n    const currentYearData = yearData[year] || {};\n    const totalTurni = Object.values(currentYearData).reduce((sum, month) => sum + (month.totaleTurni || 0), 0);\n    const monthsWithData = Object.values(currentYearData).filter(month => month && month.totaleTurni > 0).length;\n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n\n    const lastYear = year - 1;\n    const lastYearData = allYearsData[lastYear] || {};\n    const lastYearTotalTurni = Object.values(lastYearData).reduce((sum, month) => sum + (month.totaleTurni || 0), 0);\n    const percentageChange = lastYearTotalTurni > 0 ? ((totalTurni - lastYearTotalTurni) / lastYearTotalTurni) * 100 : 0;\n\n    const monthsData = Object.entries(currentYearData)\n      .map(([monthIndex, data]) => ({ month: parseInt(monthIndex) + 1, turni: data.totaleTurni || 0 }))\n      .filter(data => data.month <= month);\n    const maxMonth = monthsData.reduce((max, current) => current.turni > max.turni ? current : max, { turni: 0 });\n    const minMonth = monthsData.reduce((min, current) => (current.turni < min.turni && current.turni > 0) ? current : min, { turni: Infinity });\n\n    let conclusions = `Conclusioni per l'anno ${year} (fino a ${getMonthName(month)}):\\n\\n`;\n    conclusions += `• Totale turni effettuati: ${formatNumber(totalTurni)}\\n`;\n    conclusions += `• Media mensile: ${formatNumber(averageMonthlyTurni.toFixed(2))} turni\\n`;\n    \n    if (percentageChange !== 0) {\n      conclusions += `• Variazione rispetto all'anno precedente: ${percentageChange > 0 ? '+' : ''}${percentageChange.toFixed(2)}%\\n`;\n    }\n\n    conclusions += `• Mese più intenso: ${getMonthName(maxMonth.month)} con ${formatNumber(maxMonth.turni)} turni\\n`;\n    conclusions += `• Mese meno intenso: ${getMonthName(minMonth.month)} con ${formatNumber(minMonth.turni)} turni\\n\\n`;\n\n    const trend = monthsData.slice(-3).every((data, index, array) => \n      index === 0 || data.turni >= array[index - 1].turni\n    ) ? \"crescente\" : monthsData.slice(-3).every((data, index, array) => \n      index === 0 || data.turni <= array[index - 1].turni\n    ) ? \"decrescente\" : \"stabile\";\n\n    conclusions += `Il trend degli ultimi tre mesi è ${trend}. `;\n\n    if (month < 12) {\n      const remainingMonths = 12 - month;\n      const projectedTotal = totalTurni + (averageMonthlyTurni * remainingMonths);\n      conclusions += `Se il trend attuale continua, si prevede di raggiungere circa ${formatNumber(projectedTotal.toFixed(0))} turni entro la fine dell'anno.\\n\\n`;\n    }\n\n    const previousYearsAverage = Object.entries(allYearsData)\n      .filter(([y]) => parseInt(y) < year)\n      .reduce((sum, [_, yearData]) => {\n        const yearTotal = Object.values(yearData).reduce((total, month) => total + (month.totaleTurni || 0), 0);\n        return sum + yearTotal;\n      }, 0) / (Object.keys(allYearsData).length - 1);\n\n    const comparisonWithAverage = ((totalTurni / previousYearsAverage) - 1) * 100;\n\n    conclusions += `Rispetto alla media degli anni precedenti, l'anno corrente sta registrando una ${comparisonWithAverage > 0 ? 'crescita' : 'diminuzione'} del ${Math.abs(comparisonWithAverage).toFixed(2)}% nel numero di turni.`;\n\n    return conclusions;\n  }, []);\n\n  const makePrediction = useCallback((year, month, allYearsData) => {\n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = allYearsData[y];\n        if (yearData && yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`• ${getMonthName(i)}: ${formatNumber(averageTurni.toFixed(0))} turni`);\n      }\n    }\n\n    return `\n      Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n      ${futurePredictions.join('\\n')}\n    `;\n  }, [availableYears]);\n\n  const formatChartData = useCallback(() => {\n    const chartData = [];\n    \n    const calculateAverageForMonth = (month) => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return sum / relevantYears.length;\n    };\n\n    for (let month = 0; month < 12; month++) {\n      const monthData = { month: getMonthName(month + 1) };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth) {\n            monthData[year] = yearData && yearData[month] ? yearData[month].totaleTurni : 0;\n          } else {\n            monthData[`${year}Prediction`] = calculateAverageForMonth(month);\n          }\n        } else {\n          monthData[year] = yearData && yearData[month] ? yearData[month].totaleTurni : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  }, [allYearsData, availableYears, currentYear, currentMonth]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const yearsData = {};\n      for (const year of availableYears) {\n        yearsData[year] = await getYearlyData(year);\n      }\n      setAllYearsData(yearsData);\n\n      setYearConclusions(generateYearConclusions(currentYear, currentMonth, yearsData, yearsData));\n      setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n    };\n\n    fetchData();\n  }, [currentYear, currentMonth, availableYears, generateYearConclusions, makePrediction]);\n\n  const chartData = useMemo(() => formatChartData(), [formatChartData]);\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <ViewTitle>Performance Trend</ViewTitle>\n        <ChartContainer>\n          <AnalysisTitle>Trend annuale</AnalysisTitle>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip />\n              {availableYears.map((year, index) => {\n                const isCurrentYear = year === currentYear;\n                return (\n                  <React.Fragment key={year}>\n                    <Line\n                      type=\"monotone\"\n                      dataKey={year.toString()}\n                      stroke={colorPalette[index]}\n                      strokeWidth={isCurrentYear ? 3 : 1}\n                      dot={false}\n                    />\n                    {isCurrentYear && (\n                      <Line\n                        type=\"monotone\"\n                        dataKey={`${year}Prediction`}\n                        stroke={colorPalette[index]}\n                        strokeWidth={3}\n                        strokeDasharray=\"5 5\"\n                        dot={false}\n                      />\n                    )}\n                  </React.Fragment>\n                );\n              })}\n            </LineChart>\n          </ResponsiveContainer>\n          <LegendContainer>\n            {availableYears.map((year, index) => (\n              <LegendItem key={year}>\n                <LegendColor color={colorPalette[index]} />\n                <span>{year === currentYear ? `${year} / Previsione ${year}` : year}</span>\n              </LegendItem>\n            ))}\n          </LegendContainer>\n        </ChartContainer>\n        <AnalysisSection>\n          <AnalysisTitle>Conclusioni sull'anno in corso</AnalysisTitle>\n          <AnalysisText>{yearConclusions}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Previsione per i prossimi mesi</AnalysisTitle>\n          <AnalysisText>{prediction}</AnalysisText>\n        </AnalysisSection>\n        <BackButton onClick={() => setView('main')}>Torna alla Dashboard</BackButton>\n      </ViewContent>\n    </ViewContainer>\n  );\n};\n\nexport default PerformanceTrendView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}