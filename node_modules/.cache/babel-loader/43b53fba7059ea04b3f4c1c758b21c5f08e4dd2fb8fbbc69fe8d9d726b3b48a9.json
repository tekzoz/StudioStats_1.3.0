{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { getYearlyData, getCurrentYearAndMonth, getAvailableYears } from './data';\n\n// Styled components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n_c = ViewContainer;\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c2 = ViewContent;\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n_c3 = ViewTitle;\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c4 = ChartContainer;\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c5 = AnalysisSection;\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n_c6 = AnalysisTitle;\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n_c7 = AnalysisText;\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n_c8 = LegendContainer;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n_c9 = LegendItem;\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n_c10 = LegendColor;\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\n_c11 = BackButton;\nconst getMonthName = monthNumber => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber - 1];\n};\nconst formatNumber = num => new Intl.NumberFormat('it-IT').format(Math.round(num));\nconst generateColorPalette = numColors => {\n  const hueStep = 360 / numColors;\n  return Array.from({\n    length: numColors\n  }, (_, i) => `hsl(${i * hueStep}, 70%, 50%)`);\n};\nconst PerformanceTrendView = ({\n  setView\n}) => {\n  _s();\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearConclusions, setYearConclusions] = useState('');\n  const [prediction, setPrediction] = useState('');\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const {\n    currentYear,\n    currentMonth\n  } = getCurrentYearAndMonth();\n  const generateYearConclusions = useCallback((year, currentMonth, yearData, allYearsData) => {\n    const month = currentMonth > 1 ? currentMonth - 1 : 12;\n    const yearToAnalyze = month === 12 ? year - 1 : year;\n    const currentYearData = yearData[yearToAnalyze] || {};\n    const totalTurni = Object.values(currentYearData).slice(0, month).reduce((sum, monthData) => sum + (monthData.totaleTurni || 0), 0);\n    const monthsWithData = Object.values(currentYearData).slice(0, month).filter(monthData => monthData && monthData.totaleTurni > 0).length;\n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n\n    // Calcolo delle statistiche per gli anni precedenti\n    const previousYearsData = Object.entries(allYearsData).filter(([y]) => parseInt(y) < yearToAnalyze).map(([year, data]) => {\n      const yearTotal = Object.values(data).slice(0, month).reduce((sum, monthData) => sum + (monthData.totaleTurni || 0), 0);\n      return {\n        year: parseInt(year),\n        totalTurni: yearTotal\n      };\n    });\n    const avgPreviousYears = previousYearsData.reduce((sum, y) => sum + y.totalTurni, 0) / previousYearsData.length;\n\n    // Analisi del trend\n    const trend = monthsWithData >= 3 ? currentYearData[month - 1].totaleTurni > currentYearData[month - 3].totaleTurni ? \"crescente\" : currentYearData[month - 1].totaleTurni < currentYearData[month - 3].totaleTurni ? \"decrescente\" : \"stabile\" : \"non determinabile\";\n\n    // Composizione dell'analisi\n    let analysis = `Analisi dettagliata dell'anno ${yearToAnalyze} (fino a ${getMonthName(month)}):\\n\\n`;\n    analysis += `Nel periodo analizzato, sono stati effettuati un totale di ${formatNumber(totalTurni)} turni, `;\n    analysis += `con una media mensile di ${formatNumber(averageMonthlyTurni)} turni. `;\n    if (totalTurni > avgPreviousYears) {\n      analysis += `Questo rappresenta un aumento del ${formatNumber((totalTurni / avgPreviousYears - 1) * 100)}% `;\n      analysis += `rispetto alla media degli anni precedenti nello stesso periodo. `;\n    } else if (totalTurni < avgPreviousYears) {\n      analysis += `Questo rappresenta una diminuzione del ${formatNumber((avgPreviousYears / totalTurni - 1) * 100)}% `;\n      analysis += `rispetto alla media degli anni precedenti nello stesso periodo. `;\n    } else {\n      analysis += `Questo è in linea con la media degli anni precedenti nello stesso periodo. `;\n    }\n    analysis += `\\n\\nIl trend degli ultimi tre mesi è ${trend}. `;\n    if (trend === \"crescente\") {\n      analysis += `Questo potrebbe indicare un aumento della domanda o un'espansione delle attività dello studio. `;\n    } else if (trend === \"decrescente\") {\n      analysis += `Questo potrebbe suggerire una riduzione della domanda o possibili sfide operative. `;\n    }\n    analysis += `\\n\\nConfrontando con gli anni precedenti:\\n`;\n    previousYearsData.forEach(({\n      year,\n      totalTurni: prevYearTotal\n    }) => {\n      const diff = totalTurni - prevYearTotal;\n      const percentDiff = diff / prevYearTotal * 100;\n      analysis += `- ${year}: ${diff > 0 ? 'aumento' : 'diminuzione'} del ${formatNumber(Math.abs(percentDiff))}%\\n`;\n    });\n    analysis += `\\nQuesti dati suggeriscono che `;\n    if (totalTurni > avgPreviousYears) {\n      analysis += `l'anno ${yearToAnalyze} sta mostrando una performance superiore alla media storica. `;\n      analysis += `Potrebbe essere opportuno valutare se le risorse attuali sono sufficienti per gestire questo aumento di attività. `;\n    } else if (totalTurni < avgPreviousYears) {\n      analysis += `l'anno ${yearToAnalyze} sta mostrando una performance inferiore alla media storica. `;\n      analysis += `Potrebbe essere utile analizzare le cause di questa diminuzione e considerare strategie per stimolare la domanda. `;\n    } else {\n      analysis += `l'anno ${yearToAnalyze} sta mantenendo una performance in linea con la media storica. `;\n      analysis += `Questo suggerisce una stabilità nelle operazioni dello studio. `;\n    }\n    analysis += `\\n\\nRaccomandazioni:\n    1. Monitorare attentamente il trend nei prossimi mesi per adattare le risorse in modo proattivo.\n    2. Considerare un'analisi più approfondita dei fattori che influenzano la domanda di turni.\n    3. Valutare l'efficienza operativa e considerare eventuali ottimizzazioni dei processi.`;\n    return analysis;\n  }, []);\n  const makePrediction = useCallback((year, month, allYearsData) => {\n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        if (y !== 2020 && y !== year) {\n          const yearData = allYearsData[y];\n          if (yearData && yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n            totalTurni += yearData[i - 1].totaleTurni;\n            yearsCount++;\n          }\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`• ${getMonthName(i)}: ${formatNumber(averageTurni)} turni`);\n      }\n    }\n    return `\n      Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n      ${futurePredictions.join('\\n')}\n    `;\n  }, [availableYears]);\n  const formatChartData = useCallback(() => {\n    const chartData = [];\n    const calculateAverageForMonth = month => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return Math.round(sum / relevantYears.length);\n    };\n    for (let month = 0; month < 12; month++) {\n      const monthData = {\n        month: getMonthName(month + 1)\n      };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth - 1) {\n            // Dati reali per i mesi passati\n            monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n            monthData[`${year}IsPrediction`] = false;\n          } else {\n            // Previsione per il mese corrente e i mesi futuri\n            monthData[year] = calculateAverageForMonth(month);\n            monthData[`${year}IsPrediction`] = true;\n          }\n        } else {\n          // Dati degli anni passati\n          monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  }, [allYearsData, availableYears, currentYear, currentMonth]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const yearsData = {};\n      for (const year of availableYears) {\n        yearsData[year] = await getYearlyData(year);\n      }\n      setAllYearsData(yearsData);\n      setYearConclusions(generateYearConclusions(currentYear, currentMonth, yearsData, yearsData));\n      setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n    };\n    fetchData();\n  }, [currentYear, currentMonth, availableYears, generateYearConclusions, makePrediction]);\n  const chartData = useMemo(() => formatChartData(), [formatChartData]);\n  return /*#__PURE__*/_jsxDEV(ViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(ViewContent, {\n      children: [/*#__PURE__*/_jsxDEV(ViewTitle, {\n        children: \"Performance Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Trend annuale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 5\n            }, this), availableYears.map((year, index) => {\n              const isCurrentYear = year === currentYear;\n              if (isCurrentYear) {\n                return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Line, {\n                    type: \"monotone\",\n                    dataKey: dataPoint => dataPoint[`${year}IsPrediction`] ? undefined : dataPoint[year],\n                    stroke: colorPalette[index],\n                    strokeWidth: 3,\n                    dot: false,\n                    connectNulls: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 307,\n                    columnNumber: 13\n                  }, this), /*#__PURE__*/_jsxDEV(Line, {\n                    type: \"monotone\",\n                    dataKey: dataPoint => {\n                      if (dataPoint[`${year}IsPrediction`]) {\n                        return dataPoint[year];\n                      }\n                      // Restituisce il valore dell'ultimo mese reale per connettere le linee\n                      const lastRealMonth = chartData.findIndex(d => d[`${year}IsPrediction`]) - 1;\n                      return dataPoint === chartData[lastRealMonth] ? dataPoint[year] : undefined;\n                    },\n                    stroke: colorPalette[index],\n                    strokeWidth: 3,\n                    strokeDasharray: \"5 5\",\n                    dot: false,\n                    connectNulls: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 316,\n                    columnNumber: 13\n                  }, this)]\n                }, year, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 305,\n                  columnNumber: 11\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(Line, {\n                  type: \"monotone\",\n                  dataKey: year.toString(),\n                  stroke: colorPalette[index],\n                  strokeWidth: 1,\n                  dot: false\n                }, year, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 11\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 3\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LegendContainer, {\n          children: availableYears.map((year, index) => /*#__PURE__*/_jsxDEV(LegendItem, {\n            children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n              color: colorPalette[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: year === currentYear ? `${year} (linea continua: dati reali, tratteggiata: previsione)` : year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 17\n            }, this)]\n          }, year, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Conclusioni sull'anno in corso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: yearConclusions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Previsione per i prossimi mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: prediction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BackButton, {\n        onClick: () => setView('main'),\n        children: \"Torna alla Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceTrendView, \"ppp5rTxj7bqbzH8PDsrATEmgRQ4=\");\n_c12 = PerformanceTrendView;\nexport default PerformanceTrendView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"ViewContainer\");\n$RefreshReg$(_c2, \"ViewContent\");\n$RefreshReg$(_c3, \"ViewTitle\");\n$RefreshReg$(_c4, \"ChartContainer\");\n$RefreshReg$(_c5, \"AnalysisSection\");\n$RefreshReg$(_c6, \"AnalysisTitle\");\n$RefreshReg$(_c7, \"AnalysisText\");\n$RefreshReg$(_c8, \"LegendContainer\");\n$RefreshReg$(_c9, \"LegendItem\");\n$RefreshReg$(_c10, \"LegendColor\");\n$RefreshReg$(_c11, \"BackButton\");\n$RefreshReg$(_c12, \"PerformanceTrendView\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","styled","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","getYearlyData","getCurrentYearAndMonth","getAvailableYears","jsxDEV","_jsxDEV","ViewContainer","div","_c","ViewContent","_c2","ViewTitle","h1","_c3","ChartContainer","_c4","AnalysisSection","_c5","AnalysisTitle","h2","_c6","AnalysisText","p","_c7","LegendContainer","_c8","LegendItem","_c9","LegendColor","props","color","_c10","BackButton","button","_c11","getMonthName","monthNumber","monthNames","formatNumber","num","Intl","NumberFormat","format","Math","round","generateColorPalette","numColors","hueStep","Array","from","length","_","i","PerformanceTrendView","setView","_s","allYearsData","setAllYearsData","yearConclusions","setYearConclusions","prediction","setPrediction","availableYears","map","y","parseInt","value","colorPalette","currentYear","currentMonth","generateYearConclusions","year","yearData","month","yearToAnalyze","currentYearData","totalTurni","Object","values","slice","reduce","sum","monthData","totaleTurni","monthsWithData","filter","averageMonthlyTurni","previousYearsData","entries","data","yearTotal","avgPreviousYears","trend","analysis","forEach","prevYearTotal","diff","percentDiff","abs","makePrediction","futurePredictions","yearsCount","averageTurni","push","join","formatChartData","chartData","calculateAverageForMonth","relevantYears","acc","fetchData","yearsData","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","index","isCurrentYear","Fragment","type","dataPoint","undefined","stroke","strokeWidth","dot","connectNulls","lastRealMonth","findIndex","d","toString","onClick","_c12","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { \n  getYearlyData, \n  getCurrentYearAndMonth,\n  getAvailableYears\n} from './data';\n\n// Styled components\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\nconst getMonthName = (monthNumber) => {\n  const monthNames = [\n    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n  ];\n  return monthNames[monthNumber - 1];\n};\n\nconst formatNumber = (num) => new Intl.NumberFormat('it-IT').format(Math.round(num));\n\nconst generateColorPalette = (numColors) => {\n  const hueStep = 360 / numColors;\n  return Array.from({ length: numColors }, (_, i) => \n    `hsl(${i * hueStep}, 70%, 50%)`\n  );\n};\n\nconst PerformanceTrendView = ({ setView }) => {\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearConclusions, setYearConclusions] = useState('');\n  const [prediction, setPrediction] = useState('');\n\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const { currentYear, currentMonth } = getCurrentYearAndMonth();\n\n  const generateYearConclusions = useCallback((year, currentMonth, yearData, allYearsData) => {\n    const month = currentMonth > 1 ? currentMonth - 1 : 12;\n    const yearToAnalyze = month === 12 ? year - 1 : year;\n    const currentYearData = yearData[yearToAnalyze] || {};\n    \n    const totalTurni = Object.values(currentYearData)\n      .slice(0, month)\n      .reduce((sum, monthData) => sum + (monthData.totaleTurni || 0), 0);\n    \n    const monthsWithData = Object.values(currentYearData)\n      .slice(0, month)\n      .filter(monthData => monthData && monthData.totaleTurni > 0).length;\n    \n    const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n  \n    // Calcolo delle statistiche per gli anni precedenti\n    const previousYearsData = Object.entries(allYearsData)\n      .filter(([y]) => parseInt(y) < yearToAnalyze)\n      .map(([year, data]) => {\n        const yearTotal = Object.values(data)\n          .slice(0, month)\n          .reduce((sum, monthData) => sum + (monthData.totaleTurni || 0), 0);\n        return { year: parseInt(year), totalTurni: yearTotal };\n      });\n  \n    const avgPreviousYears = previousYearsData.reduce((sum, y) => sum + y.totalTurni, 0) / previousYearsData.length;\n    \n    // Analisi del trend\n    const trend = monthsWithData >= 3 ? \n      (currentYearData[month - 1].totaleTurni > currentYearData[month - 3].totaleTurni ? \"crescente\" : \n       currentYearData[month - 1].totaleTurni < currentYearData[month - 3].totaleTurni ? \"decrescente\" : \"stabile\") :\n      \"non determinabile\";\n  \n    // Composizione dell'analisi\n    let analysis = `Analisi dettagliata dell'anno ${yearToAnalyze} (fino a ${getMonthName(month)}):\\n\\n`;\n    \n    analysis += `Nel periodo analizzato, sono stati effettuati un totale di ${formatNumber(totalTurni)} turni, `;\n    analysis += `con una media mensile di ${formatNumber(averageMonthlyTurni)} turni. `;\n    \n    if (totalTurni > avgPreviousYears) {\n      analysis += `Questo rappresenta un aumento del ${formatNumber(((totalTurni / avgPreviousYears) - 1) * 100)}% `;\n      analysis += `rispetto alla media degli anni precedenti nello stesso periodo. `;\n    } else if (totalTurni < avgPreviousYears) {\n      analysis += `Questo rappresenta una diminuzione del ${formatNumber(((avgPreviousYears / totalTurni) - 1) * 100)}% `;\n      analysis += `rispetto alla media degli anni precedenti nello stesso periodo. `;\n    } else {\n      analysis += `Questo è in linea con la media degli anni precedenti nello stesso periodo. `;\n    }\n  \n    analysis += `\\n\\nIl trend degli ultimi tre mesi è ${trend}. `;\n  \n    if (trend === \"crescente\") {\n      analysis += `Questo potrebbe indicare un aumento della domanda o un'espansione delle attività dello studio. `;\n    } else if (trend === \"decrescente\") {\n      analysis += `Questo potrebbe suggerire una riduzione della domanda o possibili sfide operative. `;\n    }\n  \n    analysis += `\\n\\nConfrontando con gli anni precedenti:\\n`;\n    previousYearsData.forEach(({ year, totalTurni: prevYearTotal }) => {\n      const diff = totalTurni - prevYearTotal;\n      const percentDiff = (diff / prevYearTotal) * 100;\n      analysis += `- ${year}: ${diff > 0 ? 'aumento' : 'diminuzione'} del ${formatNumber(Math.abs(percentDiff))}%\\n`;\n    });\n  \n    analysis += `\\nQuesti dati suggeriscono che `;\n    if (totalTurni > avgPreviousYears) {\n      analysis += `l'anno ${yearToAnalyze} sta mostrando una performance superiore alla media storica. `;\n      analysis += `Potrebbe essere opportuno valutare se le risorse attuali sono sufficienti per gestire questo aumento di attività. `;\n    } else if (totalTurni < avgPreviousYears) {\n      analysis += `l'anno ${yearToAnalyze} sta mostrando una performance inferiore alla media storica. `;\n      analysis += `Potrebbe essere utile analizzare le cause di questa diminuzione e considerare strategie per stimolare la domanda. `;\n    } else {\n      analysis += `l'anno ${yearToAnalyze} sta mantenendo una performance in linea con la media storica. `;\n      analysis += `Questo suggerisce una stabilità nelle operazioni dello studio. `;\n    }\n  \n    analysis += `\\n\\nRaccomandazioni:\n    1. Monitorare attentamente il trend nei prossimi mesi per adattare le risorse in modo proattivo.\n    2. Considerare un'analisi più approfondita dei fattori che influenzano la domanda di turni.\n    3. Valutare l'efficienza operativa e considerare eventuali ottimizzazioni dei processi.`;\n  \n    return analysis;\n  }, []);\n\n  const makePrediction = useCallback((year, month, allYearsData) => {\n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        if (y !== 2020 && y !== year) {\n          const yearData = allYearsData[y];\n          if (yearData && yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n            totalTurni += yearData[i - 1].totaleTurni;\n            yearsCount++;\n          }\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`• ${getMonthName(i)}: ${formatNumber(averageTurni)} turni`);\n      }\n    }\n\n    return `\n      Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n      ${futurePredictions.join('\\n')}\n    `;\n  }, [availableYears]);\n\n  const formatChartData = useCallback(() => {\n    const chartData = [];\n    \n    const calculateAverageForMonth = (month) => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return Math.round(sum / relevantYears.length);\n    };\n  \n    for (let month = 0; month < 12; month++) {\n      const monthData = { month: getMonthName(month + 1) };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth - 1) {\n            // Dati reali per i mesi passati\n            monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n            monthData[`${year}IsPrediction`] = false;\n          } else {\n            // Previsione per il mese corrente e i mesi futuri\n            monthData[year] = calculateAverageForMonth(month);\n            monthData[`${year}IsPrediction`] = true;\n          }\n        } else {\n          // Dati degli anni passati\n          monthData[year] = yearData && yearData[month] ? Math.round(yearData[month].totaleTurni) : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  }, [allYearsData, availableYears, currentYear, currentMonth]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const yearsData = {};\n      for (const year of availableYears) {\n        yearsData[year] = await getYearlyData(year);\n      }\n      setAllYearsData(yearsData);\n\n      setYearConclusions(generateYearConclusions(currentYear, currentMonth, yearsData, yearsData));\n      setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n    };\n\n    fetchData();\n  }, [currentYear, currentMonth, availableYears, generateYearConclusions, makePrediction]);\n\n  const chartData = useMemo(() => formatChartData(), [formatChartData]);\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <ViewTitle>Performance Trend</ViewTitle>\n        <ChartContainer>\n          <AnalysisTitle>Trend annuale</AnalysisTitle>\n          <ResponsiveContainer width=\"100%\" height={400}>\n  <LineChart data={chartData}>\n    <CartesianGrid strokeDasharray=\"3 3\" />\n    <XAxis dataKey=\"month\" />\n    <YAxis />\n    <Tooltip />\n    {availableYears.map((year, index) => {\n      const isCurrentYear = year === currentYear;\n      if (isCurrentYear) {\n        return (\n          <React.Fragment key={year}>\n            {/* Linea per i dati reali dell'anno corrente */}\n            <Line\n              type=\"monotone\"\n              dataKey={(dataPoint) => dataPoint[`${year}IsPrediction`] ? undefined : dataPoint[year]}\n              stroke={colorPalette[index]}\n              strokeWidth={3}\n              dot={false}\n              connectNulls={true}\n            />\n            {/* Linea tratteggiata per i dati previsionali dell'anno corrente */}\n            <Line\n              type=\"monotone\"\n              dataKey={(dataPoint) => {\n                if (dataPoint[`${year}IsPrediction`]) {\n                  return dataPoint[year];\n                }\n                // Restituisce il valore dell'ultimo mese reale per connettere le linee\n                const lastRealMonth = chartData.findIndex(d => d[`${year}IsPrediction`]) - 1;\n                return dataPoint === chartData[lastRealMonth] ? dataPoint[year] : undefined;\n              }}\n              stroke={colorPalette[index]}\n              strokeWidth={3}\n              strokeDasharray=\"5 5\"\n              dot={false}\n              connectNulls={true}\n            />\n          </React.Fragment>\n        );\n      } else {\n        return (\n          <Line\n            key={year}\n            type=\"monotone\"\n            dataKey={year.toString()}\n            stroke={colorPalette[index]}\n            strokeWidth={1}\n            dot={false}\n          />\n        );\n      }\n    })}\n  </LineChart>\n</ResponsiveContainer>\n          <LegendContainer>\n            {availableYears.map((year, index) => (\n              <LegendItem key={year}>\n                <LegendColor color={colorPalette[index]} />\n                <span>{year === currentYear ? `${year} (linea continua: dati reali, tratteggiata: previsione)` : year}</span>\n              </LegendItem>\n            ))}\n          </LegendContainer>\n        </ChartContainer>\n        <AnalysisSection>\n          <AnalysisTitle>Conclusioni sull'anno in corso</AnalysisTitle>\n          <AnalysisText>{yearConclusions}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Previsione per i prossimi mesi</AnalysisTitle>\n          <AnalysisText>{prediction}</AnalysisText>\n        </AnalysisSection>\n        <BackButton onClick={() => setView('main')}>Torna alla Dashboard</BackButton>\n      </ViewContent>\n    </ViewContainer>\n  );\n};\n\nexport default PerformanceTrendView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}