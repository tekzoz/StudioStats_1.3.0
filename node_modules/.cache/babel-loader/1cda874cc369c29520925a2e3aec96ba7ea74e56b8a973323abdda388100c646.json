{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from 'recharts';\nimport { getMonthData, getAvailableMonths, getYearlyData, getCurrentYearAndMonth, getMonthName, getAvailableYears } from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n_c = ViewContainer;\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c2 = ViewContent;\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n_c3 = ViewTitle;\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c4 = ChartContainer;\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c5 = AnalysisSection;\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n_c6 = AnalysisTitle;\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n`;\n_c7 = AnalysisText;\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n_c8 = BackButton;\nconst PerformanceTrendView = ({\n  setView\n}) => {\n  _s();\n  const [yearlyData, setYearlyData] = useState({});\n  const [lastMonthAnalysis, setLastMonthAnalysis] = useState('');\n  const [quadrimesterAnalysis, setQuadrimesterAnalysis] = useState('');\n  const [yearAnalysis, setYearAnalysis] = useState('');\n  const [prediction, setPrediction] = useState('');\n  const [quadrimesterChartData, setQuadrimesterChartData] = useState([]);\n  useEffect(() => {\n    const {\n      currentYear,\n      currentMonth\n    } = getCurrentYearAndMonth();\n    const data = getYearlyData(currentYear);\n    setYearlyData(data);\n    const analyses = performAnalyses(currentYear, currentMonth);\n    setLastMonthAnalysis(analyses.lastMonth);\n    setQuadrimesterAnalysis(analyses.quadrimester);\n    setYearAnalysis(analyses.year);\n    setPrediction(analyses.prediction);\n    setQuadrimesterChartData(analyses.quadrimesterChart);\n  }, []);\n  const performAnalyses = (year, month) => {\n    const lastMonthData = analyzeLastMonth();\n    const quadrimesterData = analyzeQuadrimester();\n    const yearData = analyzeYear(year, month);\n    const predictionData = makePrediction(year, month);\n    return {\n      lastMonth: lastMonthData.analysis,\n      quadrimester: quadrimesterData.analysis,\n      year: yearData,\n      prediction: predictionData,\n      quadrimesterChart: quadrimesterData.chartData\n    };\n  };\n  const analyzeLastMonth = () => {\n    const availableMonths = getAvailableMonths();\n    const lastAvailableMonth = availableMonths[0].value;\n    const [lastYear, lastMonth] = lastAvailableMonth.split('-').map(Number);\n    const lastMonthData = getMonthData(lastAvailableMonth);\n    if (!lastMonthData) return {\n      analysis: \"Dati non disponibili per l'ultimo mese.\"\n    };\n    const {\n      totaleTurni,\n      mediaGiornaliera,\n      massimoTurni,\n      minimoTurni\n    } = lastMonthData;\n    const monthName = getMonthName(lastMonth);\n    const analysis = `\n      Nel mese di ${monthName} ${lastYear}:\n      • Totale turni: ${totaleTurni}\n      • Media giornaliera: ${mediaGiornaliera.toFixed(2)} turni\n      • Giorno più impegnativo: ${massimoTurni.day} con ${massimoTurni.shifts} turni\n      • Giorno meno impegnativo: ${minimoTurni.day} con ${minimoTurni.shifts} turni\n    `;\n    return {\n      analysis\n    };\n  };\n  const analyzeQuadrimester = () => {\n    const availableMonths = getAvailableMonths();\n    const lastFourMonths = availableMonths.slice(0, 4);\n    let totalTurni = 0;\n    let totalDays = 0;\n    const monthsAnalysis = lastFourMonths.map(monthObj => {\n      const monthData = getMonthData(monthObj.value);\n      if (monthData) {\n        totalTurni += monthData.totaleTurni;\n        totalDays += Object.keys(monthData.days).length;\n        return {\n          month: monthObj.label,\n          turni: monthData.totaleTurni\n        };\n      }\n      return {\n        month: monthObj.label,\n        turni: 0\n      };\n    });\n    const averageTurni = totalTurni / totalDays;\n    const analysis = `\n      Analisi degli ultimi 4 mesi:\n      ${monthsAnalysis.map(m => `• ${m.month}: ${m.turni} turni`).join('\\n')}\n      \n      In totale, negli ultimi 4 mesi:\n      • Turni effettuati: ${totalTurni}\n      • Media giornaliera: ${averageTurni.toFixed(2)} turni\n    `;\n    return {\n      analysis,\n      chartData: monthsAnalysis\n    };\n  };\n  const analyzeYear = (year, month) => {\n    const yearData = getYearlyData(year);\n    const totalTurni = Object.values(yearData).reduce((sum, month) => sum + month.totaleTurni, 0);\n    const monthsWithData = Object.values(yearData).filter(month => month.totaleTurni > 0).length;\n    const averageMonthlyTurni = totalTurni / monthsWithData;\n    const monthsComparison = Object.entries(yearData).map(([monthIndex, data]) => {\n      const monthName = getMonthName(parseInt(monthIndex) + 1);\n      const difference = data.totaleTurni - averageMonthlyTurni;\n      return `• ${monthName}: ${difference > 0 ? '+' : ''}${difference.toFixed(0)} rispetto alla media`;\n    }).filter((_, index) => index < month);\n    return `\n      Nell'anno ${year}, fino ad ora:\n      • Totale turni: ${totalTurni}\n      • Media mensile: ${averageMonthlyTurni.toFixed(2)} turni\n      \n      Confronto dei mesi rispetto alla media:\n      ${monthsComparison.join('\\n')}\n    `;\n  };\n  const makePrediction = (year, month) => {\n    const availableYears = getAvailableYears().map(y => parseInt(y.value));\n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = getYearlyData(y);\n        if (yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`• ${getMonthName(i)}: ${averageTurni.toFixed(0)} turni`);\n      }\n    }\n    return `\n      Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n      ${futurePredictions.join('\\n')}\n    `;\n  };\n  const formatYearlyChartData = data => {\n    return Object.entries(data).map(([month, value]) => ({\n      month: getMonthName(parseInt(month) + 1),\n      turni: value.totaleTurni\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(ViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(ViewContent, {\n      children: [/*#__PURE__*/_jsxDEV(ViewTitle, {\n        children: \"Performance Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Trend annuale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: formatYearlyChartData(yearlyData),\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"turni\",\n              stroke: \"#3B82F6\",\n              activeDot: {\n                r: 8\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Ultimi 4 mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: quadrimesterChartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"turni\",\n              fill: \"#3B82F6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Analisi dell'ultimo mese\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: lastMonthAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Considerazioni sugli ultimi 4 mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: quadrimesterAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Conclusioni sull'anno in corso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: yearAnalysis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnalysisSection, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Previsione per i prossimi mesi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisText, {\n          children: prediction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BackButton, {\n        onClick: () => setView('main'),\n        children: \"Torna alla Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceTrendView, \"PQOidyLn2aeVBfPKT1ue3HFcMOo=\");\n_c9 = PerformanceTrendView;\nexport default PerformanceTrendView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"ViewContainer\");\n$RefreshReg$(_c2, \"ViewContent\");\n$RefreshReg$(_c3, \"ViewTitle\");\n$RefreshReg$(_c4, \"ChartContainer\");\n$RefreshReg$(_c5, \"AnalysisSection\");\n$RefreshReg$(_c6, \"AnalysisTitle\");\n$RefreshReg$(_c7, \"AnalysisText\");\n$RefreshReg$(_c8, \"BackButton\");\n$RefreshReg$(_c9, \"PerformanceTrendView\");","map":{"version":3,"names":["React","useState","useEffect","styled","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","BarChart","Bar","getMonthData","getAvailableMonths","getYearlyData","getCurrentYearAndMonth","getMonthName","getAvailableYears","jsxDEV","_jsxDEV","ViewContainer","div","_c","ViewContent","_c2","ViewTitle","h1","_c3","ChartContainer","_c4","AnalysisSection","_c5","AnalysisTitle","h2","_c6","AnalysisText","p","_c7","BackButton","button","_c8","PerformanceTrendView","setView","_s","yearlyData","setYearlyData","lastMonthAnalysis","setLastMonthAnalysis","quadrimesterAnalysis","setQuadrimesterAnalysis","yearAnalysis","setYearAnalysis","prediction","setPrediction","quadrimesterChartData","setQuadrimesterChartData","currentYear","currentMonth","data","analyses","performAnalyses","lastMonth","quadrimester","year","quadrimesterChart","month","lastMonthData","analyzeLastMonth","quadrimesterData","analyzeQuadrimester","yearData","analyzeYear","predictionData","makePrediction","analysis","chartData","availableMonths","lastAvailableMonth","value","lastYear","split","map","Number","totaleTurni","mediaGiornaliera","massimoTurni","minimoTurni","monthName","toFixed","day","shifts","lastFourMonths","slice","totalTurni","totalDays","monthsAnalysis","monthObj","monthData","Object","keys","days","length","label","turni","averageTurni","m","join","values","reduce","sum","monthsWithData","filter","averageMonthlyTurni","monthsComparison","entries","monthIndex","parseInt","difference","_","index","availableYears","y","futurePredictions","i","yearsCount","forEach","push","formatYearlyChartData","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","type","stroke","activeDot","r","fill","onClick","_c9","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from 'recharts';\nimport { \n  getMonthData, \n  getAvailableMonths, \n  getYearlyData, \n  getCurrentYearAndMonth,\n  getMonthName,\n  getAvailableYears\n} from './data';\n\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n`;\n\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\nconst PerformanceTrendView = ({ setView }) => {\n  const [yearlyData, setYearlyData] = useState({});\n  const [lastMonthAnalysis, setLastMonthAnalysis] = useState('');\n  const [quadrimesterAnalysis, setQuadrimesterAnalysis] = useState('');\n  const [yearAnalysis, setYearAnalysis] = useState('');\n  const [prediction, setPrediction] = useState('');\n  const [quadrimesterChartData, setQuadrimesterChartData] = useState([]);\n\n  useEffect(() => {\n    const { currentYear, currentMonth } = getCurrentYearAndMonth();\n    const data = getYearlyData(currentYear);\n    setYearlyData(data);\n\n    const analyses = performAnalyses(currentYear, currentMonth);\n    setLastMonthAnalysis(analyses.lastMonth);\n    setQuadrimesterAnalysis(analyses.quadrimester);\n    setYearAnalysis(analyses.year);\n    setPrediction(analyses.prediction);\n    setQuadrimesterChartData(analyses.quadrimesterChart);\n  }, []);\n\n  const performAnalyses = (year, month) => {\n    const lastMonthData = analyzeLastMonth();\n    const quadrimesterData = analyzeQuadrimester();\n    const yearData = analyzeYear(year, month);\n    const predictionData = makePrediction(year, month);\n\n    return {\n      lastMonth: lastMonthData.analysis,\n      quadrimester: quadrimesterData.analysis,\n      year: yearData,\n      prediction: predictionData,\n      quadrimesterChart: quadrimesterData.chartData\n    };\n  };\n\n  const analyzeLastMonth = () => {\n    const availableMonths = getAvailableMonths();\n    const lastAvailableMonth = availableMonths[0].value;\n    const [lastYear, lastMonth] = lastAvailableMonth.split('-').map(Number);\n    const lastMonthData = getMonthData(lastAvailableMonth);\n\n    if (!lastMonthData) return { analysis: \"Dati non disponibili per l'ultimo mese.\" };\n\n    const { totaleTurni, mediaGiornaliera, massimoTurni, minimoTurni } = lastMonthData;\n    const monthName = getMonthName(lastMonth);\n\n    const analysis = `\n      Nel mese di ${monthName} ${lastYear}:\n      • Totale turni: ${totaleTurni}\n      • Media giornaliera: ${mediaGiornaliera.toFixed(2)} turni\n      • Giorno più impegnativo: ${massimoTurni.day} con ${massimoTurni.shifts} turni\n      • Giorno meno impegnativo: ${minimoTurni.day} con ${minimoTurni.shifts} turni\n    `;\n\n    return { analysis };\n  };\n\n  const analyzeQuadrimester = () => {\n    const availableMonths = getAvailableMonths();\n    const lastFourMonths = availableMonths.slice(0, 4);\n    let totalTurni = 0;\n    let totalDays = 0;\n\n    const monthsAnalysis = lastFourMonths.map(monthObj => {\n      const monthData = getMonthData(monthObj.value);\n      if (monthData) {\n        totalTurni += monthData.totaleTurni;\n        totalDays += Object.keys(monthData.days).length;\n        return { month: monthObj.label, turni: monthData.totaleTurni };\n      }\n      return { month: monthObj.label, turni: 0 };\n    });\n\n    const averageTurni = totalTurni / totalDays;\n\n    const analysis = `\n      Analisi degli ultimi 4 mesi:\n      ${monthsAnalysis.map(m => `• ${m.month}: ${m.turni} turni`).join('\\n')}\n      \n      In totale, negli ultimi 4 mesi:\n      • Turni effettuati: ${totalTurni}\n      • Media giornaliera: ${averageTurni.toFixed(2)} turni\n    `;\n\n    return { analysis, chartData: monthsAnalysis };\n  };\n\n  const analyzeYear = (year, month) => {\n    const yearData = getYearlyData(year);\n    const totalTurni = Object.values(yearData).reduce((sum, month) => sum + month.totaleTurni, 0);\n    const monthsWithData = Object.values(yearData).filter(month => month.totaleTurni > 0).length;\n    const averageMonthlyTurni = totalTurni / monthsWithData;\n\n    const monthsComparison = Object.entries(yearData)\n      .map(([monthIndex, data]) => {\n        const monthName = getMonthName(parseInt(monthIndex) + 1);\n        const difference = data.totaleTurni - averageMonthlyTurni;\n        return `• ${monthName}: ${difference > 0 ? '+' : ''}${difference.toFixed(0)} rispetto alla media`;\n      })\n      .filter((_, index) => index < month);\n\n    return `\n      Nell'anno ${year}, fino ad ora:\n      • Totale turni: ${totalTurni}\n      • Media mensile: ${averageMonthlyTurni.toFixed(2)} turni\n      \n      Confronto dei mesi rispetto alla media:\n      ${monthsComparison.join('\\n')}\n    `;\n  };\n\n  const makePrediction = (year, month) => {\n    const availableYears = getAvailableYears().map(y => parseInt(y.value));\n    \n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = getYearlyData(y);\n        if (yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`• ${getMonthName(i)}: ${averageTurni.toFixed(0)} turni`);\n      }\n    }\n\n    return `\n      Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n      ${futurePredictions.join('\\n')}\n    `;\n  };\n\n  const formatYearlyChartData = (data) => {\n    return Object.entries(data).map(([month, value]) => ({\n      month: getMonthName(parseInt(month) + 1),\n      turni: value.totaleTurni\n    }));\n  };\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <ViewTitle>Performance Trend</ViewTitle>\n        <ChartContainer>\n          <AnalysisTitle>Trend annuale</AnalysisTitle>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={formatYearlyChartData(yearlyData)}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"turni\" stroke=\"#3B82F6\" activeDot={{ r: 8 }} />\n            </LineChart>\n          </ResponsiveContainer>\n        </ChartContainer>\n        <ChartContainer>\n          <AnalysisTitle>Ultimi 4 mesi</AnalysisTitle>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={quadrimesterChartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"turni\" fill=\"#3B82F6\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </ChartContainer>\n        <AnalysisSection>\n          <AnalysisTitle>Analisi dell'ultimo mese</AnalysisTitle>\n          <AnalysisText>{lastMonthAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Considerazioni sugli ultimi 4 mesi</AnalysisTitle>\n          <AnalysisText>{quadrimesterAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Conclusioni sull'anno in corso</AnalysisTitle>\n          <AnalysisText>{yearAnalysis}</AnalysisText>\n        </AnalysisSection>\n        <AnalysisSection>\n          <AnalysisTitle>Previsione per i prossimi mesi</AnalysisTitle>\n          <AnalysisText>{prediction}</AnalysisText>\n        </AnalysisSection>\n        <BackButton onClick={() => setView('main')}>Torna alla Dashboard</BackButton>\n      </ViewContent>\n    </ViewContainer>\n  );\n};\n\nexport default PerformanceTrendView;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,MAAM,EAAEC,mBAAmB,EAAEC,QAAQ,EAAEC,GAAG,QAAQ,UAAU;AAC5H,SACEC,YAAY,EACZC,kBAAkB,EAClBC,aAAa,EACbC,sBAAsB,EACtBC,YAAY,EACZC,iBAAiB,QACZ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhB,MAAMC,aAAa,GAAGnB,MAAM,CAACoB,GAAG;AAChC;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,aAAa;AAOnB,MAAMG,WAAW,GAAGtB,MAAM,CAACoB,GAAG;AAC9B;AACA;AACA,CAAC;AAACG,GAAA,GAHID,WAAW;AAKjB,MAAME,SAAS,GAAGxB,MAAM,CAACyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GANIF,SAAS;AAQf,MAAMG,cAAc,GAAG3B,MAAM,CAACoB,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA,CAAC;AAACQ,GAAA,GANID,cAAc;AAQpB,MAAME,eAAe,GAAG7B,MAAM,CAACoB,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA,CAAC;AAACU,GAAA,GANID,eAAe;AAQrB,MAAME,aAAa,GAAG/B,MAAM,CAACgC,EAAE;AAC/B;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GALIF,aAAa;AAOnB,MAAMG,YAAY,GAAGlC,MAAM,CAACmC,CAAC;AAC7B;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAJIF,YAAY;AAMlB,MAAMG,UAAU,GAAGrC,MAAM,CAACsC,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAdIF,UAAU;AAgBhB,MAAMG,oBAAoB,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAG9C,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAAC+C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhD,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACiD,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGlD,QAAQ,CAAC,EAAE,CAAC;EACpE,MAAM,CAACmD,YAAY,EAAEC,eAAe,CAAC,GAAGpD,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACqD,UAAU,EAAEC,aAAa,CAAC,GAAGtD,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACuD,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGxD,QAAQ,CAAC,EAAE,CAAC;EAEtEC,SAAS,CAAC,MAAM;IACd,MAAM;MAAEwD,WAAW;MAAEC;IAAa,CAAC,GAAG1C,sBAAsB,CAAC,CAAC;IAC9D,MAAM2C,IAAI,GAAG5C,aAAa,CAAC0C,WAAW,CAAC;IACvCX,aAAa,CAACa,IAAI,CAAC;IAEnB,MAAMC,QAAQ,GAAGC,eAAe,CAACJ,WAAW,EAAEC,YAAY,CAAC;IAC3DV,oBAAoB,CAACY,QAAQ,CAACE,SAAS,CAAC;IACxCZ,uBAAuB,CAACU,QAAQ,CAACG,YAAY,CAAC;IAC9CX,eAAe,CAACQ,QAAQ,CAACI,IAAI,CAAC;IAC9BV,aAAa,CAACM,QAAQ,CAACP,UAAU,CAAC;IAClCG,wBAAwB,CAACI,QAAQ,CAACK,iBAAiB,CAAC;EACtD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMJ,eAAe,GAAGA,CAACG,IAAI,EAAEE,KAAK,KAAK;IACvC,MAAMC,aAAa,GAAGC,gBAAgB,CAAC,CAAC;IACxC,MAAMC,gBAAgB,GAAGC,mBAAmB,CAAC,CAAC;IAC9C,MAAMC,QAAQ,GAAGC,WAAW,CAACR,IAAI,EAAEE,KAAK,CAAC;IACzC,MAAMO,cAAc,GAAGC,cAAc,CAACV,IAAI,EAAEE,KAAK,CAAC;IAElD,OAAO;MACLJ,SAAS,EAAEK,aAAa,CAACQ,QAAQ;MACjCZ,YAAY,EAAEM,gBAAgB,CAACM,QAAQ;MACvCX,IAAI,EAAEO,QAAQ;MACdlB,UAAU,EAAEoB,cAAc;MAC1BR,iBAAiB,EAAEI,gBAAgB,CAACO;IACtC,CAAC;EACH,CAAC;EAED,MAAMR,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMS,eAAe,GAAG/D,kBAAkB,CAAC,CAAC;IAC5C,MAAMgE,kBAAkB,GAAGD,eAAe,CAAC,CAAC,CAAC,CAACE,KAAK;IACnD,MAAM,CAACC,QAAQ,EAAElB,SAAS,CAAC,GAAGgB,kBAAkB,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;IACvE,MAAMhB,aAAa,GAAGtD,YAAY,CAACiE,kBAAkB,CAAC;IAEtD,IAAI,CAACX,aAAa,EAAE,OAAO;MAAEQ,QAAQ,EAAE;IAA0C,CAAC;IAElF,MAAM;MAAES,WAAW;MAAEC,gBAAgB;MAAEC,YAAY;MAAEC;IAAY,CAAC,GAAGpB,aAAa;IAClF,MAAMqB,SAAS,GAAGvE,YAAY,CAAC6C,SAAS,CAAC;IAEzC,MAAMa,QAAQ,GAAG;AACrB,oBAAoBa,SAAS,IAAIR,QAAQ;AACzC,wBAAwBI,WAAW;AACnC,6BAA6BC,gBAAgB,CAACI,OAAO,CAAC,CAAC,CAAC;AACxD,kCAAkCH,YAAY,CAACI,GAAG,QAAQJ,YAAY,CAACK,MAAM;AAC7E,mCAAmCJ,WAAW,CAACG,GAAG,QAAQH,WAAW,CAACI,MAAM;AAC5E,KAAK;IAED,OAAO;MAAEhB;IAAS,CAAC;EACrB,CAAC;EAED,MAAML,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMO,eAAe,GAAG/D,kBAAkB,CAAC,CAAC;IAC5C,MAAM8E,cAAc,GAAGf,eAAe,CAACgB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAClD,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,SAAS,GAAG,CAAC;IAEjB,MAAMC,cAAc,GAAGJ,cAAc,CAACV,GAAG,CAACe,QAAQ,IAAI;MACpD,MAAMC,SAAS,GAAGrF,YAAY,CAACoF,QAAQ,CAAClB,KAAK,CAAC;MAC9C,IAAImB,SAAS,EAAE;QACbJ,UAAU,IAAII,SAAS,CAACd,WAAW;QACnCW,SAAS,IAAII,MAAM,CAACC,IAAI,CAACF,SAAS,CAACG,IAAI,CAAC,CAACC,MAAM;QAC/C,OAAO;UAAEpC,KAAK,EAAE+B,QAAQ,CAACM,KAAK;UAAEC,KAAK,EAAEN,SAAS,CAACd;QAAY,CAAC;MAChE;MACA,OAAO;QAAElB,KAAK,EAAE+B,QAAQ,CAACM,KAAK;QAAEC,KAAK,EAAE;MAAE,CAAC;IAC5C,CAAC,CAAC;IAEF,MAAMC,YAAY,GAAGX,UAAU,GAAGC,SAAS;IAE3C,MAAMpB,QAAQ,GAAG;AACrB;AACA,QAAQqB,cAAc,CAACd,GAAG,CAACwB,CAAC,IAAI,KAAKA,CAAC,CAACxC,KAAK,KAAKwC,CAAC,CAACF,KAAK,QAAQ,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;AAC5E;AACA;AACA,4BAA4Bb,UAAU;AACtC,6BAA6BW,YAAY,CAAChB,OAAO,CAAC,CAAC,CAAC;AACpD,KAAK;IAED,OAAO;MAAEd,QAAQ;MAAEC,SAAS,EAAEoB;IAAe,CAAC;EAChD,CAAC;EAED,MAAMxB,WAAW,GAAGA,CAACR,IAAI,EAAEE,KAAK,KAAK;IACnC,MAAMK,QAAQ,GAAGxD,aAAa,CAACiD,IAAI,CAAC;IACpC,MAAM8B,UAAU,GAAGK,MAAM,CAACS,MAAM,CAACrC,QAAQ,CAAC,CAACsC,MAAM,CAAC,CAACC,GAAG,EAAE5C,KAAK,KAAK4C,GAAG,GAAG5C,KAAK,CAACkB,WAAW,EAAE,CAAC,CAAC;IAC7F,MAAM2B,cAAc,GAAGZ,MAAM,CAACS,MAAM,CAACrC,QAAQ,CAAC,CAACyC,MAAM,CAAC9C,KAAK,IAAIA,KAAK,CAACkB,WAAW,GAAG,CAAC,CAAC,CAACkB,MAAM;IAC5F,MAAMW,mBAAmB,GAAGnB,UAAU,GAAGiB,cAAc;IAEvD,MAAMG,gBAAgB,GAAGf,MAAM,CAACgB,OAAO,CAAC5C,QAAQ,CAAC,CAC9CW,GAAG,CAAC,CAAC,CAACkC,UAAU,EAAEzD,IAAI,CAAC,KAAK;MAC3B,MAAM6B,SAAS,GAAGvE,YAAY,CAACoG,QAAQ,CAACD,UAAU,CAAC,GAAG,CAAC,CAAC;MACxD,MAAME,UAAU,GAAG3D,IAAI,CAACyB,WAAW,GAAG6B,mBAAmB;MACzD,OAAO,KAAKzB,SAAS,KAAK8B,UAAU,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAGA,UAAU,CAAC7B,OAAO,CAAC,CAAC,CAAC,sBAAsB;IACnG,CAAC,CAAC,CACDuB,MAAM,CAAC,CAACO,CAAC,EAAEC,KAAK,KAAKA,KAAK,GAAGtD,KAAK,CAAC;IAEtC,OAAO;AACX,kBAAkBF,IAAI;AACtB,wBAAwB8B,UAAU;AAClC,yBAAyBmB,mBAAmB,CAACxB,OAAO,CAAC,CAAC,CAAC;AACvD;AACA;AACA,QAAQyB,gBAAgB,CAACP,IAAI,CAAC,IAAI,CAAC;AACnC,KAAK;EACH,CAAC;EAED,MAAMjC,cAAc,GAAGA,CAACV,IAAI,EAAEE,KAAK,KAAK;IACtC,MAAMuD,cAAc,GAAGvG,iBAAiB,CAAC,CAAC,CAACgE,GAAG,CAACwC,CAAC,IAAIL,QAAQ,CAACK,CAAC,CAAC3C,KAAK,CAAC,CAAC;IAEtE,MAAM4C,iBAAiB,GAAG,EAAE;IAC5B,KAAK,IAAIC,CAAC,GAAG1D,KAAK,GAAG,CAAC,EAAE0D,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;MACpC,IAAI9B,UAAU,GAAG,CAAC;MAClB,IAAI+B,UAAU,GAAG,CAAC;MAClBJ,cAAc,CAACK,OAAO,CAACJ,CAAC,IAAI;QAC1B,MAAMnD,QAAQ,GAAGxD,aAAa,CAAC2G,CAAC,CAAC;QACjC,IAAInD,QAAQ,CAACqD,CAAC,GAAG,CAAC,CAAC,IAAIrD,QAAQ,CAACqD,CAAC,GAAG,CAAC,CAAC,CAACxC,WAAW,GAAG,CAAC,EAAE;UACtDU,UAAU,IAAIvB,QAAQ,CAACqD,CAAC,GAAG,CAAC,CAAC,CAACxC,WAAW;UACzCyC,UAAU,EAAE;QACd;MACF,CAAC,CAAC;MACF,IAAIA,UAAU,GAAG,CAAC,EAAE;QAClB,MAAMpB,YAAY,GAAGX,UAAU,GAAG+B,UAAU;QAC5CF,iBAAiB,CAACI,IAAI,CAAC,KAAK9G,YAAY,CAAC2G,CAAC,CAAC,KAAKnB,YAAY,CAAChB,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC;MAClF;IACF;IAEA,OAAO;AACX,kDAAkDzB,IAAI;AACtD,QAAQ2D,iBAAiB,CAAChB,IAAI,CAAC,IAAI,CAAC;AACpC,KAAK;EACH,CAAC;EAED,MAAMqB,qBAAqB,GAAIrE,IAAI,IAAK;IACtC,OAAOwC,MAAM,CAACgB,OAAO,CAACxD,IAAI,CAAC,CAACuB,GAAG,CAAC,CAAC,CAAChB,KAAK,EAAEa,KAAK,CAAC,MAAM;MACnDb,KAAK,EAAEjD,YAAY,CAACoG,QAAQ,CAACnD,KAAK,CAAC,GAAG,CAAC,CAAC;MACxCsC,KAAK,EAAEzB,KAAK,CAACK;IACf,CAAC,CAAC,CAAC;EACL,CAAC;EAED,oBACEhE,OAAA,CAACC,aAAa;IAAA4G,QAAA,eACZ7G,OAAA,CAACI,WAAW;MAAAyG,QAAA,gBACV7G,OAAA,CAACM,SAAS;QAAAuG,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CAAC,eACxCjH,OAAA,CAACS,cAAc;QAAAoG,QAAA,gBACb7G,OAAA,CAACa,aAAa;UAAAgG,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC,eAC5CjH,OAAA,CAACV,mBAAmB;UAAC4H,KAAK,EAAC,MAAM;UAACC,MAAM,EAAE,GAAI;UAAAN,QAAA,eAC5C7G,OAAA,CAACjB,SAAS;YAACwD,IAAI,EAAEqE,qBAAqB,CAACnF,UAAU,CAAE;YAAAoF,QAAA,gBACjD7G,OAAA,CAACb,aAAa;cAACiI,eAAe,EAAC;YAAK;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACvCjH,OAAA,CAACf,KAAK;cAACoI,OAAO,EAAC;YAAO;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACzBjH,OAAA,CAACd,KAAK;cAAA4H,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACTjH,OAAA,CAACZ,OAAO;cAAA0H,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACXjH,OAAA,CAACX,MAAM;cAAAyH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACVjH,OAAA,CAAChB,IAAI;cAACsI,IAAI,EAAC,UAAU;cAACD,OAAO,EAAC,OAAO;cAACE,MAAM,EAAC,SAAS;cAACC,SAAS,EAAE;gBAAEC,CAAC,EAAE;cAAE;YAAE;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,eACjBjH,OAAA,CAACS,cAAc;QAAAoG,QAAA,gBACb7G,OAAA,CAACa,aAAa;UAAAgG,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC,eAC5CjH,OAAA,CAACV,mBAAmB;UAAC4H,KAAK,EAAC,MAAM;UAACC,MAAM,EAAE,GAAI;UAAAN,QAAA,eAC5C7G,OAAA,CAACT,QAAQ;YAACgD,IAAI,EAAEJ,qBAAsB;YAAA0E,QAAA,gBACpC7G,OAAA,CAACb,aAAa;cAACiI,eAAe,EAAC;YAAK;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACvCjH,OAAA,CAACf,KAAK;cAACoI,OAAO,EAAC;YAAO;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACzBjH,OAAA,CAACd,KAAK;cAAA4H,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACTjH,OAAA,CAACZ,OAAO;cAAA0H,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACXjH,OAAA,CAACX,MAAM;cAAAyH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACVjH,OAAA,CAACR,GAAG;cAAC6H,OAAO,EAAC,OAAO;cAACK,IAAI,EAAC;YAAS;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,eACjBjH,OAAA,CAACW,eAAe;QAAAkG,QAAA,gBACd7G,OAAA,CAACa,aAAa;UAAAgG,QAAA,EAAC;QAAwB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC,eACvDjH,OAAA,CAACgB,YAAY;UAAA6F,QAAA,EAAElF;QAAiB;UAAAmF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC,eAClBjH,OAAA,CAACW,eAAe;QAAAkG,QAAA,gBACd7G,OAAA,CAACa,aAAa;UAAAgG,QAAA,EAAC;QAAkC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC,eACjEjH,OAAA,CAACgB,YAAY;UAAA6F,QAAA,EAAEhF;QAAoB;UAAAiF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CAAC,eAClBjH,OAAA,CAACW,eAAe;QAAAkG,QAAA,gBACd7G,OAAA,CAACa,aAAa;UAAAgG,QAAA,EAAC;QAA8B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC,eAC7DjH,OAAA,CAACgB,YAAY;UAAA6F,QAAA,EAAE9E;QAAY;UAAA+E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC,eAClBjH,OAAA,CAACW,eAAe;QAAAkG,QAAA,gBACd7G,OAAA,CAACa,aAAa;UAAAgG,QAAA,EAAC;QAA8B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC,eAC7DjH,OAAA,CAACgB,YAAY;UAAA6F,QAAA,EAAE5E;QAAU;UAAA6E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eAClBjH,OAAA,CAACmB,UAAU;QAACwG,OAAO,EAAEA,CAAA,KAAMpG,OAAO,CAAC,MAAM,CAAE;QAAAsF,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEpB,CAAC;AAACzF,EAAA,CAnMIF,oBAAoB;AAAAsG,GAAA,GAApBtG,oBAAoB;AAqM1B,eAAeA,oBAAoB;AAAC,IAAAnB,EAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAG,GAAA,EAAAG,GAAA,EAAAuG,GAAA;AAAAC,YAAA,CAAA1H,EAAA;AAAA0H,YAAA,CAAAxH,GAAA;AAAAwH,YAAA,CAAArH,GAAA;AAAAqH,YAAA,CAAAnH,GAAA;AAAAmH,YAAA,CAAAjH,GAAA;AAAAiH,YAAA,CAAA9G,GAAA;AAAA8G,YAAA,CAAA3G,GAAA;AAAA2G,YAAA,CAAAxG,GAAA;AAAAwG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}