{"ast":null,"code":"var _jsxFileName = \"/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { getYearlyData, getCurrentYearAndMonth, getAvailableYears } from './data';\n\n// Styled components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n_c = ViewContainer;\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n_c2 = ViewContent;\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n_c3 = ViewTitle;\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n_c4 = ChartContainer;\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n_c5 = AnalysisTitle;\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n_c6 = LegendContainer;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n_c7 = LegendItem;\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n_c8 = LegendColor;\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\nconst getMonthName = monthNumber => {\n  const monthNames = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n  return monthNames[monthNumber - 1];\n};\nconst formatNumber = num => new Intl.NumberFormat('it-IT').format(num);\nconst generateColorPalette = numColors => {\n  const hueStep = 360 / numColors;\n  return Array.from({\n    length: numColors\n  }, (_, i) => `hsl(${i * hueStep}, 70%, 50%)`);\n};\nconst generateYearConclusions = (year, month, yearData, allYearsData) => {\n  const currentYearData = yearData[year] || {};\n  const totalTurni = Object.values(currentYearData).reduce((sum, month) => sum + (month.totaleTurni || 0), 0);\n  const monthsWithData = Object.values(currentYearData).filter(month => month && month.totaleTurni > 0).length;\n  const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n  const lastYear = year - 1;\n  const lastYearData = allYearsData[lastYear] || {};\n  const lastYearTotalTurni = Object.values(lastYearData).reduce((sum, month) => sum + (month.totaleTurni || 0), 0);\n  const percentageChange = lastYearTotalTurni > 0 ? (totalTurni - lastYearTotalTurni) / lastYearTotalTurni * 100 : 0;\n  const monthsData = Object.entries(currentYearData).map(([monthIndex, data]) => ({\n    month: parseInt(monthIndex) + 1,\n    turni: data.totaleTurni || 0\n  })).filter(data => data.month <= month);\n  const maxMonth = monthsData.reduce((max, current) => current.turni > max.turni ? current : max, {\n    turni: 0\n  });\n  const minMonth = monthsData.reduce((min, current) => current.turni < min.turni && current.turni > 0 ? current : min, {\n    turni: Infinity\n  });\n  let conclusions = `Conclusioni per l'anno ${year} (fino a ${getMonthName(month)}):\\n\\n`;\n  conclusions += `• Totale turni effettuati: ${formatNumber(totalTurni)}\\n`;\n  conclusions += `• Media mensile: ${formatNumber(averageMonthlyTurni.toFixed(2))} turni\\n`;\n  if (percentageChange !== 0) {\n    conclusions += `• Variazione rispetto all'anno precedente: ${percentageChange > 0 ? '+' : ''}${percentageChange.toFixed(2)}%\\n`;\n  }\n  conclusions += `• Mese più intenso: ${getMonthName(maxMonth.month)} con ${formatNumber(maxMonth.turni)} turni\\n`;\n  conclusions += `• Mese meno intenso: ${getMonthName(minMonth.month)} con ${formatNumber(minMonth.turni)} turni\\n\\n`;\n  const trend = monthsData.slice(-3).every((data, index, array) => index === 0 || data.turni >= array[index - 1].turni) ? \"crescente\" : monthsData.slice(-3).every((data, index, array) => index === 0 || data.turni <= array[index - 1].turni) ? \"decrescente\" : \"stabile\";\n  conclusions += `Il trend degli ultimi tre mesi è ${trend}. `;\n  if (month < 12) {\n    const remainingMonths = 12 - month;\n    const projectedTotal = totalTurni + averageMonthlyTurni * remainingMonths;\n    conclusions += `Se il trend attuale continua, si prevede di raggiungere circa ${formatNumber(projectedTotal.toFixed(0))} turni entro la fine dell'anno.\\n\\n`;\n  }\n  const previousYearsAverage = Object.entries(allYearsData).filter(([y]) => parseInt(y) < year).reduce((sum, [_, yearData]) => {\n    const yearTotal = Object.values(yearData).reduce((total, month) => total + (month.totaleTurni || 0), 0);\n    return sum + yearTotal;\n  }, 0) / (Object.keys(allYearsData).length - 1);\n  const comparisonWithAverage = (totalTurni / previousYearsAverage - 1) * 100;\n  conclusions += `Rispetto alla media degli anni precedenti, l'anno corrente sta registrando una ${comparisonWithAverage > 0 ? 'crescita' : 'diminuzione'} del ${Math.abs(comparisonWithAverage).toFixed(2)}% nel numero di turni.`;\n  return conclusions;\n};\nconst PerformanceTrendView = ({\n  setView\n}) => {\n  _s();\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearConclusions, setYearConclusions] = useState('');\n  const [prediction, setPrediction] = useState('');\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n  const {\n    currentYear,\n    currentMonth\n  } = getCurrentYearAndMonth();\n  useEffect(() => {\n    const yearsData = {};\n    availableYears.forEach(year => {\n      yearsData[year] = getYearlyData(year);\n    });\n    setAllYearsData(yearsData);\n    setYearConclusions(generateYearConclusions(currentYear, currentMonth, yearsData, yearsData));\n    setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n  }, [currentYear, currentMonth, availableYears]);\n  const makePrediction = (year, month, allYearsData) => {\n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = allYearsData[y];\n        if (yearData && yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`• ${getMonthName(i)}: ${formatNumber(averageTurni.toFixed(0))} turni`);\n      }\n    }\n    return `\n      Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n      ${futurePredictions.join('\\n')}\n    `;\n  };\n  const formatChartData = () => {\n    const chartData = [];\n    const {\n      currentYear,\n      currentMonth\n    } = getCurrentYearAndMonth();\n\n    // Calcola la media degli anni passati per la previsione\n    const calculateAverageForMonth = month => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return sum / relevantYears.length;\n    };\n    for (let month = 0; month < 12; month++) {\n      const monthData = {\n        month: getMonthName(month + 1)\n      };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth) {\n            // Dati reali per i mesi passati\n            monthData[year] = yearData && yearData[month] ? yearData[month].totaleTurni : 0;\n          } else {\n            // Previsione per i mesi futuri\n            monthData[`${year}Prediction`] = calculateAverageForMonth(month);\n          }\n        } else {\n          // Dati degli anni passati\n          monthData[year] = yearData && yearData[month] ? yearData[month].totaleTurni : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  };\n  return /*#__PURE__*/_jsxDEV(ViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(ViewContent, {\n      children: [/*#__PURE__*/_jsxDEV(ViewTitle, {\n        children: \"Performance Trend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: [/*#__PURE__*/_jsxDEV(AnalysisTitle, {\n          children: \"Trend annuale\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: formatChartData(),\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this), availableYears.map((year, index) => {\n              const isCurrentYear = year === getCurrentYearAndMonth().currentYear;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Line, {\n                  type: \"monotone\",\n                  dataKey: year.toString(),\n                  stroke: colorPalette[index],\n                  strokeWidth: isCurrentYear ? 3 : 1,\n                  dot: false\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 21\n                }, this), isCurrentYear && /*#__PURE__*/_jsxDEV(Line, {\n                  type: \"monotone\",\n                  dataKey: `${year}Prediction`,\n                  stroke: colorPalette[index],\n                  strokeWidth: 3,\n                  strokeDasharray: \"5 5\",\n                  dot: false\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 23\n                }, this)]\n              }, year, true, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LegendContainer, {\n          children: availableYears.map((year, index) => /*#__PURE__*/_jsxDEV(LegendItem, {\n            children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n              color: colorPalette[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: year === getCurrentYearAndMonth().currentYear ? `${year} / Previsione ${year}` : year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 17\n            }, this)]\n          }, year, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceTrendView, \"/YO9z9uRi7OzIWOasvZMQnS7g7s=\");\n_c9 = PerformanceTrendView;\nexport default PerformanceTrendView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"ViewContainer\");\n$RefreshReg$(_c2, \"ViewContent\");\n$RefreshReg$(_c3, \"ViewTitle\");\n$RefreshReg$(_c4, \"ChartContainer\");\n$RefreshReg$(_c5, \"AnalysisTitle\");\n$RefreshReg$(_c6, \"LegendContainer\");\n$RefreshReg$(_c7, \"LegendItem\");\n$RefreshReg$(_c8, \"LegendColor\");\n$RefreshReg$(_c9, \"PerformanceTrendView\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","styled","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","getYearlyData","getCurrentYearAndMonth","getAvailableYears","jsxDEV","_jsxDEV","ViewContainer","div","_c","ViewContent","_c2","ViewTitle","h1","_c3","ChartContainer","_c4","AnalysisSection","AnalysisTitle","h2","_c5","AnalysisText","p","LegendContainer","_c6","LegendItem","_c7","LegendColor","props","color","_c8","BackButton","button","getMonthName","monthNumber","monthNames","formatNumber","num","Intl","NumberFormat","format","generateColorPalette","numColors","hueStep","Array","from","length","_","i","generateYearConclusions","year","month","yearData","allYearsData","currentYearData","totalTurni","Object","values","reduce","sum","totaleTurni","monthsWithData","filter","averageMonthlyTurni","lastYear","lastYearData","lastYearTotalTurni","percentageChange","monthsData","entries","map","monthIndex","data","parseInt","turni","maxMonth","max","current","minMonth","min","Infinity","conclusions","toFixed","trend","slice","every","index","array","remainingMonths","projectedTotal","previousYearsAverage","y","yearTotal","total","keys","comparisonWithAverage","Math","abs","PerformanceTrendView","setView","_s","setAllYearsData","yearConclusions","setYearConclusions","prediction","setPrediction","availableYears","value","colorPalette","currentYear","currentMonth","yearsData","forEach","makePrediction","futurePredictions","yearsCount","averageTurni","push","join","formatChartData","chartData","calculateAverageForMonth","relevantYears","acc","monthData","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","isCurrentYear","Fragment","type","toString","stroke","strokeWidth","dot","_c9","$RefreshReg$"],"sources":["/Users/marcoaugustocomba/Documents/GitHub/StudioStats_1.2/src/PerformanceTrendView.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { \n  getYearlyData, \n  getCurrentYearAndMonth,\n  getAvailableYears\n} from './data';\n\n// Styled components\nconst ViewContainer = styled.div`\n  background-color: #F0F9FF;\n  min-height: 100vh;\n  padding: 24px;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n`;\n\nconst ViewContent = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst ViewTitle = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 32px;\n  color: #1F2937;\n`;\n\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisSection = styled.div`\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 24px;\n  margin-bottom: 24px;\n`;\n\nconst AnalysisTitle = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n  color: #1F2937;\n`;\n\nconst AnalysisText = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: #4B5563;\n  white-space: pre-line;\n`;\n\nconst LegendContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n  margin-bottom: 10px;\n`;\n\nconst LegendColor = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 8px;\n  background-color: ${props => props.color};\n`;\n\nconst BackButton = styled.button`\n  background-color: #3B82F6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2563EB;\n  }\n`;\n\n// Helper functions\nconst getMonthName = (monthNumber) => {\n  const monthNames = [\n    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',\n    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'\n  ];\n  return monthNames[monthNumber - 1];\n};\n\nconst formatNumber = (num) => new Intl.NumberFormat('it-IT').format(num);\n\nconst generateColorPalette = (numColors) => {\n  const hueStep = 360 / numColors;\n  return Array.from({ length: numColors }, (_, i) => \n    `hsl(${i * hueStep}, 70%, 50%)`\n  );\n};\n\nconst generateYearConclusions = (year, month, yearData, allYearsData) => {\n  const currentYearData = yearData[year] || {};\n  const totalTurni = Object.values(currentYearData).reduce((sum, month) => sum + (month.totaleTurni || 0), 0);\n  const monthsWithData = Object.values(currentYearData).filter(month => month && month.totaleTurni > 0).length;\n  const averageMonthlyTurni = monthsWithData > 0 ? totalTurni / monthsWithData : 0;\n\n  const lastYear = year - 1;\n  const lastYearData = allYearsData[lastYear] || {};\n  const lastYearTotalTurni = Object.values(lastYearData).reduce((sum, month) => sum + (month.totaleTurni || 0), 0);\n  const percentageChange = lastYearTotalTurni > 0 ? ((totalTurni - lastYearTotalTurni) / lastYearTotalTurni) * 100 : 0;\n\n  const monthsData = Object.entries(currentYearData)\n    .map(([monthIndex, data]) => ({ month: parseInt(monthIndex) + 1, turni: data.totaleTurni || 0 }))\n    .filter(data => data.month <= month);\n  const maxMonth = monthsData.reduce((max, current) => current.turni > max.turni ? current : max, { turni: 0 });\n  const minMonth = monthsData.reduce((min, current) => (current.turni < min.turni && current.turni > 0) ? current : min, { turni: Infinity });\n\n  let conclusions = `Conclusioni per l'anno ${year} (fino a ${getMonthName(month)}):\\n\\n`;\n  \n  conclusions += `• Totale turni effettuati: ${formatNumber(totalTurni)}\\n`;\n  conclusions += `• Media mensile: ${formatNumber(averageMonthlyTurni.toFixed(2))} turni\\n`;\n  \n  if (percentageChange !== 0) {\n    conclusions += `• Variazione rispetto all'anno precedente: ${percentageChange > 0 ? '+' : ''}${percentageChange.toFixed(2)}%\\n`;\n  }\n\n  conclusions += `• Mese più intenso: ${getMonthName(maxMonth.month)} con ${formatNumber(maxMonth.turni)} turni\\n`;\n  conclusions += `• Mese meno intenso: ${getMonthName(minMonth.month)} con ${formatNumber(minMonth.turni)} turni\\n\\n`;\n\n  const trend = monthsData.slice(-3).every((data, index, array) => \n    index === 0 || data.turni >= array[index - 1].turni\n  ) ? \"crescente\" : monthsData.slice(-3).every((data, index, array) => \n    index === 0 || data.turni <= array[index - 1].turni\n  ) ? \"decrescente\" : \"stabile\";\n\n  conclusions += `Il trend degli ultimi tre mesi è ${trend}. `;\n\n  if (month < 12) {\n    const remainingMonths = 12 - month;\n    const projectedTotal = totalTurni + (averageMonthlyTurni * remainingMonths);\n    conclusions += `Se il trend attuale continua, si prevede di raggiungere circa ${formatNumber(projectedTotal.toFixed(0))} turni entro la fine dell'anno.\\n\\n`;\n  }\n\n  const previousYearsAverage = Object.entries(allYearsData)\n    .filter(([y]) => parseInt(y) < year)\n    .reduce((sum, [_, yearData]) => {\n      const yearTotal = Object.values(yearData).reduce((total, month) => total + (month.totaleTurni || 0), 0);\n      return sum + yearTotal;\n    }, 0) / (Object.keys(allYearsData).length - 1);\n\n  const comparisonWithAverage = ((totalTurni / previousYearsAverage) - 1) * 100;\n\n  conclusions += `Rispetto alla media degli anni precedenti, l'anno corrente sta registrando una ${comparisonWithAverage > 0 ? 'crescita' : 'diminuzione'} del ${Math.abs(comparisonWithAverage).toFixed(2)}% nel numero di turni.`;\n\n  return conclusions;\n};\n\nconst PerformanceTrendView = ({ setView }) => {\n  const [allYearsData, setAllYearsData] = useState({});\n  const [yearConclusions, setYearConclusions] = useState('');\n  const [prediction, setPrediction] = useState('');\n\n  const availableYears = useMemo(() => getAvailableYears().map(y => parseInt(y.value)), []);\n  const colorPalette = useMemo(() => generateColorPalette(availableYears.length), [availableYears]);\n\n  const { currentYear, currentMonth } = getCurrentYearAndMonth();\n\n  useEffect(() => {\n    const yearsData = {};\n    availableYears.forEach(year => {\n      yearsData[year] = getYearlyData(year);\n    });\n    setAllYearsData(yearsData);\n\n    setYearConclusions(generateYearConclusions(currentYear, currentMonth, yearsData, yearsData));\n    setPrediction(makePrediction(currentYear, currentMonth, yearsData));\n  }, [currentYear, currentMonth, availableYears]);\n\n  const makePrediction = (year, month, allYearsData) => {\n    const futurePredictions = [];\n    for (let i = month + 1; i <= 12; i++) {\n      let totalTurni = 0;\n      let yearsCount = 0;\n      availableYears.forEach(y => {\n        const yearData = allYearsData[y];\n        if (yearData && yearData[i - 1] && yearData[i - 1].totaleTurni > 0) {\n          totalTurni += yearData[i - 1].totaleTurni;\n          yearsCount++;\n        }\n      });\n      if (yearsCount > 0) {\n        const averageTurni = totalTurni / yearsCount;\n        futurePredictions.push(`• ${getMonthName(i)}: ${formatNumber(averageTurni.toFixed(0))} turni`);\n      }\n    }\n\n    return `\n      Previsione per i mesi rimanenti dell'anno ${year}, basata sulla media degli anni precedenti:\n      ${futurePredictions.join('\\n')}\n    `;\n  };\n\n  const formatChartData = () => {\n    const chartData = [];\n    const { currentYear, currentMonth } = getCurrentYearAndMonth();\n    \n    // Calcola la media degli anni passati per la previsione\n    const calculateAverageForMonth = (month) => {\n      const relevantYears = availableYears.filter(year => year !== 2020 && year !== currentYear);\n      const sum = relevantYears.reduce((acc, year) => {\n        const yearData = allYearsData[year];\n        return acc + (yearData && yearData[month] ? yearData[month].totaleTurni : 0);\n      }, 0);\n      return sum / relevantYears.length;\n    };\n\n    for (let month = 0; month < 12; month++) {\n      const monthData = { month: getMonthName(month + 1) };\n      availableYears.forEach(year => {\n        const yearData = allYearsData[year];\n        if (year === currentYear) {\n          if (month < currentMonth) {\n            // Dati reali per i mesi passati\n            monthData[year] = yearData && yearData[month] ? yearData[month].totaleTurni : 0;\n          } else {\n            // Previsione per i mesi futuri\n            monthData[`${year}Prediction`] = calculateAverageForMonth(month);\n          }\n        } else {\n          // Dati degli anni passati\n          monthData[year] = yearData && yearData[month] ? yearData[month].totaleTurni : 0;\n        }\n      });\n      chartData.push(monthData);\n    }\n    return chartData;\n  };\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <ViewTitle>Performance Trend</ViewTitle>\n        <ChartContainer>\n          <AnalysisTitle>Trend annuale</AnalysisTitle>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={formatChartData()}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip />\n              {availableYears.map((year, index) => {\n                const isCurrentYear = year === getCurrentYearAndMonth().currentYear;\n                return (\n                  <React.Fragment key={year}>\n                    <Line\n                      type=\"monotone\"\n                      dataKey={year.toString()}\n                      stroke={colorPalette[index]}\n                      strokeWidth={isCurrentYear ? 3 : 1}\n                      dot={false}\n                    />\n                    {isCurrentYear && (\n                      <Line\n                        type=\"monotone\"\n                        dataKey={`${year}Prediction`}\n                        stroke={colorPalette[index]}\n                        strokeWidth={3}\n                        strokeDasharray=\"5 5\"\n                        dot={false}\n                      />\n                    )}\n                  </React.Fragment>\n                );\n              })}\n            </LineChart>\n          </ResponsiveContainer>\n          <LegendContainer>\n            {availableYears.map((year, index) => (\n              <LegendItem key={year}>\n                <LegendColor color={colorPalette[index]} />\n                <span>{year === getCurrentYearAndMonth().currentYear ? `${year} / Previsione ${year}` : year}</span>\n              </LegendItem>\n            ))}\n          </LegendContainer>\n        </ChartContainer>\n        {/* ... (resto del componente rimane invariato) */}\n      </ViewContent>\n    </ViewContainer>\n  );\n};\n\nexport default PerformanceTrendView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}